[{"content":"前言 嘿，大家好！我一直觉得拥有一个个人博客是件很酷的事情。它不仅是一个记录学习心得和分享技术经验的地方，更是一个展示自我的平台。在这篇文章中，我想和大家分享一下我在博客迁移过程中的心路历程。从最初的 Hexo 到现在的 Hugo，中间我还尝试了 Typecho、VitePress、WordPress 和 Halo。每一次迁移都让我对博客系统有了更深的理解。\n博客迁移历程 Hexo 初体验 最开始，我选择了 Hexo。想想当时，我刚刚接触编程，对很多编程的基础知识都还不是很熟悉，而又想要拥有一个记录自己学习心得和分享技术经验的地方；基于这个想法，我选择了 Hexo。它是一个轻量级的静态博客系统，使用 Markdown 语法编写文章，主题和插件也很丰富。更重要的是，它可以基于 Github Pages 免费部署，这对于我这个穷学生来说，这无疑是一个巨大的诱惑。\n然而，随着大陆对 Github 的访问越来越不稳定，以及对 Vercel 的访问限制，我不得不经常折腾去更换部署平台，套 CDN 加速，这让我感觉很麻烦。我开始思考，能不能拥有一个自己的服务器，然后自己部署博客呢？但随着我的文章越来越多，Hexo 的生成速度越来越慢，网站的访问速度动辄就要好几秒钟，这让我感觉很糟糕，于是我开始寻找其他博客系统。\nTypecho 的简约之美 接下来，我转向了 Typecho。它的优点是轻量级，对服务器要求低，而且是 PHP 驱动的，部署起来也很简单。界面简洁，专注写作，真的是很不错。不过，Typecho 的插件和主题市场相对较少，不支持多种类型的主题和插件，对于一些特殊需求根本无法满足。而且一旦遇到了问题，Typecho 的社区支持相对较少，这让我感觉很糟糕。\nWordPress 的全能之选 随着学习以及工作的压力，我越来越不想在博客上花费太多时间，希望博客系统能够尽可能的简单，可以一键式部署，这样我就可以把更多的精力放在写作以及工作、学习上。WordPress 无疑是最成熟的博客系统了。功能强大，插件丰富，主题样式多样，社区支持也很完善。用了一段时间后，我发现在模板方面，WordPress 丰富的模板库几乎全部都是以英语为主的，这导致了在中国大陆使用 WordPress 时，英文模板默认使用的谷歌字体成了站点加载速度的短板。即使有了 GoogleFonts 插件也无济于事，异步加载导致的字体跳变极其的突兀且影响观感。最后一点则是 WordPress 在资源占用方面并不算友好，尤其是以图片为主题的站点，长期使用对于内存是一个考验。综上，在考虑优劣后，我决定去换一个平台继续写作。\nVitePress 的现代化尝试 作为一个前端开发者，VitePress 的现代化构建方案让我很心动。它基于 Vue 3 和 Vite，开发体验非常好，构建速度也很快。不过，它更适合做技术文档，而不是个人博客，所以我又开始寻找新的选择。\nHalo 的新生力量 选择了很久后，最终定下了 HALO 作为新的博客架构。就决定是你了——Halo！\n了解到 Halo 是从 1panel 的应用商店中发现的，索性去官网了解了一番，又从 V2EX 上看到了 Halo 官方征集用户需求的帖子，感觉官方很会听取用户意见和建议，相关的问题也反应很迅速。再加上 Halo 设计的调性我十分中意，索性直接下载安装，直接把 WordPress 的数据迁入了 Halo。\n在使用 Halo 这几年里，我感受到了 Halo 的强大。从一开始使用的 Butterfly 主题，到 Hao 主题，再到后面追求的 Chirpy 主题，我也成为了 Halo Chirpy 主题的代码贡献者。Halo 无论在部署的便捷性，还是社区的交流，Halo 都给了我很大的帮助。而且从 Halo 1.x 到 2.x 的更新，Halo 的性能得到了很大的提升，插件系统的不断完善以及 Halo 的应用生态的逐渐丰富，让我可以只写内容，其他的事情交给 Halo。甚至于像平台收录，SEO 优化，CDN 加速，这些事情都可以交给 Halo 去处理。\n我一直想着，如果不出意外，我应该会一直使用 Halo 作为我的博客架构，直到我不再需要博客。\n但自从我更换了我的服务器厂商，2H2G 的内存，让我在跑 Halo 时，内存占用直接飙到 100% 并且直接宕机直到服务器自动关闭我的 Halo 进程，这让我感觉很糟糕（同样是 2H2G 的内存，阿里/腾讯/华为的云服务器，都可以正常运行；但是！京东云\u0026mdash;）\n所以，我不得不开始寻找新的博客系统。\nHugo 经过多次迁移，我最终选择了 Hugo。为什么呢？因为它有以下几个优点：\n极致的速度：Hugo 是用 Go 语言编写的，构建速度快得惊人。 简单部署：它是静态站点，不需要数据库，部署起来非常简单。 维护方便：使用 Markdown 写作，版本控制也很方便。 高度定制：支持自定义主题和功能，满足我的各种需求。 安全可靠：静态网站天然安全，不用担心被攻击。 而对于传统静态博客的部署问题，我也可以使用 Github Actions 来实现自动化部署。\nHugo 的这些优点让我感到非常满意，尤其是在我需要一个快速、稳定且易于维护的博客系统时。它让我可以专注于内容创作，而不必担心技术上的琐事。\n","permalink":"https://waite.wang/posts/blog/first-post-in-hugo/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e嘿，大家好！我一直觉得拥有一个个人博客是件很酷的事情。它不仅是一个记录学习心得和分享技术经验的地方，更是一个展示自我的平台。在这篇文章中，我想和大家分享一下我在博客迁移过程中的心路历程。从最初的 Hexo 到现在的 Hugo，中间我还尝试了 Typecho、VitePress、WordPress 和 Halo。每一次迁移都让我对博客系统有了更深的理解。\u003c/p\u003e","title":"博客迁移小记"},{"content":" Devbox 地址：https://cloud.sealos.run/?uid=Kt1gH3_BTa\nCursor 地址: https://www.cursor.com/settings\n创建数据库和初始项目 我们这里创建一个 MongoDB 数据库\n创建完之后在 DevBox 创建一个 NodeJS + Express 的项目,注意创建在 3000 端口\n选择用 Cursor 打开，这里会提示安装插件，安装即可\n打开后 Ctrl + L 打开 AI 创作窗口，选择 Composer 输入提示词创建项目。\n请为我开发一个基于 Node.js 和Express 框架的 Todo List 后端项目。项目需要实现以下四个 RESTful API 接口： 1. 查询所有待办事项 - 接口名: GET /api/get-todo - 功能: 从数据库的\u0026#39;list\u0026#39;集合中查询并返回所有待办事项 - 参数: 无 - 返回: 包含所有待办事项的数组 2. 添加新的待办事项 - 接口名: POST /api/add-todo - 功能: 向\u0026#39;list\u0026#39;集合中添加新的待办事项 - 参数: { \u0026#34;value\u0026#34;: string, // 待办事项的具体内容 \u0026#34;isCompleted\u0026#34;: boolean // 是否完成，默认为 false } - 返回: 新添加的待办事项对象，包含自动生成的唯一 id 3. 更新待办事项状态 - 接口名: POST /api/update-todo/ - 功能: 根据 id 更新指定待办事项的完成状态（将 isCompleted 值取反） - 参数: id - 返回: 更新后的待办事项对象 4. 删除待办事项 - 接口名: POST /api/del-todo/ - 功能: 根据 id 删除指定的待办事项 - 参数: id - 返回: 删除操作的结果状态 技术要求： 1. 使用 Express 框架构建 API 2. 使用 MongoDB 作为数据库，通过 Mongoose 进行数据操作 3. 实现适当的错误处理和输入验证 4. 使用异步/等待（async/await）语法处理异步操作 5. 遵循 RESTful API 设计原则 6. 添加基本的日志记录功能 ### 这里数据库连接方式要填写！！！ 以下是数据库连接方式： 这里 AI 会自动帮我们创建项目结构以及生成相应代码\n在终端运行 node app.js 这里可能会报错，如果看不懂报错直接复制丢给 AI 即可， 这里提示我们安装依赖包，按要求安装\n这里我们可以看到运行成功了\n在 DevBox 打开后端项目详情，看到公网地址，我们可以根据这个域名访问到我们的后端项目\n为了测试接口 我们可以让 Cursor 帮我们生成测试用例\n可以看到接口正常运行了\n创建 Web 端 创建一个 Vue 项目，并且更改端口为 5173（不要为3000或者其他常用端口即可） 用 Cursor 打开项目，输入提示词 请为我开发一个基于 Vue 3 的Todo List 应用。要求如下： 1. 功能需求： - 添加新的待办事项 - 标记待办事项为完成/未完成 - 删除待办事项 - 统计待办事项完成度 - 过滤显示（全部/已完成/未完成） 2. UI/UX 设计要求： - 全屏响应式设计，适配不同设备 - 拥有亮色模式和夜间模式 - 现代化、简洁的界面风格 - 丰富的色彩运用，但保持整体和谐 - 流畅的交互动画，提升用户体验 - 在按钮和需要的地方添加上图标 - 参考灵感：结合苹果官网的设计美学 要求： 1. 直接以当前目录作为项目根目。注意 此目录已经初始化完了vue3项目结构 直接修改即可 2. 如果需要执行命令，请暂停创建文件，让我先执行命令 3. 请你根据我的需要，一步一步思考，给我开发这个项目。特别是UI部分 一定要足够美观和现代化 后端接口如下： https://wpifxnmfmpef.sealoshzh.site/api/ API 接口： 1. 查询所有待办事项 - 接口名: GET /api/get-todo - 功能: 从数据库的\u0026#39;list\u0026#39;集合中查询并返回所有待办事项 - 参数: 无 - 返回: 包含所有待办事项的数组 2. 添加新的待办事项 - 接口名: POST /api/add-todo - 功能: 向\u0026#39;list\u0026#39;集合中添加新的待办事项 - 参数: { \u0026#34;value\u0026#34;: string, // 待办事项的具体内容 \u0026#34;isCompleted\u0026#34;: boolean // 是否完成，默认为 false } - 返回: 新添加的待办事项对象，包含自动生成的唯一 id 3. 更新待办事项状态 - 接口名: POST /api/update-todo/ - 功能: 根据 id 更新指定待办事项的完成状态（将 isCompleted 值取反） - 参数: id - 返回: 更新后的待办事项对象 4. 删除待办事项 - 接口名: POST /api/del-todo/ - 功能: 根据 id 删除指定的待办事项 - 参数: id - 返回: 删除操作的结果状态 按提示安装\n安装后输入继续，将会继续帮我们创建项目，创建成功使用 npm run dev 启动项目\n可以看到項目正常启动，并且功能正常，如果想要更改可以继续精华提示词\n生成的代码 https://github.com/Waite0603/todolist-cursor-nodeApi\nhttps://github.com/Waite0603/todolist-cursor-web\n","permalink":"https://waite.wang/posts/project/use-cursor-and-devbox-to-create-todelis-web/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDevbox 地址：https://cloud.sealos.run/?uid=Kt1gH3_BTa\u003c/p\u003e\n\u003cp\u003eCursor 地址: \u003ca href=\"https://www.cursor.com/settings\"\u003ehttps://www.cursor.com/settings\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"创建数据库和初始项目\"\u003e创建数据库和初始项目\u003c/h2\u003e\n\u003cp\u003e我们这里创建一个 MongoDB 数据库\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"image-20241227205105497\" loading=\"lazy\" src=\"https://qiniu.waite.wang/202412272051422.png\"\u003e\u003c/p\u003e\n\u003cp\u003e创建完之后在 DevBox 创建一个 NodeJS + Express 的项目,注意创建在 3000 端口\u003c/p\u003e","title":"使用Cursor+DevBox 从零创建一个 TodeList 网页应用"},{"content":"HTTP [HTTP ](#http) 一 、基础概念\n请求和响应报文 URL 二、HTTP 方法\nGET HEAD POST PUT PATCH DELETE OPTIONS CONNECT TRACE 三、HTTP 状态码\n1XX 信息 2XX 成功 3XX 重定向 4XX 客户端错误 5XX 服务器错误 四、HTTP 首部\n通用首部字段 请求首部字段 响应首部字段 实体首部字段 五、具体应用\n连接管理 Cookie 缓存 内容协商 内容编码 范围请求 分块传输编码 多部分对象集合 虚拟主机 通信数据转发 六、HTTPS\n加密 认证 完整性保护 HTTPS 的缺点 七、HTTP/2.0\nHTTP/1.x 缺陷 二进制分帧层 服务端推送 首部压缩 八、HTTP/1.1 新特性\n九、GET 和 POST 比较\n作用 参数 安全 幂等性 可缓存 XMLHttpRequest 参考资料\n一 、基础概念 请求和响应报文 客户端发送一个请求报文给服务器，服务器根据请求报文中的信息进行处理，并将处理结果放入响应报文中返回给客户端。\n请求报文结构：\n第一行是包含了请求方法、URL、协议版本； 接下来的多行都是请求首部 Header，每个首部都有一个首部名称，以及对应的值。 一个空行用来分隔首部和内容主体 Body 最后是请求的内容主体 GET http://www.example.com/ HTTP/1.1 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en;q=0.8 Cache-Control: max-age=0 If-Modified-Since: Thu, 17 Oct 2019 07:18:26 GMT If-None-Match: \u0026#34;3147526947+gzip\u0026#34; Proxy-Connection: keep-alive Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 xxx param1=1\u0026amp;param2=2 响应报文结构：\n第一行包含协议版本、状态码以及描述，最常见的是 200 OK 表示请求成功了 接下来多行也是首部内容 一个空行分隔首部和内容主体 最后是响应的内容主体 HTTP/1.1 200 OK Age: 529651 Cache-Control: max-age=604800 Connection: keep-alive Content-Encoding: gzip Content-Length: 648 Content-Type: text/html; charset=UTF-8 Date: Mon, 02 Nov 2020 17:53:39 GMT Etag: \u0026#34;3147526947+ident+gzip\u0026#34; Expires: Mon, 09 Nov 2020 17:53:39 GMT Keep-Alive: timeout=4 Last-Modified: Thu, 17 Oct 2019 07:18:26 GMT Proxy-Connection: keep-alive Server: ECS (sjc/16DF) Vary: Accept-Encoding X-Cache: HIT \u0026lt;!doctype html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Example Domain\u0026lt;/title\u0026gt; // 省略... \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; URL HTTP 使用 URL（ U niform Resource Locator，统一资源定位符）来定位资源，它是 URI（Uniform Resource Identifier，统一资源标识符）的子集，URL 在 URI 的基础上增加了定位能力。URI 除了包含 URL，还包含 URN（Uniform Resource Name，统一资源名称），它只是用来定义一个资源的名称，并不具备定位该资源的能力。例如 urn:isbn:0451450523 用来定义一个书籍名称，但是却没有表示怎么找到这本书。\nwikipedia：统一资源标志符 wikipedia: URL rfc2616：3.2.2 http URL What is the difference between a URI, a URL and a URN? 二、HTTP 方法 客户端发送的 请求报文 第一行为请求行，包含了方法字段。\nGET 获取资源\n当前网络请求中，绝大部分使用的是 GET 方法。\nHEAD 获取报文首部\n和 GET 方法类似，但是不返回报文实体主体部分。\n主要用于确认 URL 的有效性以及资源更新的日期时间等。\nPOST 传输实体主体\nPOST 主要用来传输数据，而 GET 主要用来获取资源。\n更多 POST 与 GET 的比较请见第九章。\nPUT 上传文件\n由于自身不带验证机制，任何人都可以上传文件，因此存在安全性问题，一般不使用该方法。\nPUT /new.html HTTP/1.1 Host: example.com Content-type: text/html Content-length: 16 \u0026lt;p\u0026gt;New File\u0026lt;/p\u0026gt; PATCH 对资源进行部分修改\nPUT 也可以用于修改资源，但是只能完全替代原始资源，PATCH 允许部分修改。\nPATCH /file.txt HTTP/1.1 Host: www.example.com Content-Type: application/example If-Match: \u0026#34;e0023aa4e\u0026#34; Content-Length: 100 [description of changes] DELETE 删除文件\n与 PUT 功能相反，并且同样不带验证机制。\nDELETE /file.html HTTP/1.1 OPTIONS 查询支持的方法\n查询指定的 URL 能够支持的方法。\n会返回 Allow: GET, POST, HEAD, OPTIONS 这样的内容。\nCONNECT 要求在与代理服务器通信时建立隧道\n使用 SSL（Secure Sockets Layer，安全套接层）和 TLS（Transport Layer Security，传输层安全）协议把通信内容加密后经网络隧道传输。\nCONNECT www.example.com:443 HTTP/1.1 TRACE 追踪路径\n服务器会将通信路径返回给客户端。\n发送请求时，在 Max-Forwards 首部字段中填入数值，每经过一个服务器就会减 1，当数值为 0 时就停止传输。\n通常不会使用 TRACE，并且它容易受到 XST 攻击（Cross-Site Tracing，跨站追踪）。\nrfc2616：9 Method Definitions 三、HTTP 状态码 服务器返回的 响应报文 中第一行为状态行，包含了状态码以及原因短语，用来告知客户端请求的结果。\n状态码 类别 含义 1XX Informational（信息性状态码） 接收的请求正在处理 2XX Success（成功状态码） 请求正常处理完毕 3XX Redirection（重定向状态码） 需要进行附加操作以完成请求 4XX Client Error（客户端错误状态码） 服务器无法处理请求 5XX Server Error（服务器错误状态码） 服务器处理请求出错 1XX 信息 100 Continue ：表明到目前为止都很正常，客户端可以继续发送请求或者忽略这个响应。 2XX 成功 200 OK 204 No Content ：请求已经成功处理，但是返回的响应报文不包含实体的主体部分。一般在只需要从客户端往服务器发送信息，而不需要返回数据时使用。 206 Partial Content ：表示客户端进行了范围请求，响应报文包含由 Content-Range 指定范围的实体内容。 3XX 重定向 301 Moved Permanently ：永久性重定向 302 Found ：临时性重定向 303 See Other ：和 302 有着相同的功能，但是 303 明确要求客户端应该采用 GET 方法获取资源。 注：虽然 HTTP 协议规定 301、302 状态下重定向时不允许把 POST 方法改成 GET 方法，但是大多数浏览器都会在 301、302 和 303 状态下的重定向把 POST 方法改成 GET 方法。 304 Not Modified ：如果请求报文首部包含一些条件，例如：If-Match，If-Modified-Since，If-None-Match，If-Range，If-Unmodified-Since，如果不满足条件，则服务器会返回 304 状态码。 307 Temporary Redirect ：临时重定向，与 302 的含义类似，但是 307 要求浏览器不会把重定向请求的 POST 方法改成 GET 方法。 4XX 客户端错误 400 Bad Request ：请求报文中存在语法错误。 401 Unauthorized ：该状态码表示发送的请求需要有认证信息（BASIC 认证、DIGEST 认证）。如果之前已进行过一次请求，则表示用户认证失败。 403 Forbidden ：请求被拒绝。 404 Not Found 5XX 服务器错误 500 Internal Server Error ：服务器正在执行请求时发生错误。 503 Service Unavailable ：服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。 四、HTTP 首部 有 4 种类型的首部字段：通用首部字段、请求首部字段、响应首部字段和实体首部字段。\n各种首部字段及其含义如下（不需要全记，仅供查阅）：\n通用首部字段 首部字段名 说明 Cache-Control 控制缓存的行为 Connection 控制不再转发给代理的首部字段、管理持久连接 Date 创建报文的日期时间 Pragma 报文指令 Trailer 报文末端的首部一览 Transfer-Encoding 指定报文主体的传输编码方式 Upgrade 升级为其他协议 Via 代理服务器的相关信息 Warning 错误通知 请求首部字段 首部字段名 说明 Accept 用户代理可处理的媒体类型 Accept-Charset 优先的字符集 Accept-Encoding 优先的内容编码 Accept-Language 优先的语言（自然语言） Authorization Web 认证信息 Expect 期待服务器的特定行为 From 用户的电子邮箱地址 Host 请求资源所在服务器 If-Match 比较实体标记（ETag） If-Modified-Since 比较资源的更新时间 If-None-Match 比较实体标记（与 If-Match 相反） If-Range 资源未更新时发送实体 Byte 的范围请求 If-Unmodified-Since 比较资源的更新时间（与 If-Modified-Since 相反） Max-Forwards 最大传输逐跳数 Proxy-Authorization 代理服务器要求客户端的认证信息 Range 实体的字节范围请求 Referer 对请求中 URI 的原始获取方 TE 传输编码的优先级 User-Agent HTTP 客户端程序的信息 响应首部字段 首部字段名 说明 Accept-Ranges 是否接受字节范围请求 Age 推算资源创建经过时间 ETag 资源的匹配信息 Location 令客户端重定向至指定 URI Proxy-Authenticate 代理服务器对客户端的认证信息 Retry-After 对再次发起请求的时机要求 Server HTTP 服务器的安装信息 Vary 代理服务器缓存的管理信息 WWW-Authenticate 服务器对客户端的认证信息 实体首部字段 首部字段名 说明 Allow 资源可支持的 HTTP 方法 Content-Encoding 实体主体适用的编码方式 Content-Language 实体主体的自然语言 Content-Length 实体主体的大小 Content-Location 替代对应资源的 URI Content-MD5 实体主体的报文摘要 Content-Range 实体主体的位置范围 Content-Type 实体主体的媒体类型 Expires 实体主体过期的日期时间 Last-Modified 资源的最后修改日期时间 五、具体应用 连接管理 1. 短连接与长连接 当浏览器访问一个包含多张图片的 HTML 页面时，除了请求访问的 HTML 页面资源，还会请求图片资源。如果每进行一次 HTTP 通信就要新建一个 TCP 连接，那么开销会很大。\n长连接只需要建立一次 TCP 连接就能进行多次 HTTP 通信。\n从 HTTP/1.1 开始默认是长连接的，如果要断开连接，需要由客户端或者服务器端提出断开，使用 Connection : close； 在 HTTP/1.1 之前默认是短连接的，如果需要使用长连接，则使用 Connection : Keep-Alive。 2. 流水线 默认情况下，HTTP 请求是按顺序发出的，下一个请求只有在当前请求收到响应之后才会被发出。由于受到网络延迟和带宽的限制，在下一个请求被发送到服务器之前，可能需要等待很长时间。\n流水线是在同一条长连接上连续发出请求，而不用等待响应返回，这样可以减少延迟。\nCookie HTTP 协议是无状态的，主要是为了让 HTTP 协议尽可能简单，使得它能够处理大量事务。HTTP/1.1 引入 Cookie 来保存状态信息。\nCookie 是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器之后向同一服务器再次发起请求时被携带上，用于告知服务端两个请求是否来自同一浏览器。由于之后每次请求都会需要携带 Cookie 数据，因此会带来额外的性能开销（尤其是在移动环境下）。\nCookie 曾一度用于客户端数据的存储，因为当时并没有其它合适的存储办法而作为唯一的存储手段，但现在随着现代浏览器开始支持各种各样的存储方式，Cookie 渐渐被淘汰。新的浏览器 API 已经允许开发者直接将数据存储到本地，如使用 Web storage API（本地存储和会话存储）或 IndexedDB。\n1. 用途 会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息） 个性化设置（如用户自定义设置、主题等） 浏览器行为跟踪（如跟踪分析用户行为等） 2. 创建过程 服务器发送的响应报文包含 Set-Cookie 首部字段，客户端得到响应报文后把 Cookie 内容保存到浏览器中。\nHTTP/1.0 200 OK Content-type: text/html Set-Cookie: yummy_cookie=choco Set-Cookie: tasty_cookie=strawberry [page content] 客户端之后对同一个服务器发送请求时，会从浏览器中取出 Cookie 信息并通过 Cookie 请求首部字段发送给服务器。\nGET /sample_page.html HTTP/1.1 Host: www.example.org Cookie: yummy_cookie=choco; tasty_cookie=strawberry 3. 分类 会话期 Cookie：浏览器关闭之后它会被自动删除，也就是说它仅在会话期内有效。 持久性 Cookie：指定过期时间（Expires）或有效期（max-age）之后就成为了持久性的 Cookie。 Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT; 4. 作用域 Domain 标识指定了哪些主机可以接受 Cookie。如果不指定，默认为当前文档的主机（不包含子域名）。如果指定了 Domain，则一般包含子域名。例如，如果设置 Domain=mozilla.org，则 Cookie 也包含在子域名中（如 developer.mozilla.org）。\nPath 标识指定了主机下的哪些路径可以接受 Cookie（该 URL 路径必须存在于请求 URL 中）。以字符 %x2F (\u0026quot;/\u0026quot;) 作为路径分隔符，子路径也会被匹配。例如，设置 Path=/docs，则以下地址都会匹配：\n/docs /docs/Web/ /docs/Web/HTTP 5. JavaScript 浏览器通过 document.cookie 属性可创建新的 Cookie，也可通过该属性访问非 HttpOnly 标记的 Cookie。\ndocument.cookie = \u0026#34;yummy_cookie=choco\u0026#34;; document.cookie = \u0026#34;tasty_cookie=strawberry\u0026#34;; console.log(document.cookie); 6. HttpOnly 标记为 HttpOnly 的 Cookie 不能被 JavaScript 脚本调用。跨站脚本攻击 (XSS) 常常使用 JavaScript 的 document.cookie API 窃取用户的 Cookie 信息，因此使用 HttpOnly 标记可以在一定程度上避免 XSS 攻击。\nSet-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Secure; HttpOnly 7. Secure 标记为 Secure 的 Cookie 只能通过被 HTTPS 协议加密过的请求发送给服务端。但即便设置了 Secure 标记，敏感信息也不应该通过 Cookie 传输，因为 Cookie 有其固有的不安全性，Secure 标记也无法提供确实的安全保障。\n8. Session 除了可以将用户信息通过 Cookie 存储在用户浏览器中，也可以利用 Session 存储在服务器端，存储在服务器端的信息更加安全。\nSession 可以存储在服务器上的文件、数据库或者内存中。也可以将 Session 存储在 Redis 这种内存型数据库中，效率会更高。\n使用 Session 维护用户登录状态的过程如下：\n用户进行登录时，用户提交包含用户名和密码的表单，放入 HTTP 请求报文中； 服务器验证该用户名和密码，如果正确则把用户信息存储到 Redis 中，它在 Redis 中的 Key 称为 Session ID； 服务器返回的响应报文的 Set-Cookie 首部字段包含了这个 Session ID，客户端收到响应报文之后将该 Cookie 值存入浏览器中； 客户端之后对同一个服务器进行请求时会包含该 Cookie 值，服务器收到之后提取出 Session ID，从 Redis 中取出用户信息，继续之前的业务操作。 应该注意 Session ID 的安全性问题，不能让它被恶意攻击者轻易获取，那么就不能产生一个容易被猜到的 Session ID 值。此外，还需要经常重新生成 Session ID。在对安全性要求极高的场景下，例如转账等操作，除了使用 Session 管理用户状态之外，还需要对用户进行重新验证，比如重新输入密码，或者使用短信验证码等方式。\n9. 浏览器禁用 Cookie 此时无法使用 Cookie 来保存用户信息，只能使用 Session。除此之外，不能再将 Session ID 存放到 Cookie 中，而是使用 URL 重写技术，将 Session ID 作为 URL 的参数进行传递。\n10. Cookie 与 Session 选择 Cookie 只能存储 ASCII 码字符串，而 Session 则可以存储任何类型的数据，因此在考虑数据复杂性时首选 Session； Cookie 存储在浏览器中，容易被恶意查看。如果非要将一些隐私数据存在 Cookie 中，可以将 Cookie 值进行加密，然后在服务器进行解密； 对于大型网站，如果用户所有的信息都存储在 Session 中，那么开销是非常大的，因此不建议将所有的用户信息都存储到 Session 中。 缓存 1. 优点 缓解服务器压力； 降低客户端获取资源的延迟：缓存通常位于内存中，读取缓存的速度更快。并且缓存服务器在地理位置上也有可能比源服务器来得近，例如浏览器缓存。 2. 实现方法 让代理服务器进行缓存； 让客户端浏览器进行缓存。 3. Cache-Control HTTP/1.1 通过 Cache-Control 首部字段来控制缓存。\n3.1 禁止进行缓存\nno-store 指令规定不能对请求或响应的任何一部分进行缓存。\nCache-Control: no-store 3.2 强制确认缓存\nno-cache 指令规定缓存服务器需要先向源服务器验证缓存资源的有效性，只有当缓存资源有效时才能使用该缓存对客户端的请求进行响应。\nCache-Control: no-cache 3.3 私有缓存和公共缓存\nprivate 指令规定了将资源作为私有缓存，只能被单独用户使用，一般存储在用户浏览器中。\nCache-Control: private public 指令规定了将资源作为公共缓存，可以被多个用户使用，一般存储在代理服务器中。\nCache-Control: public 3.4 缓存过期机制\nmax-age 指令出现在请求报文，并且缓存资源的缓存时间小于该指令指定的时间，那么就能接受该缓存。\nmax-age 指令出现在响应报文，表示缓存资源在缓存服务器中保存的时间。\nCache-Control: max-age=31536000 Expires 首部字段也可以用于告知缓存服务器该资源什么时候会过期。\nExpires: Wed, 04 Jul 2012 08:26:05 GMT 在 HTTP/1.1 中，会优先处理 max-age 指令； 在 HTTP/1.0 中，max-age 指令会被忽略掉。 4. 缓存验证 需要先了解 ETag 首部字段的含义，它是资源的唯一标识。URL 不能唯一表示资源，例如 http://www.google.com/ 有中文和英文两个资源，只有 ETag 才能对这两个资源进行唯一标识。\nETag: \u0026#34;82e22293907ce725faf67773957acd12\u0026#34; 可以将缓存资源的 ETag 值放入 If-None-Match 首部，服务器收到该请求后，判断缓存资源的 ETag 值和资源的最新 ETag 值是否一致，如果一致则表示缓存资源有效，返回 304 Not Modified。\nIf-None-Match: \u0026#34;82e22293907ce725faf67773957acd12\u0026#34; Last-Modified 首部字段也可以用于缓存验证，它包含在源服务器发送的响应报文中，指示源服务器对资源的最后修改时间。但是它是一种弱校验器，因为只能精确到一秒，所以它通常作为 ETag 的备用方案。如果响应首部字段里含有这个信息，客户端可以在后续的请求中带上 If-Modified-Since 来验证缓存。服务器只在所请求的资源在给定的日期时间之后对内容进行过修改的情况下才会将资源返回，状态码为 200 OK。如果请求的资源从那时起未经修改，那么返回一个不带有实体主体的 304 Not Modified 响应报文。\nLast-Modified: Wed, 21 Oct 2015 07:28:00 GMT If-Modified-Since: Wed, 21 Oct 2015 07:28:00 GMT 内容协商 通过内容协商返回最合适的内容，例如根据浏览器的默认语言选择返回中文界面还是英文界面。\n1. 类型 1.1 服务端驱动型\n客户端设置特定的 HTTP 首部字段，例如 Accept、Accept-Charset、Accept-Encoding、Accept-Language，服务器根据这些字段返回特定的资源。\n它存在以下问题：\n服务器很难知道客户端浏览器的全部信息； 客户端提供的信息相当冗长（HTTP/2 协议的首部压缩机制缓解了这个问题），并且存在隐私风险（HTTP 指纹识别技术）； 给定的资源需要返回不同的展现形式，共享缓存的效率会降低，而服务器端的实现会越来越复杂。 1.2 代理驱动型\n服务器返回 300 Multiple Choices 或者 406 Not Acceptable，客户端从中选出最合适的那个资源。\n2. Vary Vary: Accept-Language 在使用内容协商的情况下，只有当缓存服务器中的缓存满足内容协商条件时，才能使用该缓存，否则应该向源服务器请求该资源。\n例如，一个客户端发送了一个包含 Accept-Language 首部字段的请求之后，源服务器返回的响应包含 Vary: Accept-Language 内容，缓存服务器对这个响应进行缓存之后，在客户端下一次访问同一个 URL 资源，并且 Accept-Language 与缓存中的对应的值相同时才会返回该缓存。\n内容编码 内容编码将实体主体进行压缩，从而减少传输的数据量。\n常用的内容编码有：gzip、compress、deflate、identity。\n浏览器发送 Accept-Encoding 首部，其中包含有它所支持的压缩算法，以及各自的优先级。服务器则从中选择一种，使用该算法对响应的消息主体进行压缩，并且发送 Content-Encoding 首部来告知浏览器它选择了哪一种算法。由于该内容协商过程是基于编码类型来选择资源的展现形式的，响应报文的 Vary 首部字段至少要包含 Content-Encoding。\n范围请求 如果网络出现中断，服务器只发送了一部分数据，范围请求可以使得客户端只请求服务器未发送的那部分数据，从而避免服务器重新发送所有数据。\n1. Range 在请求报文中添加 Range 首部字段指定请求的范围。\nGET /z4d4kWk.jpg HTTP/1.1 Host: i.imgur.com Range: bytes=0-1023 请求成功的话服务器返回的响应包含 206 Partial Content 状态码。\nHTTP/1.1 206 Partial Content Content-Range: bytes 0-1023/146515 Content-Length: 1024 ... (binary content) 2. Accept-Ranges 响应首部字段 Accept-Ranges 用于告知客户端是否能处理范围请求，可以处理使用 bytes，否则使用 none。\nAccept-Ranges: bytes 3. 响应状态码 在请求成功的情况下，服务器会返回 206 Partial Content 状态码。 在请求的范围越界的情况下，服务器会返回 416 Requested Range Not Satisfiable 状态码。 在不支持范围请求的情况下，服务器会返回 200 OK 状态码。 分块传输编码 Chunked Transfer Encoding，可以把数据分割成多块，让浏览器逐步显示页面。\n多部分对象集合 一份报文主体内可含有多种类型的实体同时发送，每个部分之间用 boundary 字段定义的分隔符进行分隔，每个部分都可以有首部字段。\n例如，上传多个表单时可以使用如下方式：\nContent-Type: multipart/form-data; boundary=AaB03x --AaB03x Content-Disposition: form-data; name=\u0026#34;submit-name\u0026#34; Larry --AaB03x Content-Disposition: form-data; name=\u0026#34;files\u0026#34;; filename=\u0026#34;file1.txt\u0026#34; Content-Type: text/plain ... contents of file1.txt ... --AaB03x-- 虚拟主机 HTTP/1.1 使用虚拟主机技术，使得一台服务器拥有多个域名，并且在逻辑上可以看成多个服务器。\n通信数据转发 1. 代理 代理服务器接受客户端的请求，并且转发给其它服务器。\n使用代理的主要目的是：\n缓存 负载均衡 网络访问控制 访问日志记录 代理服务器分为正向代理和反向代理两种：\n用户察觉得到正向代理的存在。 而反向代理一般位于内部网络中，用户察觉不到。 2. 网关 与代理服务器不同的是，网关服务器会将 HTTP 转化为其它协议进行通信，从而请求其它非 HTTP 服务器的服务。\n3. 隧道 使用 SSL 等加密手段，在客户端和服务器之间建立一条安全的通信线路。\n六、HTTPS HTTP 有以下安全性问题：\n使用明文进行通信，内容可能会被窃听； 不验证通信方的身份，通信方的身份有可能遭遇伪装； 无法证明报文的完整性，报文有可能遭篡改。 HTTPS 并不是新协议，而是让 HTTP 先和 SSL（Secure Sockets Layer）通信，再由 SSL 和 TCP 通信，也就是说 HTTPS 使用了隧道进行通信。\n通过使用 SSL，HTTPS 具有了加密（防窃听）、认证（防伪装）和完整性保护（防篡改）。\n加密 1. 对称密钥加密 对称密钥加密（Symmetric-Key Encryption），加密和解密使用同一密钥。\n优点：运算速度快； 缺点：无法安全地将密钥传输给通信方。 2.非对称密钥加密 非对称密钥加密，又称公开密钥加密（Public-Key Encryption），加密和解密使用不同的密钥。\n公开密钥所有人都可以获得，通信发送方获得接收方的公开密钥之后，就可以使用公开密钥进行加密，接收方收到通信内容后使用私有密钥解密。\n非对称密钥除了用来加密，还可以用来进行签名。因为私有密钥无法被其他人获取，因此通信发送方使用其私有密钥进行签名，通信接收方使用发送方的公开密钥对签名进行解密，就能判断这个签名是否正确。\n优点：可以更安全地将公开密钥传输给通信发送方； 缺点：运算速度慢。 3. HTTPS 采用的加密方式 上面提到对称密钥加密方式的传输效率更高，但是无法安全地将密钥 Secret Key 传输给通信方。而非对称密钥加密方式可以保证传输的安全性，因此我们可以利用非对称密钥加密方式将 Secret Key 传输给通信方。HTTPS 采用混合的加密机制，正是利用了上面提到的方案：\n使用非对称密钥加密方式，传输对称密钥加密方式所需要的 Secret Key，从而保证安全性; 获取到 Secret Key 后，再使用对称密钥加密方式进行通信，从而保证效率。（下图中的 Session Key 就是 Secret Key） 认证 通过使用 证书 来对通信方进行认证。\n数字证书认证机构（CA，Certificate Authority）是客户端与服务器双方都可信赖的第三方机构。\n服务器的运营人员向 CA 提出公开密钥的申请，CA 在判明提出申请者的身份之后，会对已申请的公开密钥做数字签名，然后分配这个已签名的公开密钥，并将该公开密钥放入公开密钥证书后绑定在一起。\n进行 HTTPS 通信时，服务器会把证书发送给客户端。客户端取得其中的公开密钥之后，先使用数字签名进行验证，如果验证通过，就可以开始通信了。\n完整性保护 SSL 提供报文摘要功能来进行完整性保护。\nHTTP 也提供了 MD5 报文摘要功能，但不是安全的。例如报文内容被篡改之后，同时重新计算 MD5 的值，通信接收方是无法意识到发生了篡改。\nHTTPS 的报文摘要功能之所以安全，是因为它结合了加密和认证这两个操作。试想一下，加密之后的报文，遭到篡改之后，也很难重新计算报文摘要，因为无法轻易获取明文。\nHTTPS 的缺点 因为需要进行加密解密等过程，因此速度会更慢； 需要支付证书授权的高额费用。 七、HTTP/2.0 HTTP/1.x 缺陷 HTTP/1.x 实现简单是以牺牲性能为代价的：\n客户端需要使用多个连接才能实现并发和缩短延迟； 不会压缩请求和响应首部，从而导致不必要的网络流量； 不支持有效的资源优先级，致使底层 TCP 连接的利用率低下。 二进制分帧层 HTTP/2.0 将报文分成 HEADERS 帧和 DATA 帧，它们都是二进制格式的。\n在通信过程中，只会有一个 TCP 连接存在，它承载了任意数量的双向数据流（Stream）。\n一个数据流（Stream）都有一个唯一标识符和可选的优先级信息，用于承载双向信息。 消息（Message）是与逻辑请求或响应对应的完整的一系列帧。 帧（Frame）是最小的通信单位，来自不同数据流的帧可以交错发送，然后再根据每个帧头的数据流标识符重新组装。 服务端推送 HTTP/2.0 在客户端请求一个资源时，会把相关的资源一起发送给客户端，客户端就不需要再次发起请求了。例如客户端请求 page.html 页面，服务端就把 script.js 和 style.css 等与之相关的资源一起发给客户端。\n首部压缩 HTTP/1.1 的首部带有大量信息，而且每次都要重复发送。\nHTTP/2.0 要求客户端和服务器同时维护和更新一个包含之前见过的首部字段表，从而避免了重复传输。\n不仅如此，HTTP/2.0 也使用 Huffman 编码对首部字段进行压缩。\n八、HTTP/1.1 新特性 详细内容请见上文\n默认是长连接 支持流水线 支持同时打开多个 TCP 连接 支持虚拟主机 新增状态码 100 支持分块传输编码 新增缓存处理指令 max-age 九、GET 和 POST 比较 作用 GET 用于获取资源，而 POST 用于传输实体主体。\n参数 GET 和 POST 的请求都能使用额外的参数，但是 GET 的参数是以查询字符串出现在 URL 中，而 POST 的参数存储在实体主体中。不能因为 POST 参数存储在实体主体中就认为它的安全性更高，因为照样可以通过一些抓包工具（Fiddler）查看。\n因为 URL 只支持 ASCII 码，因此 GET 的参数中如果存在中文等字符就需要先进行编码。例如 中文 会转换为 %E4%B8%AD%E6%96%87，而空格会转换为 %20。POST 参数支持标准字符集。\nGET /test/demo_form.asp?name1=value1\u0026amp;name2=value2 HTTP/1.1 POST /test/demo_form.asp HTTP/1.1 Host: w3schools.com name1=value1\u0026amp;name2=value2 安全 安全的 HTTP 方法不会改变服务器状态，也就是说它只是可读的。\nGET 方法是安全的，而 POST 却不是，因为 POST 的目的是传送实体主体内容，这个内容可能是用户上传的表单数据，上传成功之后，服务器可能把这个数据存储到数据库中，因此状态也就发生了改变。\n安全的方法除了 GET 之外还有：HEAD、OPTIONS。\n不安全的方法除了 POST 之外还有 PUT、DELETE。\n幂等性 幂等的 HTTP 方法，同样的请求被执行一次与连续执行多次的效果是一样的，服务器的状态也是一样的。换句话说就是，幂等方法不应该具有副作用（统计用途除外）。\n所有的安全方法也都是幂等的。\n在正确实现的条件下，GET，HEAD，PUT 和 DELETE 等方法都是幂等的，而 POST 方法不是。\nGET /pageX HTTP/1.1 是幂等的，连续调用多次，客户端接收到的结果都是一样的：\nGET /pageX HTTP/1.1 GET /pageX HTTP/1.1 GET /pageX HTTP/1.1 GET /pageX HTTP/1.1 POST /add_row HTTP/1.1 不是幂等的，如果调用多次，就会增加多行记录：\nPOST /add_row HTTP/1.1 -\u0026gt; Adds a 1nd row POST /add_row HTTP/1.1 -\u0026gt; Adds a 2nd row POST /add_row HTTP/1.1 -\u0026gt; Adds a 3rd row DELETE /idX/delete HTTP/1.1 是幂等的，即使不同的请求接收到的状态码不一样：\nDELETE /idX/delete HTTP/1.1 -\u0026gt; Returns 200 if idX exists DELETE /idX/delete HTTP/1.1 -\u0026gt; Returns 404 as it just got deleted DELETE /idX/delete HTTP/1.1 -\u0026gt; Returns 404 可缓存 如果要对响应进行缓存，需要满足以下条件：\n请求报文的 HTTP 方法本身是可缓存的，包括 GET 和 HEAD，但是 PUT 和 DELETE 不可缓存，POST 在多数情况下不可缓存的。 响应报文的状态码是可缓存的，包括：200, 203, 204, 206, 300, 301, 404, 405, 410, 414, and 501。 响应报文的 Cache-Control 首部字段没有指定不进行缓存。 XMLHttpRequest 为了阐述 POST 和 GET 的另一个区别，需要先了解 XMLHttpRequest：\nXMLHttpRequest 是一个 API，它为客户端提供了在客户端和服务器之间传输数据的功能。它提供了一个通过 URL 来获取数据的简单方式，并且不会使整个页面刷新。这使得网页只更新一部分页面而不会打扰到用户。XMLHttpRequest 在 AJAX 中被大量使用。\n在使用 XMLHttpRequest 的 POST 方法时，浏览器会先发送 Header 再发送 Data。但并不是所有浏览器会这么做，例如火狐就不会。 而 GET 方法 Header 和 Data 会一起发送。 参考资料 上野宣. 图解 HTTP[M]. 人民邮电出版社, 2014. MDN : HTTP HTTP/2 简介 htmlspecialchars Difference between file URI and URL in java How to Fix SQL Injection Using Java PreparedStatement \u0026amp; CallableStatement 浅谈 HTTP 中 Get 与 Post 的区别 Are http:// and www really necessary? HTTP (HyperText Transfer Protocol) Web-VPN: Secure Proxies with SPDY \u0026amp; Chrome File:HTTP persistent connection.svg Proxy server What Is This HTTPS/SSL Thing And Why Should You Care? What is SSL Offloading? Sun Directory Server Enterprise Edition 7.0 Reference - Key Encryption An Introduction to Mutual SSL Authentication The Difference Between URLs and URIs Cookie 与 Session 的区别 COOKIE 和 SESSION 有什么区别 Cookie/Session 的机制与安全 HTTPS 证书原理 What is the difference between a URI, a URL and a URN? XMLHttpRequest XMLHttpRequest (XHR) Uses Multiple Packets for HTTP POST? Symmetric vs. Asymmetric Encryption – What are differences? Web 性能优化与 HTTP/2 HTTP/2 简介 ","permalink":"https://waite.wang/posts/web/http-basic/","summary":"\u003ch1 id=\"http\"\u003eHTTP\u003c/h1\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cul\u003e\n\u003cli\u003e[HTTP\u003c/li\u003e\n\u003cli\u003e](#http)\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"#%E4%B8%80-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5\"\u003e一 、基础概念\u003c/a\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87\"\u003e请求和响应报文\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#url\"\u003eURL\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"#%E4%BA%8Chttp-%E6%96%B9%E6%B3%95\"\u003e二、HTTP 方法\u003c/a\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#get\"\u003eGET\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#head\"\u003eHEAD\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#post\"\u003ePOST\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#put\"\u003ePUT\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#patch\"\u003ePATCH\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#delete\"\u003eDELETE\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#options\"\u003eOPTIONS\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#connect\"\u003eCONNECT\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#trace\"\u003eTRACE\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"#%E4%B8%89http-%E7%8A%B6%E6%80%81%E7%A0%81\"\u003e三、HTTP 状态码\u003c/a\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#1xx-%E4%BF%A1%E6%81%AF\"\u003e1XX 信息\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#2xx-%E6%88%90%E5%8A%9F\"\u003e2XX 成功\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#3xx-%E9%87%8D%E5%AE%9A%E5%90%91\"\u003e3XX 重定向\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#4xx-%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%94%99%E8%AF%AF\"\u003e4XX 客户端错误\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#5xx-%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%94%99%E8%AF%AF\"\u003e5XX 服务器错误\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"#%E5%9B%9Bhttp-%E9%A6%96%E9%83%A8\"\u003e四、HTTP 首部\u003c/a\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#%E9%80%9A%E7%94%A8%E9%A6%96%E9%83%A8%E5%AD%97%E6%AE%B5\"\u003e通用首部字段\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#%E8%AF%B7%E6%B1%82%E9%A6%96%E9%83%A8%E5%AD%97%E6%AE%B5\"\u003e请求首部字段\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#%E5%93%8D%E5%BA%94%E9%A6%96%E9%83%A8%E5%AD%97%E6%AE%B5\"\u003e响应首部字段\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#%E5%AE%9E%E4%BD%93%E9%A6%96%E9%83%A8%E5%AD%97%E6%AE%B5\"\u003e实体首部字段\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"#%E4%BA%94%E5%85%B7%E4%BD%93%E5%BA%94%E7%94%A8\"\u003e五、具体应用\u003c/a\u003e\u003c/p\u003e","title":"Http 基础"},{"content":"Vuepress 或部分静态文档自动同步服务器 使用 Github action 加服务器 git commit hash 匹配\n本文以 Vuepress 为例子, 其他同理\n请确保 服务器 安装 git 环境, 本文不再赘述\nGithub Action 原理: 通过 Github Action 工作流把代码编译并且部署到 gh_pages 分支\n本文示例使用 npm 部署, yarn 在 yaml 中更改配置\n创建 .github/workflows/文件名.yml\n# 工作流的名称，如果省略，则使用当前文件名 name: Auto Deploy # 从工作流生成的工作流运行的名称，如果省略，则使用提交时的commit信息 run-name: Deploy by @${{ github.actor }} # 触发部署的条件 on: # 每当 push 到 master 分支时触发部署 push: branches: - main # 当前流程要执行的任务，可以是多个。[my_first_job]就是一个任务 jobs: my_first_job: # 任务的名称，不设置则默认my_first_job name: build-and-deploy # 运行所需要的虚拟机环境 runs-on: ubuntu-latest # 每个任务下的运行步骤，短横杠 - 表示一个步骤，从上至下依次执行。 steps: # clone 该仓库的源码到工作流中 - name: Clone Code uses: actions/checkout@v3 with: # \u0026#34;最近更新时间\u0026#34;等 git 日志相关信息，需要拉取全部提交记录 fetch-depth: 0 # 安装 Node 环境 - name: Setup Node.js uses: actions/setup-node@v3 with: # 选择要使用的 node 版本 node-version: \u0026#39;16\u0026#39; # 如果你的依赖是使用npm的，用这种 # 缓存 npm node_modules - name: Cache dependencies uses: actions/cache@v3 with: path: ~/.npm key: ${{ runner.os }}-npm-cache-${{ hashFiles(\u0026#39;**/package-lock.json\u0026#39;) }} restore-keys: | ${{ runner.os }}-npm-cache- # 安装依赖 npm - name: Install dependencies # 如果没有命中缓存才执行 npm install if: steps.cache-deps.outputs.cache-hit != \u0026#39;true\u0026#39; run: npm install # 如果你的依赖是使用yarn的，用这种 # 缓存 yarn node_modules # - name: Cache dependencies # uses: actions/cache@v3 # id: yarn-cache # with: # path: | # **/node_modules # key: ${{ runner.os }}-yarn-${{ hashFiles(\u0026#39;**/yarn.lock\u0026#39;) }} # restore-keys: | # ${{ runner.os }}-yarn- # 安装依赖 yarn # - name: Install dependencies # # 如果没有命中缓存才执行 npm install # if: steps.npm-cache.outputs.cache-hit != \u0026#39;true\u0026#39; # run: yarn --frozen-lockfile # 运行构建脚本 - name: Run Build Script run: npm run build # 部署到 GitHub Pages - name: Deploy to GitHub Pages # 此actions的官方文档 https://github.com/JamesIves/github-pages-deploy-action uses: JamesIves/github-pages-deploy-action@v4 with: # 要部署的文件夹，必填 FOLDER: src/.vuepress/dist # 希望部署的分支，默认gh-pages BRANCH: gh-pages # # 仓库范围的访问令牌，可以将个人令牌的值存储在GitHub Secrets中 # # 默认情况是不需要填的，如果您需要更多权限，例如部署到另一个存储库才需要填写 # # ACCESS_TOKEN 对应GitHub Secrets中设置的字段，不要照搬 # TOKEN: ${{ secrets.ACCESS_TOKEN }} # # 部署到GitHub的不同仓库 \u0026lt;用户名\u0026gt;/\u0026lt;仓库名\u0026gt; # # 此选项必须配置了TOKEN才能正常执行 # REPOSITORY-NAME: leoleor/leo2 注意 !!!!!! 需要开启以下设置, 不然会报错 -\u0026gt; The deploy step encountered an error: The process '/usr/bin/git' failed with exit code 128 ❌\n服务器设置 在你的网页目录 git clone, 克隆指定分支 \u0026lt;!-- The command to use is --\u0026gt; git clone --branch \u0026lt;branchname\u0026gt; --single-branch \u0026lt;remote-repo-url\u0026gt; \u0026lt;!-- From your terminal run --\u0026gt; git clone --branch gh-pages --single-branch https://github.com/XXX/xxx.git 编写 sh 脚本文件 cd / cd {{your site folder}} git pull 设置定时脚本执行, 或者通过配置服务器 crontab 来实现自动更新 这是一个定时任务命令，每隔10分钟会执行一次 /root/update-blog.sh 脚本。脚本的输出会被重定向到 /www/logs/update-blog.log 文件中，2\u0026gt;\u0026amp;1 则表示将错误输出也重定向到同一个日志文件中。\ncrontab -e */10 * * * * /bin/bash /root/update-blog.sh \u0026gt;\u0026gt; /www/logs/update-blog.log 2\u0026gt;\u0026amp;1 也可以在本地编译, 例如 hugo, 可以 每个 commit 都有其对应的 hash 值, 可以定时 git pull 从仓库拉取内容, 并对比 pull 前后 commit 值的变化, 以判断是否存在更新. 如果存在更新, 则执行重新构建的流程. cd {{your site folder}} commit=$(cat .git/refs/heads/main) git pull new_commit=$(cat .git/refs/heads/main) if [[ \u0026#34;$new_commit\u0026#34; != \u0026#34;$commit\u0026#34; ]]; then # 改为你的网站构建流程, ps: rm -rf public/* -\u0026gt; ./hugo {{execute your site rebuild program}} fi echo \u0026#34;----------------------------------------------------------------------------\u0026#34; endDate=`date +\u0026#34;%Y-%m-%d %H:%M:%S\u0026#34;` echo \u0026#34;\u0026gt;\u0026gt; [$endDate] Successful\u0026#34; echo \u0026#34;----------------------------------------------------------------------------\u0026#34; 其他 如果你博客的 GitHub 仓库不是公开仓库, 那在执行 git pull 的时候可能需要输入用户名和密码, 无法实现自动化. 你需要在服务器项目路径内执行 git config credential.helper store, 然后手动 git pull 一次, 凭证将自动保存在服务器, 下次无需输入密码.\nCentOS 服务器 git clone下载加速（下载过慢或超时） 以下为本人实践之后, 在进行以下之前, 请先行检查代理/ 缓存大小/ 权限 等等问题, 以下方法可能仅仅适用于笔者, 不确保一定可以成功\n# 缓存 git config --global http.postBuffer 104857600 # 代理 git config --global --unset http.proxy git config --global --unset https.proxy 在 CentOS 服务器 上通过 git clone 下载项目，速度很慢或直接超时 [root@VM-0-11-centos home]# git clone https://github.com/dengzemiao/DZMLuckyDraw.git 正克隆到 \u0026#39;DZMLuckyDraw\u0026#39;... error: RPC failed; result=35, HTTP code = 0 fatal: The remote end hung up unexpectedly git clone 特别慢，是因为 github.global.ssl.fastly.net 域名被限制了，只要找到这个域名对应的 IP 地址，然后在 hosts 文件中加上 ip–\u0026gt;域名 的映射，刷新 DNS 缓存便可。\nnslookup 命令获取 github IP 地址\n如果没有安装，则需要安装一下 yum -y install bind-utils 获取 IP 地址 nslookup github.global.ssl.fastly.net nslookup github.com 修改 hosts 文件\n编辑 hosts sudo vim /etc/hosts 填入内容，保存 格式： x.x.x.x http://global-ssl.fastly.net x.x.x.x http://github.com 例如拿上面得到的IP地址： 69.171.229.73 http://global-ssl.fastly.net 13.250.177.223 http://github.com nscd 命令更新 DNS 缓存\n如果没有安装，则需要安装一下 yum install -y nscd 更新 DNS 缓存 $ nscd -i hosts 然后再次执行 git clone，则会进入下载。 ","permalink":"https://waite.wang/posts/tools/static-document-compilation-automatic-synchronization-server/","summary":"\u003ch1 id=\"vuepress-或部分静态文档自动同步服务器\"\u003eVuepress 或部分静态文档自动同步服务器\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e使用 Github action 加服务器 git commit hash 匹配\u003c/p\u003e\n\u003cp\u003e本文以 Vuepress 为例子, 其他同理\u003c/p\u003e\n\u003cp\u003e请确保 服务器 安装 git 环境, 本文不再赘述\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"github-action\"\u003eGithub Action\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e原理: 通过 Github Action 工作流把代码编译并且部署到 gh_pages 分支\u003c/p\u003e","title":"静态文档 Github 自动同步服务器"},{"content":"auth模块的介绍 1、导包\nfrom django.contrib import auth 2、默认使用auth_user表来存储用户数据\n# 默认用户表是位置 from django.contrib.auth.models import User mysql\u0026gt; show tables; +----------------------------+ | Tables_in_django_rest01 | +----------------------------+ | auth_group | | auth_group_permissions | | auth_permission | | auth_user | | auth_user_groups | | auth_user_user_permissions | | django_admin_log | | django_content_type | | django_migrations | | django_session | +----------------------------+ 10 rows in set (0.00 sec) auth_group: 存储用户组信息。每个用户组可以有多个权限。 auth_group_permissions: 存储用户组和权限的关联关系。一个用户组可以有多个权限。 auth_permission: 存储系统中定义的所有权限。权限通常与特定的模型和操作相关联。 auth_user: 存储用户账户信息，如用户名、密码、电子邮件等。 auth_user_groups: 存储用户和用户组的关联关系。一个用户可以属于多个用户组。 auth_user_user_permissions: 存储用户特定的权限，这些权限不会通过用户组继承。 django_admin_log: 存储管理站点的操作日志，如添加、更改或删除记录。 django_content_type: 存储Django中所有模型的元数据，包括app_label和model字段，用于确定对象类型。 django_migrations: 存储关于应用的迁移历史信息，包括迁移的名称和应用时间。 django_session: 存储会话数据，用于支持Django的会话框架。 mysql\u0026gt; desc auth_user; +--------------+--------------+------+-----+---------+----------------+ | Field | Type | Null | Key | Default | Extra | +--------------+--------------+------+-----+---------+----------------+ | id | int(11) | NO | PRI | NULL | auto_increment | | password | varchar(128) | NO | | NULL | | | last_login | datetime(6) | YES | | NULL | | | is_superuser | tinyint(1) | NO | | NULL | | | username | varchar(150) | NO | UNI | NULL | | | first_name | varchar(30) | NO | | NULL | | | last_name | varchar(150) | NO | | NULL | | | email | varchar(254) | NO | | NULL | | | is_staff | tinyint(1) | NO | | NULL | | | is_active | tinyint(1) | NO | | NULL | | | date_joined | datetime(6) | NO | | NULL | | +--------------+--------------+------+-----+---------+----------------+ 11 rows in set (0.01 sec) mysql\u0026gt; 常用方法 1、authenticate()用来校验用户名及密码\nfrom django.contrib.auth import authenticate, login, logout # 如果校验成功就返回当前用户,否则就返回None user = authenticate(username=\u0026#39;username\u0026#39;, password=\u0026#39;password\u0026#39;) 2、login(HttpRequest, user)用户用户登录,使用这个登录方式会生成相关的session\n3、logout(request)退出操作,清除相关的session\n4、is_authenticated()用来判断当前请求是否通过认证\ndef my_view(request): if not request.user.is_authenticated(): return redirect(\u0026#39;%s?next=%s\u0026#39; % (settings.LOGIN_URL, request.path)) 5、login_requierd()必须登录的装饰器\nfrom django.contrib.auth.decorators import login_required @login_required def my_view(request): pass 若用户没有登录，则会跳转到django默认的 登录URL '/accounts/login/ ' 并传递当前访问url的绝对路径 (登陆成功后，会重定向到该路径)。如果需要自定义登录的URL，则需要在settings.py文件中通过LOGIN_URL进行修改。\nLOGIN_URL = \u0026#39;/login/\u0026#39; # 这里配置成你项目登录页面的路由 6、create_user()创建普通用户的\nfrom django.contrib.auth.models import User user = User.objects.create_user（username=\u0026#39;用户名\u0026#39;,password=\u0026#39;密码\u0026#39;,email=\u0026#39;邮箱\u0026#39;,...） 7、create_superuser()创建超级用户\n8、check_password(password)检查密码是否正确(用户登录)\nuser.check_password(\u0026#39;密码\u0026#39;) 9、set_password(password)设置密码(用于注册及修改密码)\n扩展auth_user表 默认你创建好了一个 app, 没有的话 python manage.py startapp web\n修改 web/models from django.db import models from django.contrib.auth.models import AbstractUser class UserProfileModel(AbstractUser): \u0026#34;\u0026#34;\u0026#34; 创建一个用户的模型 \u0026#34;\u0026#34;\u0026#34; SEX_CHOICES = [ (\u0026#39;male\u0026#39;, \u0026#39;男\u0026#39;), (\u0026#39;female\u0026#39;, \u0026#39;女\u0026#39;) ] phone = models.CharField(max_length=11, verbose_name=\u0026#39;手机号\u0026#39;, unique=True) birthday = models.DateField(verbose_name=\u0026#39;生日\u0026#39;, null=True, blank=True) sex = models.CharField(max_length=6, choices=SEX_CHOICES, default=\u0026#39;\u0026#39;, verbose_name=\u0026#39;性别\u0026#39;) # 头像 avatar = models.CharField(max_length=100, default=\u0026#39;default.jpg\u0026#39;, verbose_name=\u0026#39;头像\u0026#39;) address = models.CharField(max_length=100, default=\u0026#39;\u0026#39;, verbose_name=\u0026#39;地址\u0026#39;) class Meta(object): db_table = \u0026#39;user_profile\u0026#39; verbose_name = \u0026#39;用户信息\u0026#39; verbose_name_plural = verbose_name def __str__(self): # 定义模型对象的显示信息 return self.username 修改settings.py, 添加设置让django用 我们web下的modles.py中的user模型 # Custom user model AUTH_USER_MODEL = \u0026#39;web.UserProfileModel\u0026#39; 迁移模型到数据库 $ python manage.py makemigrations $ python manage.py migrate 创建超级用户，登录后台 python manage.py createsuperuser Username: Email address: Password: Password (again): Superuser created successfully. 开启服务后进去一看，用户管理那一栏不见了\n在 web/admin/py 中注册一下就好了 from django.contrib import admin from web.models import UserProfileModel # Register your models here. admin.site.register(UserProfileModel) ","permalink":"https://waite.wang/posts/python/django-comes-with-auth-database/","summary":"\u003ch2 id=\"auth模块的介绍\"\u003eauth模块的介绍\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e1、导包\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003efrom\u003c/span\u003e \u003cspan class=\"nn\"\u003edjango.contrib\u003c/span\u003e \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003eauth\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e2、默认使用\u003ccode\u003eauth_user\u003c/code\u003e表来存储用户数据\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 默认用户表是位置\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003efrom\u003c/span\u003e \u003cspan class=\"nn\"\u003edjango.contrib.auth.models\u003c/span\u003e \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003eUser\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003emysql\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eshow\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etables\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"c1\"\u003e----------------------------+\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eTables_in_django_rest01\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"c1\"\u003e----------------------------+\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eauth_group\u003c/span\u003e\u003cspan class=\"w\"\u003e                 \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eauth_group_permissions\u003c/span\u003e\u003cspan class=\"w\"\u003e     \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eauth_permission\u003c/span\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eauth_user\u003c/span\u003e\u003cspan class=\"w\"\u003e                  \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eauth_user_groups\u003c/span\u003e\u003cspan class=\"w\"\u003e           \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eauth_user_user_permissions\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edjango_admin_log\u003c/span\u003e\u003cspan class=\"w\"\u003e           \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edjango_content_type\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edjango_migrations\u003c/span\u003e\u003cspan class=\"w\"\u003e          \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edjango_session\u003c/span\u003e\u003cspan class=\"w\"\u003e             \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"c1\"\u003e----------------------------+\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003erows\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003ein\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eset\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e00\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003esec\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eauth_group\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e存储用户组信息。每个用户组可以有多个权限。\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eauth_group_permissions\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e存储用户组和权限的关联关系。一个用户组可以有多个权限。\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eauth_permission\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e存储系统中定义的所有权限。权限通常与特定的模型和操作相关联。\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eauth_user\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e存储用户账户信息，如用户名、密码、电子邮件等。\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eauth_user_groups\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e存储用户和用户组的关联关系。一个用户可以属于多个用户组。\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eauth_user_user_permissions\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e存储用户特定的权限，这些权限不会通过用户组继承。\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003edjango_admin_log\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e存储管理站点的操作日志，如添加、更改或删除记录。\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003edjango_content_type\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e存储\u003c/span\u003e\u003cspan class=\"n\"\u003eDjango中所有模型的元数据\u003c/span\u003e\u003cspan class=\"err\"\u003e，包括\u003c/span\u003e\u003cspan class=\"n\"\u003eapp_label和model字段\u003c/span\u003e\u003cspan class=\"err\"\u003e，用于确定对象类型。\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003edjango_migrations\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e存储关于应用的迁移历史信息，包括迁移的名称和应用时间。\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003edjango_session\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e存储会话数据，用于支持\u003c/span\u003e\u003cspan class=\"n\"\u003eDjango的会话框架\u003c/span\u003e\u003cspan class=\"err\"\u003e。\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003emysql\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003edesc\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eauth_user\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"c1\"\u003e--------------+--------------+------+-----+---------+----------------+\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eField\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eType\u003c/span\u003e\u003cspan class=\"w\"\u003e         \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eNull\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eKey\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eDefault\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eExtra\u003c/span\u003e\u003cspan class=\"w\"\u003e          \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"c1\"\u003e--------------+--------------+------+-----+---------+----------------+\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"w\"\u003e           \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eNO\u003c/span\u003e\u003cspan class=\"w\"\u003e   \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ePRI\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eNULL\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eauto_increment\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epassword\u003c/span\u003e\u003cspan class=\"w\"\u003e     \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003evarchar\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e128\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eNO\u003c/span\u003e\u003cspan class=\"w\"\u003e   \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e     \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eNULL\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003elast_login\u003c/span\u003e\u003cspan class=\"w\"\u003e   \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edatetime\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eYES\u003c/span\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e     \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eNULL\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eis_superuser\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etinyint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e   \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eNO\u003c/span\u003e\u003cspan class=\"w\"\u003e   \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e     \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eNULL\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eusername\u003c/span\u003e\u003cspan class=\"w\"\u003e     \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003evarchar\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e150\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eNO\u003c/span\u003e\u003cspan class=\"w\"\u003e   \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eUNI\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eNULL\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003efirst_name\u003c/span\u003e\u003cspan class=\"w\"\u003e   \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003evarchar\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e30\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eNO\u003c/span\u003e\u003cspan class=\"w\"\u003e   \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e     \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eNULL\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003elast_name\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003evarchar\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e150\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eNO\u003c/span\u003e\u003cspan class=\"w\"\u003e   \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e     \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eNULL\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eemail\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003evarchar\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e254\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eNO\u003c/span\u003e\u003cspan class=\"w\"\u003e   \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e     \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eNULL\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eis_staff\u003c/span\u003e\u003cspan class=\"w\"\u003e     \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etinyint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e   \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eNO\u003c/span\u003e\u003cspan class=\"w\"\u003e   \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e     \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eNULL\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eis_active\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etinyint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e   \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eNO\u003c/span\u003e\u003cspan class=\"w\"\u003e   \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e     \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eNULL\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edate_joined\u003c/span\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edatetime\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eNO\u003c/span\u003e\u003cspan class=\"w\"\u003e   \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e     \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eNULL\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"c1\"\u003e--------------+--------------+------+-----+---------+----------------+\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003erows\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003ein\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eset\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e01\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003esec\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003emysql\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"常用方法\"\u003e常用方法\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e1、\u003ccode\u003eauthenticate()\u003c/code\u003e用来校验用户名及密码\u003c/p\u003e","title":"Django自带 Auth 数据库扩展字段"},{"content":"集成editorconfig配置 EditorConfig 有助于为不同 IDE 编辑器上处理同一项目的多个开发人员维护一致的编码风格。\n# http://editorconfig.org root = true [*] # 表示所有文件适用 charset = utf-8 # 设置文件字符集为 utf-8 indent_style = space # 缩进风格（tab | space） indent_size = 2 # 缩进大小 end_of_line = lf # 控制换行类型(lf | cr | crlf) trim_trailing_whitespace = true # 去除行首的任意空白字符 insert_final_newline = true # 始终在文件末尾插入一个新行 [*.md] # 表示仅 md 文件适用以下规则 max_line_length = off trim_trailing_whitespace = false VSCode需要安装一个插件：EditorConfig for VS Code\n语法检查 / 代码格式化 使用prettier工具 Prettier 是一款强大的代码格式化工具，支持 JavaScript、TypeScript、CSS、SCSS、Less、JSX、Angular、Vue、GraphQL、JSON、Markdown 等语言，基本上前端能用到的文件格式它都可以搞定，是当下最流行的代码格式化工具。\n1.安装prettier\nnpm install prettier -D 2.配置.prettierrc文件：\nuseTabs：使用tab缩进还是空格缩进，选择false； tabWidth：tab是空格的情况下，是几个空格，选择2个； printWidth：当行字符的长度，推荐80，也有人喜欢100或者120； singleQuote：使用单引号还是双引号，选择true，使用单引号； trailingComma：在多行输入的尾逗号是否添加，设置为 none； semi：语句末尾是否要加分号，默认值true，选择false表示不加； { \u0026#34;useTabs\u0026#34;: false, \u0026#34;tabWidth\u0026#34;: 2, \u0026#34;printWidth\u0026#34;: 80, \u0026#34;singleQuote\u0026#34;: true, \u0026#34;trailingComma\u0026#34;: \u0026#34;none\u0026#34;, \u0026#34;semi\u0026#34;: false } 3.创建.prettierignore忽略文件\n/dist/* .local .output.js /node_modules/** **/*.svg **/*.sh /public/* 4.VSCode需要安装prettier的插件\n5.测试prettier是否生效\n测试一：在代码中保存代码； 测试二：配置一次性修改的命令； 在package.json中配置一个scripts：\n\u0026#34;prettier\u0026#34;: \u0026#34;prettier --write .\u0026#34; 运行 npm run prettier 使用ESLint检测 vue-cli 创建项目，选择 eslint+prettier, 前面创建项目的时候，我们就选择了ESLint，所以Vue会默认帮助我们配置需要的ESLint环境。 前面创建项目的时候，我们就选择了ESLint，所以Vue会默认帮助我们配置需要的ESLint环境。 解决eslint和prettier冲突的问题 安装插件：（vue在创建项目时，如果选择prettier，那么这两个插件会自动安装）\nnpm i eslint-plugin-prettier eslint-config-prettier -D 添加prettier插件(最后一行)：\nextends: [ \u0026#34;plugin:vue/vue3-essential\u0026#34;, \u0026#34;eslint:recommended\u0026#34;, \u0026#34;@vue/typescript/recommended\u0026#34;, \u0026#34;@vue/prettier\u0026#34;, \u0026#34;@vue/prettier/@typescript-eslint\u0026#34;, \u0026#39;plugin:prettier/recommended\u0026#39; ], git Husky和eslint 虽然我们已经要求项目使用eslint了，但是不能保证组员提交代码之前都将eslint中的问题解决掉了：\n也就是我们希望保证代码仓库中的代码都是符合eslint规范的；\n那么我们需要在组员执行 git commit 命令的时候对其进行校验，如果不符合eslint规范，那么自动通过规范进行修复；\n那么如何做到这一点呢？可以通过Husky工具：\nhusky是一个git hook工具，可以帮助我们触发git提交的各个阶段：pre-commit、commit-msg、pre-push 如何使用husky呢？\n这里我们可以使用自动配置命令：\nnpx husky-init \u0026amp;\u0026amp; npm install 接下来，我们需要去完成一个操作：在进行commit时，执行lint脚本：\n这个时候我们执行git commit的时候会自动对代码进行lint校验。\ngit commit规范 代码提交风格 通常我们的git commit会按照统一的风格来提交，这样可以快速定位每次提交的内容，方便之后对版本进行控制。\n但是如果每次手动来编写这些是比较麻烦的事情，我们可以使用一个工具：Commitizen\nCommitizen 是一个帮助我们编写规范 commit message 的工具； 1.安装Commitizen\nnpm install commitizen -D 2.安装cz-conventional-changelog，并且初始化cz-conventional-changelog：\nnpx commitizen init cz-conventional-changelog --save-dev --save-exact 这个命令会帮助我们安装cz-conventional-changelog 并且在package.json中进行配置\n这个时候我们提交代码需要使用 npx cz/ git cz：\nType 作用 feat 新增特性 (feature) fix 修复 Bug(bug fix) docs 修改文档 (documentation) style 代码格式修改(white-space, formatting, missing semi colons, etc) refactor 代码重构(refactor) perf 改善性能(A code change that improves performance) test 测试(when adding missing tests) build 变更项目构建或外部依赖（例如 scopes: webpack、gulp、npm 等） ci 更改持续集成软件的配置文件和 package 中的 scripts 命令，例如 scopes: Travis, Circle 等 chore 变更构建流程或辅助工具(比如更改测试环境) revert 代码回退 代码提交验证 如果我们按照cz来规范了提交风格，但是依然有同事通过 git commit 按照不规范的格式提交应该怎么办呢？\n我们可以通过commitlint来限制提交； 1.安装 @commitlint/config-conventional 和 @commitlint/cli\nnpm i @commitlint/config-conventional @commitlint/cli -D 2.在根目录创建commitlint.config.js文件，配置commitlint\nmodule.exports = { extends: [\u0026#39;@commitlint/config-conventional\u0026#39;] } 3.使用husky生成commit-msg文件，验证提交信息：\nnpx husky add .husky/commit-msg \u0026#34;npx --no-install commitlint --edit $1\u0026#34; ","permalink":"https://waite.wang/posts/web/vue-project-construction-specification/","summary":"\u003ch2 id=\"集成editorconfig配置\"\u003e集成editorconfig配置\u003c/h2\u003e\n\u003cp\u003eEditorConfig 有助于为不同 IDE 编辑器上处理同一项目的多个开发人员维护一致的编码风格。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c\"\u003e# http://editorconfig.org\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"l\"\u003eroot = true\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"cp\"\u003e*]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"c\"\u003e# 表示所有文件适用\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"l\"\u003echarset = utf-8\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"c\"\u003e# 设置文件字符集为 utf-8\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"l\"\u003eindent_style = space\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"c\"\u003e# 缩进风格（tab | space）\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"l\"\u003eindent_size = 2\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"c\"\u003e# 缩进大小\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"l\"\u003eend_of_line = lf\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"c\"\u003e# 控制换行类型(lf | cr | crlf)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"l\"\u003etrim_trailing_whitespace = true\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"c\"\u003e# 去除行首的任意空白字符\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"l\"\u003einsert_final_newline = true\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"c\"\u003e# 始终在文件末尾插入一个新行\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"cp\"\u003e*.md]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"c\"\u003e# 表示仅 md 文件适用以下规则\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"l\"\u003emax_line_length = off\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"l\"\u003etrim_trailing_whitespace = false\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eVSCode需要安装一个插件：EditorConfig for VS Code\u003c/p\u003e","title":"vue 项目规范设置"},{"content":"Options API的弊端 在Vue2中，我们编写组件的方式是Options API：\nOptions API的一大特点就是在对应的属性中编写对应的功能模块； 比如data定义数据、methods中定义方法、computed中定义计算属性、watch中监听属性改变，也包括生命 周期钩子； 但是这种代码有一个很大的弊端：\n当我们实现某一个功能时，这个功能对应的代码逻辑会被拆分到各个属性中； 当我们组件变得更大、更复杂时，逻辑关注点的列表就会增长，那么同一个功能的逻辑就会被拆分的很分散； 尤其对于那些一开始没有编写这些组件的人来说，这个组件的代码是难以阅读和理解的（阅读组件的其他人）； 下面我们来看一个非常大的组件，其中的逻辑功能按照颜色进行了划分：\n这种碎片化的代码使用理解和维护这个复杂的组件变得异常困难，并且隐藏了潜在的逻辑问题； 并且当我们处理单个逻辑关注点时，需要不断的跳到相应的代码块中； 如果我们能将同一个逻辑关注 点相关的代码收集在一起会更 好。 这就是Composition API想 要做的事情，以及可以帮助我 们完成的事情。 也有人把Vue Composition API简称为VCA。 我们无需再为了一个逻辑关注点在不同的选项块间来回滚动切换。此外，我们现在可以很轻松地将这一组代码移动到一个外部文件中，不再需要为了抽象而重新组织代码，大大降低了重构成本，这在长期维护的大型项目中非常关键。 认识 组合式 API (Composition API) https://cn.vuejs.org/guide/extras/composition-api-faq.html#what-is-composition-api\n组合式 API (Composition API) 是一系列 API 的集合，使我们可以使用函数而不是声明选项的方式书写 Vue 组件。它是一个概括性的术语，涵盖了以下方面的 API：\n响应式 API：例如 ref() 和 reactive()，使我们可以直接创建响应式状态、计算属性和侦听器。 生命周期钩子：例如 onMounted() 和 onUnmounted()，使我们可以在组件各个生命周期阶段添加逻辑。 依赖注入：例如 provide() 和 inject()，使我们可以在使用响应式 API 时，利用 Vue 的依赖注入系统。 组合式 API 是 Vue 3 及 Vue 2.7 的内置功能。对于更老的 Vue 2 版本，可以使用官方维护的插件 @vue/composition-api。在 Vue 3 中，组合式 API 基本上都会配合 `` 语法在单文件组件中使用。下面是一个使用组合式 API 的组件示例：\n\u0026lt;script setup\u0026gt; import { ref, onMounted } from \u0026#39;vue\u0026#39; // 响应式状态 const count = ref(0) // 更改状态、触发更新的函数 function increment() { count.value++ } // 生命周期钩子 onMounted(() =\u0026gt; { console.log(`计数器初始值为 ${count.value}。`) }) \u0026lt;/script\u0026gt; \u0026lt;template\u0026gt; \u0026lt;button @click=\u0026#34;increment\u0026#34;\u0026gt;点击了：{{ count }} 次\u0026lt;/button\u0026gt; \u0026lt;/template\u0026gt; 虽然这套 API 的风格是基于函数的组合，但组合式 API 并不是函数式编程。组合式 API 是以 Vue 中数据可变的、细粒度的响应性系统为基础的，而函数式编程通常强调数据不可变。\nsetup() 以下的代码 均会采用选项式的写法, 组合式 Api 的写法可以参考官方文档, 但基本原理差不多, 而且 Vue3 选项式写法是基于组合式写法产生的!\nsetup() 钩子是在组件中使用组合式 API 的入口，通常只在以下情况下使用：\n需要在非单文件组件中使用组合式 API 时。 需要在基于选项式 API 的组件中集成基于组合式 API 的代码时。 setup函数的参数 主要有两个参数: 第一个参数：props 第二个参数：context setup 函数的第一个参数是组件的 props。和标准的组件一致，一个 setup 函数的 props 是响应式的，并且会在传入新的 props 时同步更新。： 对于定义props的类型，我们还是和之前的规则是一样的，在props选项中定义； 并且在template中依然是可以正常去使用props中的属性，比如message； 如果我们在setup函数中想要使用props，那么不可以通过 this 去获取 \u0026lt;!-- 推荐使用以下写法 --\u0026gt; \u0026lt;script\u0026gt; import { ref } from \u0026#39;vue\u0026#39; export default { setup() { const count = ref(0) // 返回值会暴露给模板和其他的选项式 API 钩子 return { count } }, mounted() { console.log(this.count) // 0 } } \u0026lt;/script\u0026gt; \u0026lt;template\u0026gt; \u0026lt;button @click=\u0026#34;count++\u0026#34;\u0026gt;{{ count }}\u0026lt;/button\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;!-- 当然也可以使用以下写法 --\u0026gt; \u0026lt;script\u0026gt; export default { props: { message: { type: String, required: true } }, data() { return { counter: 100 } }, setup(props, ....){ ..... } ... } \u0026lt;/script\u0026gt; setup 函数的第一个参数是组件的 props。和标准的组件一致，一个 setup 函数的 props 是响应式的，并且会在传入新的 props 时同步更新。 export default { props: { title: String }, setup(props) { console.log(props.title) } } 请注意如果你解构了 props 对象，解构出的变量将会丢失响应性。因此我们推荐通过 props.xxx 的形式来使用其中的 props。\n如果你确实需要解构 props 对象，或者需要将某个 prop 传到一个外部函数中并保持响应性，那么你可以使用 toRefs() 和 toRef() 这两个工具函数：\nimport { toRefs, toRef } from \u0026#39;vue\u0026#39; export default { setup(props) { // 将 `props` 转为一个其中全是 ref 的对象，然后解构 const { title } = toRefs(props) // `title` 是一个追踪着 `props.title` 的 ref console.log(title.value) // 或者，将 `props` 的单个属性转为一个 ref const title = toRef(props, \u0026#39;title\u0026#39;) } } 另外一个参数是context，我们也称之为是一个SetupContext，它里面包含三个属性： attrs：所有的非prop的attribute； slots：父组件传递过来的插槽（这个在以渲染函数返回时会有作用，后面会讲到）； emit：当我们组件内部需要发出事件时会用到emit（因为我们不能访问this，所以不可以通过 this.$emit发出事件）； export default { setup(props, context) { // 透传 Attributes（非响应式的对象，等价于 $attrs） console.log(context.attrs) // 插槽（非响应式的对象，等价于 $slots） console.log(context.slots) // 触发事件（函数，等价于 $emit） console.log(context.emit) // 暴露公共属性（函数） console.log(context.expose) } // 该上下文对象是非响应式的，可以安全地解构： setup(props, {attrs, slots, emit}) { console.log(props.message); console.log(attrs.id, attrs.class); console.log(slots); console.log(emit); } } attrs 和 slots 都是有状态的对象，它们总是会随着组件自身的更新而更新。这意味着你应当避免解构它们，并始终通过 attrs.x 或 slots.x 的形式使用其中的属性。此外还需注意，和 props 不同，attrs 和 slots 的属性都不是响应式的。如果你想要基于 attrs 或 slots 的改变来执行副作用，那么你应该在 onBeforeUpdate 生命周期钩子中编写相关逻辑。\n代码示例\n\u0026lt;template\u0026gt; \u0026lt;HelloWorld msg=\u0026#34;Welcome to Your Vue.js App\u0026#34; class=\u0026#34;app-attr\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import HelloWorld from \u0026#39;./components/HelloWorld.vue\u0026#39;; export default { name: \u0026#39;App\u0026#39;, components: { HelloWorld } }; \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt;\u0026lt;/style\u0026gt; \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;hello\u0026#34;\u0026gt; \u0026lt;!-- 使用接受过来的参数 --\u0026gt; {{ msg }} \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { name: \u0026#39;HelloWorld\u0026#39;, // 组件接受的参数 props: { msg: String }, // 发射的事件这里可以标注一下 emits:[\u0026#39;change\u0026#39;], setup(props, context) { // 这样可以拿到传递过来的msg的值 console.log(props.msg); // attrs console.log(context.attrs); // 发射事件 context.emit(\u0026#39;change\u0026#39;); } }; \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt;\u0026lt;/style\u0026gt; setup函数的返回值 setup 也可以返回一个渲染函数，此时在渲染函数中可以直接使用在同一作用域下声明的响应式状态：\nimport { h, ref } from \u0026#39;vue\u0026#39; export default { setup() { const count = ref(0) return () =\u0026gt; h(\u0026#39;div\u0026#39;, count.value) } } 返回一个渲染函数将会阻止我们返回其他东西。对于组件内部来说，这样没有问题，但如果我们想通过模板引用将这个组件的方法暴露给父组件，那就有问题了。\n我们可以通过调用 expose() 解决这个问题：\nimport { h, ref } from \u0026#39;vue\u0026#39; export default { setup(props, { expose }) { const count = ref(0) const increment = () =\u0026gt; ++count.value expose({ increment }) return () =\u0026gt; h(\u0026#39;div\u0026#39;, count.value) } } 此时父组件可以通过模板引用来访问这个 increment 方法。\nexport default { props: { message: { type: String, required: true } }, setup() { let counter = 100; // 局部函数 const increment = () =\u0026gt; { counter++; console.log(counter); } return { title: \u0026#34;Hello Home\u0026#34;, counter, increment } } } setup的返回值可以在模板template中被使用 也就是说可以通过setup的返回值来替代data选项 最后导出的一定要是个对象\n\u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;hello\u0026#34;\u0026gt; \u0026lt;!-- 使用导出的变量 --\u0026gt; \u0026lt;h1\u0026gt;{{ count }}\u0026lt;/h1\u0026gt; \u0026lt;!-- 使用导出的方法 --\u0026gt; \u0026lt;button @click=\u0026#34;increment\u0026#34;\u0026gt;+ 1\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { name: \u0026#39;HelloWorld\u0026#39;, setup() { // 定义普通的变量，可以被正常使用 // 缺点 : 数据不是响应式的 let count = 100; // 定义方法 const increment = () =\u0026gt; { count++; console.log(count); }; // 导出 return { count, increment }; } }; \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt;\u0026lt;/style\u0026gt; 因为只是定义了个变量，然后导出了，并没有使它响应式\n补充: 为什么 setup 不能使用 this 在Vue 3中，setup 函数是用来替代以前的 data, computed, methods 等选项的。setup() 自身并不含对组件实例的访问权，即在 setup() 中访问 this 会是 undefined。你可以在选项式 API 中访问组合式 API 暴露的值，但反过来则不行。\n定义响应式数据的两种方式 Reactive API 如果想为在setup中定义的数据提供响应式的特性，那么可以使用reactive的函数\nps : 如果传入一个基本数据类型（String、Number、Boolean）会报一个警告\n应用场景 : reactive API对传入的类型是有限制的，它要求我们必须传入的是一个对象或者数组类型，最好相互有关联的数据时使用\n比如说想要上面的例子实现响应式, 我们可以做如下操作\n\u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;hello\u0026#34;\u0026gt; \u0026lt;!-- 这样使用即可 --\u0026gt; \u0026lt;h1\u0026gt;{{ state.count }}\u0026lt;/h1\u0026gt; \u0026lt;button @click=\u0026#34;increment\u0026#34;\u0026gt;+ 1\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; // 从vue中导入reactive import { reactive } from \u0026#39;vue\u0026#39;; export default { name: \u0026#39;HelloWorld\u0026#39;, setup() { // 使用reactive，会返回一个响应式对象 const state = reactive({ // 在对象中编写自己所需要的属性 count: 100 }); const increment = () =\u0026gt; { // 这样使用 state.count++; console.log(state.count); }; return { // 导出响应式state对象 state, increment }; } }; \u0026lt;/script\u0026gt; Reactive判断的API isProxy : 检查对象是否是由 reactive 或 readonly创建的 proxy isReactive : 检查对象是否是由 reactive创建的响应式代理，如果该代理是 readonly 建的，但包裹了由 reactive 创建的另一个代理，它也会返回 true isReadonly : 检查对象是否是由 readonly 创建的只读代理 toRaw : 返回 reactive 或 readonly 代理的原始对象（不建议保留对原始对象的持久引用。请谨慎使用） shallowReactive : 创建一个响应式代理，它跟踪其自身 property 的响应性，但不执行嵌套对象的深层响应式转换 (深层还是原生对象)，只响应第一层 shallowReadonly : 创建一个 proxy，使其自身的 property 为只读，但不执行嵌套对象的深度只读转换（深层还是可读、可写的）只检查第一层 import { reactive, readonly, isProxy, isReactive, isReadonly, toRaw, shallowReactive, shallowReadonly } from \u0026#39;vue\u0026#39;; // 创建一个响应式对象 const original = { count: 0 }; const obj = reactive(original); // 检查对象是否是代理对象 console.log(isProxy(obj)); // true // 检查对象是否是由 reactive 创建的响应式代理 console.log(isReactive(obj)); // true // 检查对象是否是由 readonly 创建的只读代理 const ro = readonly(obj); console.log(isReadonly(ro)); // true // 返回 reactive 或 readonly 代理的原始对象 const rawObj = toRaw(obj); // 创建一个浅层响应式代理 const shallowObj = shallowReactive({ nested: { count: 0 } }); // 创建一个浅层只读代理 const shallowRo = shallowReadonly({ nested: { count: 0 } }); 以下是一些名词解释:\n代理对象：在Vue 3中，代理对象是由 reactive 或 readonly 创建的对象的代理，用于跟踪对象的属性的变化。 readonly：readonly 是一个函数，用于创建一个只读的代理对象，该代理对象只能读取属性值，不能修改属性值。 浅层响应式：浅层响应式是指只有对象的第一层属性会被设置为响应式，而嵌套对象的属性不会被设置为响应式。 浅层只读代理：浅层只读代理是指只有对象的第一层属性会被设置为只读，而嵌套对象的属性不会被设置为只读。 import { reactive, readonly, shallowReactive, shallowReadonly } from \u0026#39;vue\u0026#39;; // 创建一个普通对象 const original = { count: 0, nested: { count: 1 } }; // 创建一个响应式代理对象 const reactiveObj = reactive(original); reactiveObj.count = 1; // 可以修改属性值 reactiveObj.nested.count = 2; // 嵌套对象的属性也会被设置为响应式 // 创建一个只读代理对象 const readonlyObj = readonly(original); // readonlyObj.count = 2; // 试图修改只读属性会报错 // readonlyObj.nested.count = 2; // 嵌套对象的属性也是只读的 // 创建一个浅层响应式代理对象 const shallowReactiveObj = shallowReactive(original); shallowReactiveObj.count = 2; // 可以修改属性值 shallowReactiveObj.nested.count = 2; // 嵌套对象的属性不会被设置为响应式 // 创建一个浅层只读代理对象 const shallowReadonlyObj = shallowReadonly(original); shallowReadonlyObj.count = 2; // 试图修改只读属性会报错 shallowReadonlyObj.nested.count = 2; // 嵌套对象的属性不会被设置为只读 Ref API Ref函数 : 定义简单类型的数据，也可以定义复杂类型的数据\n应用场景 : 定义一些简单的数据，或者从接口中获得的数据\nref 会返回一个可变的响应式对象，该对象作为一个 响应式的引用 维护着它内部的值，这就是ref名称的来源 它内部的值是在ref的 value 属性中被维护的 不管传入的是基本类型还是引用类型，都放在.value中 使用的时候是用 .value，但是有两个注意事项:\n在模板中引入ref的值时，Vue会自动帮助我们进行解包操作，所以并不需要在模板中通过 ref.value 的方式，直接使用即可 在 setup 函数内部，它依然是一个 ref引用， 所以对其进行操作时，依然需要使用 ref.value的方式 基本使用 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;hello\u0026#34;\u0026gt; \u0026lt;!-- 这样使用即可，不需要使用count.value，会自动解包，取出其中的value --\u0026gt; \u0026lt;h1\u0026gt;{{ count }}\u0026lt;/h1\u0026gt; \u0026lt;button @click=\u0026#34;increment\u0026#34;\u0026gt;+ 1\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; // 从vue中导入ref import { ref } from \u0026#39;vue\u0026#39;; export default { name: \u0026#39;HelloWorld\u0026#39;, setup() { // 使用Ref，会返回一个响应式对象 let count = ref(100); const increment = () =\u0026gt; { // 这样使用,需要使用 .value count.value++; console.log(count.value); }; return { // 直接导出count即可 count, increment }; } }; \u0026lt;/script\u0026gt; Ref自动解包 模板中的解包是浅层的解包，如果我们的代码是下面的方式： 如果我们将ref放到一个reactive的属性当中，那么在模板中使用时，它会自动解包： const count = ref(1) const obj = reactive({ count }) // ref 会被解包 console.log(obj.count === count.value) // true // 会更新 `obj.count` count.value++ console.log(count.value) // 2 console.log(obj.count) // 2 // 也会更新 `count` ref obj.count++ console.log(obj.count) // 3 console.log(count.value) // 3 注意当访问到某个响应式数组或 Map 这样的原生集合类型中的 ref 元素时，不会执行 ref 的解包：\nconst books = reactive([ref(\u0026#39;Vue 3 Guide\u0026#39;)]) // 这里需要 .value console.log(books[0].value) const map = reactive(new Map([[\u0026#39;count\u0026#39;, ref(0)]])) // 这里需要 .value console.log(map.get(\u0026#39;count\u0026#39;).value) Ref判断的API isRef : 判断值是否是一个ref对象 unref : 如果我们想要获取一个ref引用中的value，那么也可以通过unref方法 如果参数是一个 ref，则返回内部值，否则返回参数本身 这是 val = isRef(val) ? val.value : val 的语法糖函数 shallowRef：shallowRef 是用来创建一个浅层的 ref 对象的函数。浅层的意思是只有对象的第一层属性会被设置为响应式，而嵌套对象的属性不会被设置为响应式。这意味着对嵌套对象属性的修改不会触发响应。 triggerRef：triggerRef 用于手动触发与 shallowRef 相关联的副作用。当 shallowRef 关联的数据发生变化时，相关的副作用将被触发执行。 import { ref, isRef, unref, shallowRef, triggerRef } from \u0026#39;vue\u0026#39;; // 判断值是否是一个 ref 对象 const count = ref(0); console.log(isRef(count)); // true // 获取 ref 引用中的值 const value = unref(count); // 语法糖函数示例 const val = isRef(count) ? count.value : count; // 创建一个浅层的 ref 对象 const shallowCount = shallowRef({ value: 0 }); shallowCount.value = 1; // 可以直接修改 value 属性 // 手动触发与 shallowRef 相关联的副作用 triggerRef(shallowCount); 自定义Ref =\u0026gt; customRef 创建一个自定义的ref，并对其依赖项跟踪和更新触发进行显示控制： 它需要一个工厂函数，该函数接受 track 和 trigger 函数作为参数； 并且应该返回一个带有 get 和 set 的对象； 这里我们使用一个的案例： 对双向绑定的属性进行debounce(节流)的操作 import { customRef } from \u0026#39;vue\u0026#39;; // 自定义ref export default function(value, delay = 300) { let timer = null; return customRef((track, trigger) =\u0026gt; { return { get() { track(); return value; }, set(newValue) { clearTimeout(timer); timer = setTimeout(() =\u0026gt; { value = newValue; trigger(); }, delay); } } }) } \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;input v-model=\u0026#34;message\u0026#34;/\u0026gt; \u0026lt;h2\u0026gt;{{message}}\u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import debounceRef from \u0026#39;./hook/useDebounceRef\u0026#39;; export default { setup() { const message = debounceRef(\u0026#34;Hello World\u0026#34;); return { message } } } \u0026lt;/script\u0026gt; readonly 概念 在我们传递给其他组件数据时，往往希望其他组件使用我们传递的内容，但是不允许它们修改时，就可以使用 readonly了；\n只读代理是深层的：对任何嵌套属性的访问都将是只读的。它的 ref 解包行为与 reactive() 相同，但解包得到的值是只读的。 要避免深层级的转换行为，请使用 shallowReadonly() 作替代。 在开发中常见的readonly方法会传入三个类型的参数： 类型一：普通对象 类型二：reactive返回的对象 类型三：ref的对象 在readonly的使用过程中，有如下规则 : readonly返回的对象都是不允许修改的 但是经过readonly处理的原来的对象是允许被修改的 比如 const info = readonly(obj)，info对象是不允许被修改的 当obj被修改时，readonly返回的info对象也会被修改 但是不能去修改readonly返回的对象info \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;hello\u0026#34;\u0026gt; \u0026lt;button @click=\u0026#34;btnClick\u0026#34;\u0026gt;按钮\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup\u0026gt; import { reactive, readonly, watchEffect } from \u0026#39;vue\u0026#39; const original = reactive({ count: 0 }) const copy = readonly(original) const btnClick = () =\u0026gt; { original.count++ } watchEffect(() =\u0026gt; { // 用来做响应性追踪 console.log(copy.count) }) // 更改源属性会触发其依赖的侦听器 original.count++ // 更改该只读副本将会失败，并会得到一个警告 copy.count++ // warning! \u0026lt;/script\u0026gt; toRefs \u0026amp;\u0026amp; toRef toRefs 如果使用ES6的解构语法，对reactive返回的对象进行解构获取值，那么之后无论是修改结构后的变量，还是修改reactive 返回的state对象，数据都不再是响应式的\n如何改成响应式呢，Vue提供了一个toRefs的函数 可以将reactive返回的对象中的属性都转成ref，这样解构出来的就是响应式的了 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;hello\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;{{ age }}\u0026lt;/h1\u0026gt; \u0026lt;button @click=\u0026#34;increment\u0026#34;\u0026gt;+age\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; // 从vue中导入ref import { reactive, ref, readonly, toRefs } from \u0026#39;vue\u0026#39;; export default { name: \u0026#39;HelloWorld\u0026#39;, setup() { const info = reactive({ name: \u0026#39;star\u0026#39;, age: 18 }); // 使用toRefs包裹需要结构的reactive对象，这样解构出来的值也是响应式的 let { name, age } = toRefs(info); const increment = () =\u0026gt; { info.age++; // 👆这样都可以修改age，都是响应式的👇 // 相当于已经建立了链接，任何一个修改都会引起另外一个变化 age.value++; console.log(age, info.age); }; return { name, age, increment }; } }; \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt;\u0026lt;/style\u0026gt; toRef 如果只希望转换reactive对象中的其中某个属性为ref, 那么可以使用toRef的方法\nps : 这个效率会更高点, 这种做法相当于已经在state.name和ref.value之间建立了 链接，任何一个修改都会引起另外一个变化\nlet age = toRef(info, \u0026#34;age\u0026#34;); const changeAge = () =\u0026gt; { age.value++; } computed 在前面的Options API中，我们是使用computed选项来完成的； 在Composition API中，我们可以在 setup 函数中使用 computed 方法来编写一个计算属性； 如何使用computed呢？ 方式一：接收一个getter函数，并为 getter 函数返回的值，返回一个不变的 ref 对象； 方式二：接收一个具有 get 和 set 的对象，返回一个可变的（可读写）ref 对象； 方式一 \u0026lt;template\u0026gt; \u0026lt;!-- coderstar --\u0026gt; {{ fullName }} \u0026lt;!-- 一般 --\u0026gt; {{ scoreState }} \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import { computed, reactive, ref } from \u0026#39;vue\u0026#39;; export default { name: \u0026#39;App\u0026#39;, setup() { const names = reactive({ firstName: \u0026#39;coder\u0026#39;, lastName: \u0026#39;star\u0026#39; }); // 直接使用getter函数，正常来说都这么使用 const fullName = computed(() =\u0026gt; names.firstName + names.lastName); const score = ref(88); const scoreState = computed(() =\u0026gt; (score.value \u0026gt; 90 ? \u0026#39;优秀\u0026#39; : \u0026#39;一般\u0026#39;)); return { fullName, scoreState }; } }; \u0026lt;/script\u0026gt; 方式二 \u0026lt;template\u0026gt; {{ fullName }} \u0026lt;button @click=\u0026#34;changeName\u0026#34;\u0026gt;change\u0026lt;/button\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import { computed, reactive } from \u0026#39;vue\u0026#39;; export default { name: \u0026#39;App\u0026#39;, setup() { const names = reactive({ firstName: \u0026#39;冲啊\u0026#39;, lastName: \u0026#39;迪迦奥特曼\u0026#39; }); // 会返回一个ref对象 const fullName = computed({ set(newValue) { const tempNames = newValue.split(\u0026#39; \u0026#39;); names.firstName = tempNames[0]; names.lastName = tempNames[1]; }, get() { return names.firstName + names.lastName; } }); // 设置值 const changeName = () =\u0026gt; { fullName.value = fullName.value === \u0026#39;冲啊迪迦奥特曼\u0026#39; ? \u0026#39;神秘的 宇宙人\u0026#39; : \u0026#39;冲啊 迪迦奥特曼\u0026#39;; }; return { fullName, changeName }; } }; \u0026lt;/script\u0026gt; 生命周期钩子 https://cn.vuejs.org/api/composition-api-lifecycle.html\nsetup中可以直接使用导入的onX函数注册生命周期，并且同一个生命周期可以使用多次\n所有罗列在本页的 API 都应该在组件的 setup() 阶段被同步调用。相关细节请看指南 - 生命周期钩子。\n可以使用直接导入的 onX 函数注册生命周期钩子； beforeCreate和create在setup中没有相对应的onX的函数 如果想要在beforeCreate和create中进行操作 可以把代码直接写入到setup中 setup的执行时序比beforeCreate和create还要早 import { onBeforeMount, onMounted, onBeforeUpdate, onUpdated, onBeforeUnmount, onUnmounted } from \u0026#39;vue\u0026#39;; // 注册生命周期钩子 export default { setup() { onBeforeMount(() =\u0026gt; { console.log(\u0026#39;Before Mount\u0026#39;); // 组件挂载前 }); onMounted(() =\u0026gt; { console.log(\u0026#39;Mounted\u0026#39;); // 组件挂载后 }); onBeforeUpdate(() =\u0026gt; { console.log(\u0026#39;Before Update\u0026#39;); // 组件更新前 }); onUpdated(() =\u0026gt; { console.log(\u0026#39;Updated\u0026#39;); // 组件更新后 }); onBeforeUnmount(() =\u0026gt; { console.log(\u0026#39;Before Unmount\u0026#39;); // 组件卸载前 }); onUnmounted(() =\u0026gt; { console.log(\u0026#39;Unmounted\u0026#39;); // 组件卸载后 }); // 同一个生命周期可以使用多次 onMounted(() =\u0026gt; { console.log(\u0026#39;Another Mounted\u0026#39;); // 另一个组件挂载后 }); return {}; } }; setup中使用ref获取元素或组件 要定义一个ref对象，绑定到元素或者组件的ref属性上即可\n只有在挂载完成后才能拿到值, 所以需要在生命周期中调用拿值\n获取元素 \u0026lt;template\u0026gt; \u0026lt;!-- 1. 指定ref --\u0026gt; \u0026lt;h2 ref=\u0026#34;titleRef\u0026#34;\u0026gt;我是迪迦\u0026lt;/h2\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import { onMounted, ref } from \u0026#39;vue\u0026#39;; export default { name: \u0026#39;App\u0026#39;, setup() { // 2. 生成ref对象 const titleRef = ref(); // 4. 可以在生命周期中获取到值 onMounted(() =\u0026gt; { console.log(titleRef.value); // \u0026lt;h2\u0026gt;我是迪迦\u0026lt;/h2\u0026gt; }); return { // 3. 返回出去，会自动匹配到对应的ref的 titleRef }; } }; \u0026lt;/script\u0026gt; 获取组件 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt;我是子组件\u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { name: \u0026#39;home-layout\u0026#39;, setup() { const showMessage = () =\u0026gt; { console.log(\u0026#39;home-layout function exection\u0026#39;); }; return { showMessage }; } }; \u0026lt;/script\u0026gt; \u0026lt;template\u0026gt; \u0026lt;!-- 1. 指定ref --\u0026gt; \u0026lt;home ref=\u0026#34;homeCompRef\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import { onMounted, ref } from \u0026#39;vue\u0026#39;; import home from \u0026#39;./home.vue\u0026#39;; export default { name: \u0026#39;App\u0026#39;, components: { home }, setup() { // 2. 生成ref对象 const homeCompRef = ref(); // 4. 可以在生命周期中获取到值 onMounted(() =\u0026gt; { console.log(homeCompRef.value); // proxy对象 console.log(homeCompRef.value.$el); // \u0026lt;div\u0026gt;我是子组件\u0026lt;/div\u0026gt; homeCompRef.value.showMessage(); // 调用子组件方法 }); return { // 3. 返回出去，会自动匹配到对应的ref的 homeCompRef }; } }; \u0026lt;/script\u0026gt; 侦听数据的变化 在前面的Options API中，我们可以通过watch选项来侦听data或者props的数据变化，当数据变化时执行某一些 操作。\n在Composition API中，我们可以使用watchEffect和watch来完成响应式数据的侦听；\nwatchEffect用于自动收集响应式数据的依赖； watch需要手动指定侦听的数据源； watchEffect 基本使用 自动收集响应式数据的依赖 watchEffect传入的函数会被立即执行一次，并且在执行的过程中会收集依赖 只有收集的依赖发生变化时，watchEffect传入的函数才会再次执行 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;{{ name }} - {{ age }}\u0026lt;/h1\u0026gt; \u0026lt;button @click=\u0026#34;changeName\u0026#34;\u0026gt;changeName\u0026lt;/button\u0026gt; \u0026lt;button @click=\u0026#34;changeAge\u0026#34;\u0026gt;changeAge\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import { ref, watchEffect } from \u0026#39;vue\u0026#39;; export default { setup() { let name = ref(\u0026#39;star\u0026#39;); let age = ref(18); const changeName = () =\u0026gt; (name.value === \u0026#39;star\u0026#39; ? (name.value = \u0026#39;xuanyu\u0026#39;) : (name.value = \u0026#39;star\u0026#39;)); const changeAge = () =\u0026gt; age.value++; watchEffect(() =\u0026gt; { // 因为这里只使用了name，所以只会监听name，如果把age也写进来，那么两个都会监听 console.log(\u0026#39;name:\u0026#39;, name.value); }); return { name, age, changeName, changeAge }; } }; \u0026lt;/script\u0026gt; 停止监听 如果在发生某些情况下，我们希望停止侦听，这个时候我们可以获取watchEffect的返回值函数，调用该函数即可。 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;{{ name }} - {{ age }}\u0026lt;/h1\u0026gt; \u0026lt;button @click=\u0026#34;changeName\u0026#34;\u0026gt;changeName\u0026lt;/button\u0026gt; \u0026lt;button @click=\u0026#34;changeAge\u0026#34;\u0026gt;changeAge\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import { ref, watchEffect } from \u0026#39;vue\u0026#39;; export default { setup() { let name = ref(\u0026#39;star\u0026#39;); let age = ref(18); const changeName = () =\u0026gt; (name.value === \u0026#39;star\u0026#39; ? (name.value = \u0026#39;xuanyu\u0026#39;) : (name.value = \u0026#39;star\u0026#39;)); // 获取返回值 const stopWatchEffect = watchEffect(() =\u0026gt; { // 自动监听age console.log(\u0026#39;age:\u0026#39;, age.value); }); const changeAge = () =\u0026gt; { age.value++; if (age.value \u0026gt; 22) { // 停止监听 stopWatchEffect(); } }; return { name, age, changeName, changeAge }; } }; \u0026lt;/script\u0026gt; 清除副作用 什么是清除副作用呢？ 比如在开发中我们需要在侦听函数中执行网络请求，但是在网络请求还没有达到的时候，我们停止了侦听器， 或者侦听器侦听函数被再次执行了 那么上一次的网络请求应该被取消掉，这个时候我们就可以清除上一次的副作用； 在我们给watchEffect传入的函数被回调时，其实可以获取到一个参数：onInvalidate 当副作用即将重新执行 或者 侦听器被停止 时会执行该函数传入的回调函数； 我们可以在传入的回调函数中，执行一些清除工作； \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;{{ name }}-{{ age }}\u0026lt;/h2\u0026gt; \u0026lt;button @click=\u0026#34;changeName\u0026#34;\u0026gt;修改name\u0026lt;/button\u0026gt; \u0026lt;button @click=\u0026#34;changeAge\u0026#34;\u0026gt;修改age\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import { ref, watchEffect } from \u0026#39;vue\u0026#39;; export default { setup() { // watchEffect: 自动收集响应式的依赖 const name = ref(\u0026#34;why\u0026#34;); const age = ref(18); const stop = watchEffect((onInvalidate) =\u0026gt; { const timer = setTimeout(() =\u0026gt; { console.log(\u0026#34;网络请求成功~\u0026#34;); }, 2000) // 根据name和age两个变量发送网络请求 onInvalidate(() =\u0026gt; { // 在这个函数中清除额外的副作用 // request.cancel() clearTimeout(timer); console.log(\u0026#34;onInvalidate\u0026#34;); }) console.log(\u0026#34;name:\u0026#34;, name.value, \u0026#34;age:\u0026#34;, age.value); }); const changeName = () =\u0026gt; name.value = name.value === \u0026#34;why\u0026#34; ? \u0026#34;kobe\u0026#34; : \u0026#34;why\u0026#34;; const changeAge = () =\u0026gt; age.value++; return { name, age, changeName, changeAge } } } \u0026lt;/script\u0026gt; watchEffect的执行时机 默认情况下，组件的更新会在副作用函数执行之前： 如果我们希望在副作用函数中获取到元素，是否可行呢？ \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h2 ref=\u0026#34;title\u0026#34;\u0026gt;哈哈哈\u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import { ref, watchEffect } from \u0026#39;vue\u0026#39;; export default { setup() { const title = ref(null); watchEffect(() =\u0026gt; { console.log(title.value); }) return { title } } } \u0026lt;/script\u0026gt; 我们会发现打印结果打印了两次： 这是因为setup函数在执行时就会立即执行传入的副作用函数，这个时候DOM并没有挂载，所以打印为null； 而当DOM挂载时，会给title的ref对象赋值新的值，副作用函数会再次执行，打印出来对应的元素； 这个时候我们需要改变副作用函数的执行时机； 它的默认值是pre，它会在元素 挂载 或者 更新 之前执行； 所以我们会先打印出来一个空的，当依赖的title发生改变时，就会再次执行一次，打印出元素； 我们可以设置副作用函数的执行时机： pre : 默认值,它会在元素 挂载 或者 更新 之前执行 post : 元素 挂载 或者 更新 之后执行 sync : 强制同步一起执行，效率很低，不推荐 \u0026lt;script\u0026gt; import { ref, watchEffect } from \u0026#39;vue\u0026#39;; export default { setup() { const title = ref(null); watchEffect(() =\u0026gt; { console.log(title.value); }, { flush: \u0026#34;post\u0026#34; }) return { title } } } \u0026lt;/script\u0026gt; Watch watch的API完全等同于组件watch选项的Property： watch需要侦听特定的数据源，并在回调函数中执行副作用； 默认情况下它是惰性的，只有当被侦听的源发 生变化时才会执行回调； 与watchEffect的比较，watch允许我们： 懒执行副作用（第一次不会直接执行）； 更具体的说明当哪些状态发生变化时，触发侦听器的执行； 访问侦听状态变化前后的值； 侦听单个数据源 watch侦听函数的数据源有两种类型：\n一个getter函数：但是该getter函数必须引用可响应式的对象（比如reactive或者ref）； 直接写入一个可响应式的对象，ref（如果是一个 reactive 的对象的侦听, 需要进行某些转换 ）； import { watch, reactive, ref, toRefs } from \u0026#39;vue\u0026#39;; // 一个getter函数引用可响应式的对象 const state = reactive({ count: 0 }); watch( () =\u0026gt; state.count, (newValue, oldValue) =\u0026gt; { console.log(`Count changed from ${oldValue} to ${newValue}`); }); // 直接写入一个可响应式的对象 const count = ref(0); watch(count, (newValue, oldValue) =\u0026gt; { console.log(`Count changed from ${oldValue} to ${newValue}`); }); // 直接写入一个可响应式的对象，需要进行某些转换 const reactiveState = reactive({ count: 0 }); const { count } = toRefs(reactiveState); watch(count, (newValue, oldValue) =\u0026gt; { console.log(`Count changed from ${oldValue} to ${newValue}`); }); 注意: reactive 对象获取到的 newValue 以及 oldValue 本身都是 reactive 对象\nwatch( info, (newInfo, oldInfo) =\u0026gt; { console.log(newInfo, oldInfo); } ) 如果希望两者都是一个普通对象, 可以使用以下写法(JavaScript中的展开运算符):\nwatch( () =\u0026gt; ({ ...info }), (newInfo, oldInfo) =\u0026gt; { console.log(newInfo, oldInfo); } ) 以下是完整代码:\n\u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h2 ref=\u0026#34;title\u0026#34;\u0026gt;{{ info.name }}\u0026lt;/h2\u0026gt; \u0026lt;button @click=\u0026#34;changeData\u0026#34;\u0026gt;修改数据\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import { reactive, watch } from \u0026#39;vue\u0026#39;; export default { setup() { const info = reactive({ name: \u0026#34;why\u0026#34;, age: 18 }); watch( () =\u0026gt; ({ ...info }), (newInfo, oldInfo) =\u0026gt; { console.log(newInfo, oldInfo); } ) watch( info, (newInfo, oldInfo) =\u0026gt; { console.log(newInfo, oldInfo); } ) const changeData = () =\u0026gt; info.name = info.name === \u0026#34;why\u0026#34; ? \u0026#34;kobe\u0026#34; : \u0026#34;why\u0026#34;; return { changeData, info } } } \u0026lt;/script\u0026gt; 侦听多个数据源 当侦听多个来源时，回调函数接受两个数组，分别对应来源数组中的新值和旧值：\nwatch([fooRef, barRef], ([foo, bar], [prevFoo, prevBar]) =\u0026gt; { /* ... */ }) \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h2 ref=\u0026#34;title\u0026#34;\u0026gt;{{ info.name }}\u0026lt;/h2\u0026gt; \u0026lt;button @click=\u0026#34;changeData\u0026#34;\u0026gt;修改数据\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import { ref, reactive, watch } from \u0026#39;vue\u0026#39;; export default { setup() { const info = reactive({ name: \u0026#34;why\u0026#34;, age: 18 }); const name = ref(\u0026#34;why\u0026#34;); watch([() =\u0026gt; ({ ...info }), name], ([newInfo, newName], [oldInfo, oldName]) =\u0026gt; { console.log(newInfo, newName, oldInfo, oldName); }) const changeData = () =\u0026gt; { info.name = \u0026#34;kobe\u0026#34;; } return { changeData, info } } } \u0026lt;/script\u0026gt; watch的选项 deep : 是否深度监听 immediate ： 是否立即执行 watch 侦听 reactive时默认是深度侦听的, 但是在使用 {...info}展开运算符时, 是不会深度监听的, 所以我们要设置 deep: True\nimmediate: 第一次会执行\nwatch( () =\u0026gt; { const obj = { ...info } obj.friend = { ...obj.friend } return obj }, (newValue, oldValue) =\u0026gt; { console.log(newValue, oldValue) }, { // 如果有多层，需要加上deep deep: true, // 立即执行 immediate: true } ) 停止侦听 const stop = watch(source, callback) // 当已不再需要该侦听器时： stop() 副作用清理 watch(id, async (newId, oldId, onCleanup) =\u0026gt; { const { response, cancel } = doAsyncWork(newId) // 当 `id` 变化时，`cancel` 将被调用， // 取消之前的未完成的请求 onCleanup(cancel) data.value = await response }) provide \u0026amp;\u0026amp; inject provide 和 inject 通常成对一起使用，使一个祖先组件作为其后代组件的依赖注入方，无论这个组件的层级有多深都可以注入成功，只要他们处于同一条组件链上。\nprovide可以传入两个参数 :\nname：提供的属性名称 value：提供的属性值 inject可以传入两个参数 :\n对应provide传过来的name值 默认值 \u0026lt;template\u0026gt; \u0026lt;h1\u0026gt;APP count: {{ count }}\u0026lt;/h1\u0026gt; \u0026lt;button @click=\u0026#34;change\u0026#34;\u0026gt;APP button\u0026lt;/button\u0026gt; \u0026lt;demo /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import { ref, provide, readonly } from \u0026#39;vue\u0026#39; import demo from \u0026#39;./components/demo.vue\u0026#39; export default { name: \u0026#39;App\u0026#39;, components: { demo }, setup() { let count = ref(100) // 第一个参数key 第二个参数值，不让子组件随便修改，用readonly包裹一下 provide(\u0026#39;count\u0026#39;, readonly(count)) const change = () =\u0026gt; count.value++ return { count, change } } } \u0026lt;/script\u0026gt; \u0026lt;template\u0026gt; \u0026lt;h2\u0026gt;demo count:{{ count }}\u0026lt;/h2\u0026gt; \u0026lt;button @click=\u0026#34;change\u0026#34;\u0026gt;demo change\u0026lt;/button\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import { ref, inject } from \u0026#39;vue\u0026#39; export default { setup() { // 接收 第二个参数可以给一个默认值 let count = inject(\u0026#39;count\u0026#39;, \u0026#39;\u0026#39;) // 因为设置了readOnly 所以更改不了 const change = () =\u0026gt; count.value++ return { count, change } } } \u0026lt;/script\u0026gt; h函数 Vue在生成真实的DOM之前，会将节点转换成VNode，而VNode组合在一起形成一颗树结构，就是虚拟DOM ( VDOM ) 事实上，编写的 template 中的HTML 最终也是使用渲染函数生成对应的VNode 那么，如果想充分的利用JavaScript的编程能力，可以自己来编写 createVNode 函数，生成对应的VNode h() 函数是一个用于创建 vnode 的一个函数 其实更准备的命名是 createVNode() 函数，但是为了简便在Vue将之简化为 h() 函数 参数 // 完整参数签名 function h( type: string | Component, props?: object | null, children?: Children | Slot | Slots ): VNode // 省略 props function h(type: string | Component, children?: Children | Slot): VNode type Children = string | number | boolean | VNode | null | Children[] type Slot = () =\u0026gt; Children type Slots = { [name: string]: Slot } 第一个参数既可以是一个字符串 (用于原生元素) 也可以是一个 Vue 组件定义。第二个参数是要传递的 prop，第三个参数是子节点。 当创建一个组件的 vnode 时，子节点必须以插槽函数进行传递。如果组件只有默认槽，可以使用单个插槽函数进行传递。否则，必须以插槽函数的对象形式来传递。 为了方便阅读，当子节点不是插槽对象时，可以省略 prop 参数。 基本使用 h函数可以在两个地方使用：\nrender函数选项中； setup函数选项中（setup本身需要是一个函数类型，函数再返回h函数创建的VNode）； 在render函数选项中 \u0026lt;script\u0026gt; // 1. 引入h函数 import { h } from \u0026#39;vue\u0026#39;; export default { data() { return { counter: 0 }; }, // 2. 定义render选项 render() { // 3. 返回自定义的h函数 return h(\u0026#39;div\u0026#39;, { class: \u0026#39;app-view\u0026#39;, name: \u0026#39;abc\u0026#39; }, [ // 4. 定义h2 h(\u0026#39;h2\u0026#39;, { className: \u0026#39;title\u0026#39; }, this.counter), // 5. 定义增加按钮 h( \u0026#39;button\u0026#39;, { className: \u0026#39;add-btn\u0026#39;, onClick: () =\u0026gt; { this.counter++; } }, \u0026#39;加一\u0026#39; ), // 6. 定义减少按钮 h( \u0026#39;button\u0026#39;, { className: \u0026#39;remove-btn\u0026#39;, onClick: () =\u0026gt; { this.counter--; } }, \u0026#39;减一\u0026#39; ) ]); } } \u0026lt;/script\u0026gt; 在setup函数选项中 \u0026lt;script\u0026gt; import { h, ref } from \u0026#39;vue\u0026#39;; export default { setup() { const counter = ref(0); const increment = () =\u0026gt; { counter.value++; }; const decrement = () =\u0026gt; { counter.value--; }; // 返回render函数 return () =\u0026gt; h(\u0026#39;div\u0026#39;, { class: \u0026#39;app-view\u0026#39;, name: \u0026#39;abc\u0026#39; }, [ h(\u0026#39;h2\u0026#39;, { className: \u0026#39;title\u0026#39; }, counter.value), h( \u0026#39;button\u0026#39;, { onClick: increment }, \u0026#39;+1\u0026#39; ), h( \u0026#39;button\u0026#39;, { onClick: decrement }, \u0026#39;-1\u0026#39; ) ]); } }; \u0026lt;/script\u0026gt; 在setup语法糖中 \u0026lt;template\u0026gt; \u0026lt;!-- 2. 使用一下 --\u0026gt; \u0026lt;star-render /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup\u0026gt; import { h, ref } from \u0026#39;vue\u0026#39;; const counter = ref(0); const increment = () =\u0026gt; { counter.value++; }; const decrement = () =\u0026gt; { counter.value--; }; // 1. 拿到render函数 const starRender = () =\u0026gt; h(\u0026#39;div\u0026#39;, { class: \u0026#39;app-view\u0026#39;, name: \u0026#39;abc\u0026#39; }, [ h(\u0026#39;h2\u0026#39;, { className: \u0026#39;title\u0026#39; }, counter.value), h( \u0026#39;button\u0026#39;, { onClick: increment }, \u0026#39;+1\u0026#39; ), h( \u0026#39;button\u0026#39;, { onClick: decrement }, \u0026#39;-1\u0026#39; ) ]); \u0026lt;/script\u0026gt; 其他写法 创建原生元素：\nimport { h } from \u0026#39;vue\u0026#39; // 除了 type 外，其他参数都是可选的 h(\u0026#39;div\u0026#39;) h(\u0026#39;div\u0026#39;, { id: \u0026#39;foo\u0026#39; }) // attribute 和 property 都可以用于 prop // Vue 会自动选择正确的方式来分配它 h(\u0026#39;div\u0026#39;, { class: \u0026#39;bar\u0026#39;, innerHTML: \u0026#39;hello\u0026#39; }) // class 与 style 可以像在模板中一样 // 用数组或对象的形式书写 h(\u0026#39;div\u0026#39;, { class: [foo, { bar }], style: { color: \u0026#39;red\u0026#39; } }) // 事件监听器应以 onXxx 的形式书写 h(\u0026#39;div\u0026#39;, { onClick: () =\u0026gt; {} }) // children 可以是一个字符串 h(\u0026#39;div\u0026#39;, { id: \u0026#39;foo\u0026#39; }, \u0026#39;hello\u0026#39;) // 没有 prop 时可以省略不写 h(\u0026#39;div\u0026#39;, \u0026#39;hello\u0026#39;) h(\u0026#39;div\u0026#39;, [h(\u0026#39;span\u0026#39;, \u0026#39;hello\u0026#39;)]) // children 数组可以同时包含 vnode 和字符串 h(\u0026#39;div\u0026#39;, [\u0026#39;hello\u0026#39;, h(\u0026#39;span\u0026#39;, \u0026#39;hello\u0026#39;)]) 创建组件：\nimport Foo from \u0026#39;./Foo.vue\u0026#39; // 传递 prop h(Foo, { // 等价于 some-prop=\u0026#34;hello\u0026#34; someProp: \u0026#39;hello\u0026#39;, // 等价于 @update=\u0026#34;() =\u0026gt; {}\u0026#34; onUpdate: () =\u0026gt; {} }) // 传递单个默认插槽 h(Foo, () =\u0026gt; \u0026#39;default slot\u0026#39;) // 传递具名插槽 // 注意，需要使用 `null` 来避免 // 插槽对象被当作是 prop h(MyComponent, null, { default: () =\u0026gt; \u0026#39;default slot\u0026#39;, foo: () =\u0026gt; h(\u0026#39;div\u0026#39;, \u0026#39;foo\u0026#39;), bar: () =\u0026gt; [h(\u0026#39;span\u0026#39;, \u0026#39;one\u0026#39;), h(\u0026#39;span\u0026#39;, \u0026#39;two\u0026#39;)] }) 函数组件和插槽的使用 \u0026lt;script\u0026gt; import { h } from \u0026#34;vue\u0026#34;; export default { render() { return h(\u0026#34;div\u0026#34;, null, [ h(\u0026#34;h2\u0026#34;, null, \u0026#34;Hello World\u0026#34;), this.$slots.default ? this.$slots.default({name: \u0026#34;coderwhy\u0026#34;}): h(\u0026#34;span\u0026#34;, null, \u0026#34;我是HelloWorld的插槽默认值\u0026#34;) ]) } } \u0026lt;/script\u0026gt; \u0026lt;style lang=\u0026#34;scss\u0026#34; scoped\u0026gt; \u0026lt;/style\u0026gt; \u0026lt;template\u0026gt; \u0026lt;starRender /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup\u0026gt; import { h } from \u0026#39;vue\u0026#39;; import HelloWorld from \u0026#39;./HelloWorld.vue\u0026#39;; const starRender = () =\u0026gt; h(\u0026#34;div\u0026#34;, null, [ h(HelloWorld, null, { default: props =\u0026gt; h(\u0026#34;span\u0026#34;, null, `app传入到HelloWorld中的内容: ${props.name}`) }) ]) \u0026lt;/script\u0026gt; Jsx JSX 是 JavaScript 的一个类似 XML 的扩展，有了它，我们可以用以下的方式来书写代码：\nconst vnode = \u0026lt;div\u0026gt;hello\u0026lt;/div\u0026gt; 在 JSX 表达式中，使用大括号来嵌入动态值：\nconst vnode = \u0026lt;div id={dynamicId}\u0026gt;hello, {userName}\u0026lt;/div\u0026gt; 配置 vue-cli环境 npm install @vue/babel-plugin-jsx -D babel.config.js 中配置 vite环境 npm install @vitejs/plugin-vue-jsx -D vite.config.js 中配置 import { fileURLToPath, URL } from \u0026#39;node:url\u0026#39;; import { defineConfig } from \u0026#39;vite\u0026#39;; import vue from \u0026#39;@vitejs/plugin-vue\u0026#39;; import jsx from \u0026#39;@vitejs/plugin-vue-jsx\u0026#39;; export default defineConfig({ plugins: [vue(), jsx()], resolve: { alias: { \u0026#39;@\u0026#39;: fileURLToPath(new URL(\u0026#39;./src\u0026#39;, import.meta.url)) } } }); 基本使用 在render函数中 \u0026lt;!-- 1. 这里加上注明语言使用jsx --\u0026gt; \u0026lt;script lang=\u0026#34;jsx\u0026#34;\u0026gt; import Home from \u0026#39;./pages/home.vue\u0026#39;; export default { data() { return { counter: 0 }; }, render() { // 2. 返回jsx写法 return ( \u0026lt;div class=\u0026#34;app-view\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;当前计数:{this.counter}\u0026lt;/h2\u0026gt; \u0026lt;button onClick={this.increment}\u0026gt;+1\u0026lt;/button\u0026gt; \u0026lt;button onClick={this.decrement}\u0026gt;-1\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); }, methods: { increment() { this.counter++; }, decrement() { this.counter--; } } }; \u0026lt;/script\u0026gt; 在setup函数中 \u0026lt;!-- 1. 这里加上注明语言使用jsx --\u0026gt; \u0026lt;script lang=\u0026#34;jsx\u0026#34;\u0026gt; export default { data() { return { counter: 0 }; }, render() { // 2. 返回jsx写法 return ( \u0026lt;div class=\u0026#34;app-view\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;当前计数:{this.counter}\u0026lt;/h2\u0026gt; \u0026lt;button onClick={this.increment}\u0026gt;+1\u0026lt;/button\u0026gt; \u0026lt;button onClick={this.decrement}\u0026gt;-1\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); }, methods: { increment() { this.counter++; }, decrement() { this.counter--; } } }; \u0026lt;/script\u0026gt; 在setup语法糖中 \u0026lt;template\u0026gt; \u0026lt;!-- 3. 使用 --\u0026gt; \u0026lt;star-render /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;!-- 1. 这里加上注明语言使用jsx --\u0026gt; \u0026lt;script setup lang=\u0026#34;jsx\u0026#34;\u0026gt; import { ref } from \u0026#39;vue\u0026#39;; const counter = ref(0); const increment = () =\u0026gt; counter.value++; const decrement = () =\u0026gt; counter.value--; // 2. 拿到render函数 const starRender = () =\u0026gt; ( \u0026lt;div class=\u0026#34;app-view\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;当前计数:{counter.value}\u0026lt;/h2\u0026gt; \u0026lt;button onClick={increment}\u0026gt;+1\u0026lt;/button\u0026gt; \u0026lt;button onClick={decrement}\u0026gt;-1\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); \u0026lt;/script\u0026gt; script setup语法糖 \u0026lt;script setup\u0026gt;是在单文件组件 (SFC) 中使用组合式 API 的编译时语法糖，当同时使用 SFC 与组合式 API 时则推荐该语法\n更少的样板内容，更简洁的代码 能够使用纯 Typescript 声明 prop 和抛出事件 更好的运行时性能 更好的 IDE 类型推断性能 顶层的绑定会被暴露给模板 当使用 \u0026lt;script setup\u0026gt; 的时候，任何在\u0026lt;script setup\u0026gt; 声明的顶层的绑定 (包括变量，函数声明，以及 import 引入的内容) 能在模板中直接使用, 导入的组件也可以直接使用\n\u0026lt;template\u0026gt; \u0026lt;div\u0026gt;{{ mes }}\u0026lt;/div\u0026gt; \u0026lt;button @click=\u0026#34;addClick\u0026#34;\u0026gt;按钮\u0026lt;/button\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;!-- 1. 这里加上setup属性 --\u0026gt; \u0026lt;script setup\u0026gt; import { ref } from \u0026#39;vue\u0026#39;; // 定义数据后，template中可以直接使用，无需返回 const mes = ref(0); // 定义的方法也是，直接可被使用 const addClick = () =\u0026gt; { console.log(\u0026#39;hahah\u0026#39;); }; \u0026lt;/script\u0026gt; \u0026lt;template\u0026gt; \u0026lt;!-- 2. 直接使用，不用通过compoents注册 --\u0026gt; \u0026lt;my-home\u0026gt;\u0026lt;/my-home\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup\u0026gt; // 1. 这是导入的组件 import myHome from \u0026#39;./myHome.vue\u0026#39;; \u0026lt;/script\u0026gt; defineProps() defineProps =\u0026gt; 用来接收从父组件传递过来的数据\n\u0026lt;template\u0026gt; \u0026lt;my-home name=\u0026#34;hello\u0026#34; :age=\u0026#34;18\u0026#34;\u0026gt;\u0026lt;/my-home\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup\u0026gt; import myHome from \u0026#39;./myHome.vue\u0026#39;; \u0026lt;/script\u0026gt; \u0026lt;template\u0026gt; \u0026lt;div\u0026gt;{{ name }} - {{ age }}\u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup\u0026gt; // defineProps是内置组件，可以直接使用，不用导入 // 可以接收一下返回的props对象，也可以不用 const props = defineProps({ name: { type: String, default: \u0026#39;\u0026#39; }, age: { type: Number, default: 0 } }); console.log(props); // Proxy {name: \u0026#39;hello\u0026#39;, age: 18} \u0026lt;/script\u0026gt; defineEmits() defineProps =\u0026gt; 用来发射事件给父组件\n\u0026lt;template\u0026gt; \u0026lt;button @click=\u0026#34;btnClick\u0026#34;\u0026gt;发送\u0026lt;/button\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup\u0026gt; // 1. 注册一下发射的事件 const emits = defineEmits([\u0026#39;btnClick\u0026#39;]); // 2. 监听按钮的点击 const btnClick = () =\u0026gt; { // 3. 发射 emits(\u0026#39;btnClick\u0026#39;, \u0026#39;我发射了\u0026#39;); }; \u0026lt;/script\u0026gt; \u0026lt;template\u0026gt; \u0026lt;!-- 1. 监听子组件发射来的事件 --\u0026gt; \u0026lt;my-home @btnClick=\u0026#34;handleClick\u0026#34;\u0026gt;\u0026lt;/my-home\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup\u0026gt; import myHome from \u0026#39;./myHome.vue\u0026#39;; // 2. 获取子组件传递过来的值 const handleClick = (message) =\u0026gt; { console.log(message); // 我发射了 }; \u0026lt;/script\u0026gt; defineExpose() defineExpose =\u0026gt; 用来暴露数据\nps : 使用 \u0026lt;script setup\u0026gt; 的组件是默认关闭的\n\u0026lt;script setup\u0026gt; const foo = () =\u0026gt; { console.log(\u0026#39;foo\u0026#39;); }; // 暴露出去，才可以被访问到 defineExpose({ foo }); \u0026lt;/script\u0026gt; \u0026lt;template\u0026gt; \u0026lt;!-- 1. 定义ref --\u0026gt; \u0026lt;my-home ref=\u0026#34;myHomeRef\u0026#34;\u0026gt;\u0026lt;/my-home\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup\u0026gt; import { onMounted, ref } from \u0026#39;vue\u0026#39;; import myHome from \u0026#39;../../../Vue3/06_阶段六-Vue3全家桶实战/code/04_learn_composition/src/11_script_setup语法/myHome.vue\u0026#39;; // 2. 定义名称一样 const myHomeRef = ref(); onMounted(() =\u0026gt; { // 3. 在生命周期中访问 console.log(myHomeRef.value); }); \u0026lt;/script\u0026gt; 自定义组件 指令的生命周期 一个指令定义的对象，Vue提供了如下的几个钩子函数： created：在绑定元素的 attribute 或事件监听器被应用之前调用； beforeMount：当指令第一次绑定到元素并且在挂载父组件之前调用； mounted：在绑定元素的父组件被挂载后调用； beforeUpdate：在更新包含组件的 VNode 之前调用； updated：在包含组件的 VNode 及其子组件的 VNode 更新后调用； beforeUnmount：在卸载绑定元素的父组件之前调用； unmounted：当指令与元素解除绑定且父组件已卸载时，只调用一次； 指令钩子 一个指令的定义对象可以提供几种钩子函数 (都是可选的)：\nconst myDirective = { // 在绑定元素的 attribute 前 // 或事件监听器应用前调用 created(el, binding, vnode, prevVnode) { // 下面会介绍各个参数的细节 }, // 在元素被插入到 DOM 前调用 beforeMount(el, binding, vnode, prevVnode) {}, // 在绑定元素的父组件 // 及他自己的所有子节点都挂载完成后调用 mounted(el, binding, vnode, prevVnode) {}, // 绑定元素的父组件更新前调用 beforeUpdate(el, binding, vnode, prevVnode) {}, // 在绑定元素的父组件 // 及他自己的所有子节点都更新后调用 updated(el, binding, vnode, prevVnode) {}, // 绑定元素的父组件卸载前调用 beforeUnmount(el, binding, vnode, prevVnode) {}, // 绑定元素的父组件卸载后调用 unmounted(el, binding, vnode, prevVnode) {} } 指令的钩子会传递以下几种参数：\nel：指令绑定到的元素。这可以用于直接操作 DOM。 binding：一个对象，包含以下属性。 value：传递给指令的值。例如在 v-my-directive=\u0026quot;1 + 1\u0026quot; 中，值是 2。 oldValue：之前的值，仅在 beforeUpdate 和 updated 中可用。无论值是否更改，它都可用。 arg：传递给指令的参数 (如果有的话)。例如在 v-my-directive:foo 中，参数是 \u0026quot;foo\u0026quot;。 modifiers：一个包含修饰符的对象 (如果有的话)。例如在 v-my-directive.foo.bar 中，修饰符对象是 { foo: true, bar: true }。 instance：使用该指令的组件实例。 dir：指令的定义对象。 vnode：代表绑定元素的底层 VNode。 prevNode：代表之前的渲染中指令所绑定元素的 VNode。仅在 beforeUpdate 和 updated 钩子中可用。 举例来说，像下面这样使用指令：\n\u0026lt;div v-example:foo.bar=\u0026#34;baz\u0026#34;\u0026gt; binding 参数会是一个这样的对象：\n{ arg: \u0026#39;foo\u0026#39;, modifiers: { bar: true }, value: /* `baz` 的值 */, oldValue: /* 上一次更新时 `baz` 的值 */ } 和内置指令类似，自定义指令的参数也可以是动态的。举例来说：\n\u0026lt;div v-example:[arg]=\u0026#34;value\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 这里指令的参数会基于组件的 arg 数据属性响应式地更新。\n除了 el 外，其他参数都是只读的，不要更改它们。若你需要在不同的钩子间共享信息，推荐通过元素的 dataset attribute 实现。\n简单使用 Vue中自带的指令例如v-show、v-for、v-model等等，除了使用这些指令之外，Vue 也允许我们来自定义自己的指令\nps : 一般需要对dom元素进行底层操作时使用\n自定义指令分为两种： 自定义局部指令：组件中通过 directives 选项，只能在当前组件中使用； 自定义全局指令：app的 directive 方法，可以在任意组件中被使用； 默认实现方式 一个自定义指令由一个包含类似组件生命周期钩子的对象来定义。钩子函数会接收到指令所绑定元素作为其参数。下面是一个自定义指令的例子，当一个 input 元素被 Vue 插入到 DOM 中后，它会被自动聚焦：\n\u0026lt;script setup\u0026gt; // 在模板中启用 v-focus const vFocus = { mounted: (el) =\u0026gt; el.focus() } \u0026lt;/script\u0026gt; \u0026lt;template\u0026gt; \u0026lt;input v-focus /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;app-view\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; ref=\u0026#34;inputRef\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup\u0026gt; import { onMounted, ref } from \u0026#39;vue\u0026#39;; const inputRef = ref(null); onMounted(() =\u0026gt; { inputRef.value.focus(); }); \u0026lt;/script\u0026gt; 使用局部指令 在 \u0026lt;script setup\u0026gt; 中，任何以 v 开头的驼峰式命名的变量都可以被用作一个自定义指令。在上面的例子中，vFocus 即可以在模板中以 v-focus 的形式使用。\n在没有使用 \u0026lt;script setup\u0026gt; 的情况下，自定义指令需要通过 directives 选项注册：\n\u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; v-focus\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { // 局部指令 directives: { focus: { mounted(el, bindings, vnode, preVnode) { console.log(\u0026#34;focus mounted\u0026#34;); el.focus(); } } } } \u0026lt;/script\u0026gt; 自定义全局指令 main.js中注册 import { createApp } from \u0026#39;vue\u0026#39; import App from \u0026#39;./App.vue\u0026#39; const app = createApp(App) // 指令名称 app.directive(\u0026#39;focus\u0026#39;, { // 使用自定义指令的生命周期，挂载后访问 mounted(el, bindings, vnode, preVnode) { el?.focus() } }) app.mount(\u0026#39;#app\u0026#39;) 进行抽取 注册directives文件夹 /directives/format-time.js import dayjs from \u0026#39;dayjs\u0026#39;; export default function(app) { app.directive(\u0026#34;format-time\u0026#34;, { created(el, bindings) { bindings.formatString = \u0026#34;YYYY-MM-DD HH:mm:ss\u0026#34;; if (bindings.value) { bindings.formatString = bindings.value; } }, mounted(el, bindings) { const textContent = el.textContent; let timestamp = parseInt(textContent); if (textContent.length === 10) { timestamp = timestamp * 1000 } el.textContent = dayjs(timestamp).format(bindings.formatString); } }) } /directives/index.js import registerFormatTime from \u0026#39;./format-time\u0026#39;; export default function registerDirectives(app) { registerFormatTime(app); } mian.js import registerDirectives from \u0026#39;./directives\u0026#39; registerDirectives(app); setup 函数 \u0026lt;template\u0026gt; \u0026lt;h1 v-fomat-time=\u0026#34;timeFormatType\u0026#34;\u0026gt;{{ timeStamp }}\u0026lt;/h1\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import { ref } from \u0026#39;vue\u0026#39; import dayJs from \u0026#39;dayjs\u0026#39; export default { directives: { \u0026#39;fomat-time\u0026#39;: { mounted(el, bindings) { // 默认显示时间类型 let formatType = bindings.value console.log(formatType) // 转换成number类型 let time = el.textContent.length === 10 ? el.textContent * 1000 : el.textContent * 1; // 格式化 el.textContent = dayJs(time).format(formatType) setInterval(() =\u0026gt; { // 定时器 time = dayJs(new Date().valueOf()).format(formatType) el.textContent = time }, 1000) } } }, setup() { // 设置初始时间戳 const timeStamp = ref(new Date().valueOf()) const timeFormatType = ref(\u0026#39;YYYY-MM-DD HH:mm:ss\u0026#39;) return { timeStamp, timeFormatType } } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; h1 { display: inline-block; color: transparent; -webkit-background-clip: text; background-image: linear-gradient(to right, red, blue); } \u0026lt;/style\u0026gt; 语法糖 \u0026lt;template\u0026gt; \u0026lt;h1 v-fomat-time=\u0026#34;timeFormatType\u0026#34;\u0026gt;{{ timeStamp }}\u0026lt;/h1\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup\u0026gt; import { ref } from \u0026#39;vue\u0026#39;; import dayJs from \u0026#39;dayjs\u0026#39;; // 设置初始时间戳 const timeStamp = ref(new Date().valueOf()); // 设置初始时间格式 const timeFormatType = ref(\u0026#39;YYYY-MM-DD HH:mm:ss\u0026#39;); // 自定义时间格式化指令 const vFomatTime = { mounted(el, bindings) { // 获取定义的时间格式 const { value: timeFormatType } = bindings; // 转换成number类型 let time = el.textContent.length === 10 ? el.textContent * 1000 : el.textContent * 1; // 使用dayJs，根据时间格式来格式化时间,并赋值给el el.textContent = dayJs(time).format(timeFormatType); // 定时器，每隔一秒，重新赋值给el setInterval(() =\u0026gt; { time = dayJs(new Date().valueOf()).format(timeFormatType); el.textContent = time; }, 1000); } }; \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; h1 { display: inline-block; color: transparent; -webkit-background-clip: text; background-clip: text; background-image: linear-gradient(to right, red, blue); } \u0026lt;/style\u0026gt; 内置组件 Teleport \u0026lt;Teleport\u0026gt; 是一个内置组件，它可以将一个组件内部的一部分模板“传送”到该组件的 DOM 结构外层的位置去。\n在某些情况下，希望组件不是挂载在当前组件树上的，可能是移动到Vue app之外的其他位置 比如移动到body元素上，或者我们有其他的div#app之外的元素上 可以通过teleport来完成 teleport 翻译过来是心灵传输、远距离运输的意思，有两个属性 to : 指定将其中的内容移动到的目标元素，可以使用选择器 disabled : 是否禁用 teleport 的功能 基本使用 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;app-view\u0026#34;\u0026gt; \u0026lt;!-- 把该组件挂载到body元素上 --\u0026gt; \u0026lt;teleport to=\u0026#34;body\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;Teleport\u0026lt;/h1\u0026gt; \u0026lt;/teleport\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; h1 { display: inline-block; color: transparent; -webkit-background-clip: text; background-clip: text; background-image: linear-gradient(to right, red, green, pink, yellow, blue); } \u0026lt;/style\u0026gt; 挂载到#app之外的指定元素上 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;div id=\u0026#34;star\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;b\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;c\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- 把该组件挂载到#star元素上 --\u0026gt; \u0026lt;teleport to=\u0026#34;#star\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;Teleport\u0026lt;/h1\u0026gt; \u0026lt;/teleport\u0026gt; \u0026lt;!-- 把该组件挂载到.b元素上 --\u0026gt; \u0026lt;teleport to=\u0026#34;.b\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;Teleport123\u0026lt;/h1\u0026gt; \u0026lt;/teleport\u0026gt; \u0026lt;!-- 文档上说是挂载到#app之外的元素，可是我发现自己内部的也可以指定，emmmm，优先是从内部一层层往外找的 --\u0026gt; \u0026lt;!-- 把该组件挂载到.c元素上... --\u0026gt; \u0026lt;teleport to=\u0026#34;.c\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;Teleport123\u0026lt;/h1\u0026gt; \u0026lt;/teleport\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; h1 { display: inline-block; color: transparent; -webkit-background-clip: text; background-clip: text; background-image: linear-gradient(to right, red, green, pink, yellow, blue); } \u0026lt;/style\u0026gt; 多个Teleport 会合并，谁先谁在前面\n\u0026lt;template\u0026gt; \u0026lt;div id=\u0026#34;star\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;app-view\u0026#34;\u0026gt; \u0026lt;!-- 把该组件挂载到#star元素上 --\u0026gt; \u0026lt;teleport to=\u0026#34;#star\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;Teleport\u0026lt;/h1\u0026gt; \u0026lt;/teleport\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- 把该组件挂载到#star元素上 --\u0026gt; \u0026lt;teleport to=\u0026#34;#star\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;Teleport123\u0026lt;/h1\u0026gt; \u0026lt;/teleport\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; h1 { display: inline-block; color: transparent; -webkit-background-clip: text; background-clip: text; background-image: linear-gradient(to right, red, green, pink, yellow, blue); } \u0026lt;/style\u0026gt; 其他 异步组件 defineAsyncComponent/ Suspense : 实验特性 动态组件 : component\nVue插件 https://cn.vuejs.org/guide/reusability/plugins.html#plugins\n通常我们向Vue全局添加一些功能时，会采用插件的模式，它有两种编写方式： 对象类型：一个对象，但是必须包含一个 install 的函数，该函数会在安装插件时执行； 函数类型：一个function，这个函数会在安装插件时自动执行； 插件可以完成的功能没有限制，比如下面的几种都是可以的： 添加全局方法或者property，通过把它们添加到 config.globalProperties 上实现； 添加全局资源：指令/过滤器/过渡等； 通过全局 mixin 来添加一些组件选项； 一个库，提供自己的 API，同时提供上面提到的一个或多个功能； 对象类型 对象类型：一个对象，但是必须包含一个 install 的函数，该函数会在安装插件时执行\napp.use({ install(app) { console.log(\u0026#39;对象方式，插件被调用了\u0026#39;, app); } }); 函数类型 函数类型：一个function，这个函数会在安装插件时自动执行\napp.use(function(app){ console.log(\u0026#39;函数方式，插件被调用了\u0026#39;, app); }) 改写自定义指令 import { createApp } from \u0026#39;vue\u0026#39;; import App from \u0026#39;./App.vue\u0026#39;; // 1. 导入指令方法 import installDirectives from \u0026#39;./directives\u0026#39;; // 2。 注册所有指令 // installDirectives(app); // 这样使用use方法注册指令，因为传入的是一个函数，所以会自动执行 // 并且会把app实例传入，这样就可以在函数内部注册指令了 createApp(App).use(installDirectives).mount(\u0026#39;#app\u0026#39;); ","permalink":"https://waite.wang/posts/web/vue3-compositionapi/","summary":"\u003ch2 id=\"options-api的弊端\"\u003eOptions API的弊端\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e在Vue2中，我们编写组件的方式是Options API：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eOptions API的一大特点就是在对应的属性中编写对应的功能模块；\u003c/li\u003e\n\u003cli\u003e比如data定义数据、methods中定义方法、computed中定义计算属性、watch中监听属性改变，也包括生命 周期钩子；\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e但是这种代码有一个很大的弊端：\u003c/p\u003e","title":"Vue3 CompositionAPI"},{"content":" Typora 免费版本: https://cloud.waite.wang/Cloud/%E5%B7%A5%E5%85%B7/typora-setup-x64.exe\n七牛云 七牛云: https://www.qiniu.com/\n注册实名 2. 对象存储, 新建空间 选择离你最近的存储区域(建议服务器哪的就选哪个区) 访问控制选择公有 个人中心 \u0026gt; 密钥管理 \u0026gt; 复制待用 PicGo https://github.com/Molunerfinn/PicGo\n图床设置 - 七牛云 AccessKey和SecretKey是AK和SK\nBucket是空间名称 + 访问网址是http://后面加上七牛云给的临时域名\n确定 设置为默认图床 Typora 文件 \u0026gt; 偏好设置 \u0026gt; 图像 验证图片上传选项 ","permalink":"https://waite.wang/posts/tools/qiniucloud-typora-picgo/","summary":"\u003cblockquote\u003e\n\u003cp\u003eTypora 免费版本: \u003ca href=\"https://cloud.waite.wang/Cloud/%E5%B7%A5%E5%85%B7/typora-setup-x64.exe\"\u003ehttps://cloud.waite.wang/Cloud/%E5%B7%A5%E5%85%B7/typora-setup-x64.exe\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"七牛云\"\u003e七牛云\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e七牛云: \u003ca href=\"https://www.qiniu.com/\"\u003ehttps://www.qiniu.com/\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003col\u003e\n\u003cli\u003e注册实名 2. 对象存储, 新建空间\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg alt=\"1\" loading=\"lazy\" src=\"http://qiniu.waite.wang/1.png\"\u003e\u003c/p\u003e\n\u003col start=\"3\"\u003e\n\u003cli\u003e选择离你最近的存储区域(建议服务器哪的就选哪个区) 访问控制选择公有\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg alt=\"image-20230529224621032\" loading=\"lazy\" src=\"http://qiniu.waite.wang/image-20230529224621032.png\"\u003e\u003c/p\u003e\n\u003col start=\"4\"\u003e\n\u003cli\u003e个人中心 \u0026gt; 密钥管理 \u0026gt; 复制待用\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg alt=\"image-20230529224726314\" loading=\"lazy\" src=\"http://qiniu.waite.wang/image-20230529224726314.png\"\u003e\u003c/p\u003e","title":"七牛云 + Typora + PicGo"},{"content":"pinia需要使用pinia-plugin-persistedstate插件来进行数据的存储 插件官网地址： https://prazdevs.github.io/pinia-plugin-persistedstate/guide/config.html\n安装以及使用 pnpm i pinia-plugin-persistedstate npm i pinia-plugin-persistedstate yarn add pinia-plugin-persistedstate import { createPinia } from \u0026#39;pinia\u0026#39; import piniaPluginPersistedstate from \u0026#39;pinia-plugin-persistedstate\u0026#39; const pinia = createPinia() pinia.use(piniaPluginPersistedstate) 关于全部缓存及部分缓存的说明 （1）将store的state中的全部数据进行缓存，直接在state同级下面添加persist对象\n此时，默认将数据存放在浏览器的SessionStorage中，key为store的名称，value为该store中所有的数据\n（2）将store的state中的数据进行部分缓存 此时需要在persist中添加strategies数组，\n每个元素的key是想要储存的数据变量名（在state中定义的），storage可以写sessionStorage或者localStorage，此时，sessionStorage中的key就是变量名，value就是该变量的值\n","permalink":"https://waite.wang/posts/web/pinia-plugin-persistedstate/","summary":"\u003cp\u003epinia需要使用pinia-plugin-persistedstate插件来进行数据的存储\n插件官网地址：\n\u003ca href=\"https://prazdevs.github.io/pinia-plugin-persistedstate/guide/config.html\"\u003ehttps://prazdevs.github.io/pinia-plugin-persistedstate/guide/config.html\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"安装以及使用\"\u003e安装以及使用\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epnpm i pinia-plugin-persistedstate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003enpm i pinia-plugin-persistedstate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eyarn add pinia-plugin-persistedstate\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-typescript\" data-lang=\"typescript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nx\"\u003ecreatePinia\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"kr\"\u003efrom\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;pinia\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003eimport\u003c/span\u003e \u003cspan class=\"nx\"\u003epiniaPluginPersistedstate\u003c/span\u003e \u003cspan class=\"kr\"\u003efrom\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;pinia-plugin-persistedstate\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003epinia\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003ecreatePinia\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003epinia\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003euse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003epiniaPluginPersistedstate\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"关于全部缓存及部分缓存的说明\"\u003e关于全部缓存及部分缓存的说明\u003c/h2\u003e\n\u003cp\u003e（1）将store的state中的全部数据进行缓存，直接在state同级下面添加persist对象\u003c/p\u003e","title":"Pinia 数据持久化储存（pinia-plugin-persistedstate）"},{"content":" 本文章来源于王红元老师（coderwhy）的 Vue3 + Ts 课程第二章节 - Vue3 基本指令附上链接：https//ke.qq.com/course/3453141 permalink: /archives/vue3-ji-ben-zhi-ling-er\nVue3 基本指令 VSCode 代码片段 我们在前面练习Vue的过程中，有些代码片段是需要经常写的，我们再VSCode中我们可以生成一个代码片段，方 便我们快速生成。 VSCode中的代码片段有固定的格式，所以我们一般会借助于一个在线工具来完成。 具体的步骤如下： 第一步，复制自己需要生成代码片段的代码； 第二步，https://snippet-generator.app/在该网站中生成代码片段； 第三步，在VSCode中配置代码片段； 直接 Tab trigger 即可自动填充 模板语法 React的开发模式[了解] React使用的jsx,所以对应的代码都是编写的类似于js的一种语法 之后通过Babe将js编译成 React. create Element函数调用 function () { return \u0026lt;div\u0026gt;\u0026lt;/div\u0026gt; } vue也支持 jsx 的开发模式: 但是大多数情况下,使用基于HTML的模板语法 在模板中,允许开发者以声明式的方式将 DOM 和底层组件实例的数据绑定在-起;口在底层的实现中,vue将模板编译成虚拟DOM渲染函数 \u0026lt;template\u0026gt; \u0026lt;div @click v-bind v-once\u0026gt; {{}} \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; Mustache 语法 双大括号语法 如果我们希望把数据显示到模板（template）中，使用最多的语法是 “Mustache”语法 (双大括号) 的文本插值。 并且我们前端提到过，data返回的对象是有添加到Vue的响应式系统中； 当data中的数据发生改变时，对应的内容也会发生更新。 当然，Mustache中不仅仅可以是data中的属性，也可以是一个JavaScript的表达式。 mustache的使用 1. 基本使用 2. 表达式 3. 函数 4. 三元运算符 \u0026lt;template id=\u0026#34;my-app\u0026#34;\u0026gt; \u0026lt;!-- 1.mustache的基本使用 --\u0026gt; \u0026lt;h2\u0026gt;{{message}} - {{message}}\u0026lt;/h2\u0026gt; \u0026lt;!-- 2.是一个表达式 --\u0026gt; \u0026lt;h2\u0026gt;{{counter * 10}}\u0026lt;/h2\u0026gt; \u0026lt;h2\u0026gt;{{ message.split(\u0026#34; \u0026#34;).reverse().join(\u0026#34; \u0026#34;) }}\u0026lt;/h2\u0026gt; \u0026lt;!-- 3.也可以调用函数 --\u0026gt; \u0026lt;!-- 可以使用computed(计算属性) --\u0026gt; \u0026lt;h2\u0026gt;{{getReverseMessage()}}\u0026lt;/h2\u0026gt; \u0026lt;!-- 4.三元运算符 --\u0026gt; \u0026lt;h2\u0026gt;{{ isShow ? \u0026#34;哈哈哈\u0026#34;: \u0026#34;\u0026#34; }}\u0026lt;/h2\u0026gt; \u0026lt;button @click=\u0026#34;toggle\u0026#34;\u0026gt;切换\u0026lt;/button\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script src=\u0026#34;../js/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const App = { template: \u0026#39;#my-app\u0026#39;, data() { return { message: \u0026#34;Hello World\u0026#34;, counter: 100, isShow: true } }, methods: { getReverseMessage() { return this.message.split(\u0026#34; \u0026#34;).reverse().join(\u0026#34; \u0026#34;); }, toggle() { this.isShow = !this.isShow; } } } Vue.createApp(App).mount(\u0026#39;#app\u0026#39;); \u0026lt;/script\u0026gt; 以下为错误写法\n\u0026lt;!-- 错误用法 --\u0026gt; var name = \u0026#34;abc\u0026#34; ; \u0026lt;h2\u0026gt;{{var name = \u0026#34;abc\u0026#34;}}\u0026lt;/h2\u0026gt; \u0026lt;h2\u0026gt;{{ if(isShow) { return \u0026#34;哈哈哈\u0026#34; } }}\u0026lt;/h2\u0026gt; 不常用指令 v-once指令 v-once用于指定元素或者组件只渲染一次\n当数据发生变化时,元素或者组件以及其所有的子元素将视为静态内容并且跳过;\n该指令可以用于性能优化;\n\u0026lt;h2 v-once\u0026gt;{{counter}}\u0026lt;/h2\u0026gt; \u0026lt;button @click=\u0026#34;increment\u0026#34;\u0026gt;+1\u0026lt;/button\u0026gt; 如果是子节点的化，也只能渲染一次\n\u0026lt;div v-once\u0026gt; \u0026lt;h2\u0026gt;{{counter}}\u0026lt;/h2\u0026gt; \u0026lt;h2\u0026gt;{{message}}\u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;button @click=\u0026#34;increment\u0026#34;\u0026gt;+1\u0026lt;/button\u0026gt; 完整代码\n\u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;template id=\u0026#34;my-app\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;{{counter}}\u0026lt;/h2\u0026gt; \u0026lt;div v-once\u0026gt; \u0026lt;h2\u0026gt;{{counter}}\u0026lt;/h2\u0026gt; \u0026lt;h2\u0026gt;{{message}}\u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;button @click=\u0026#34;increment\u0026#34;\u0026gt;+1\u0026lt;/button\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script src=\u0026#34;../js/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const App = { template: \u0026#39;#my-app\u0026#39;, data() { return { counter: 100, message: \u0026#34;abc\u0026#34; } }, methods: { increment() { this.counter++; } } } Vue.createApp(App).mount(\u0026#39;#app\u0026#39;); \u0026lt;/script\u0026gt; v-html 默认情况下，如果我们展示的内容本身是 html 的，那么vue并不会对其进行特殊的解析。 如果我们希望这个内容被Vue可以解析出来，那么可以使用 v-html 来展示 \u0026lt;template id=\u0026#34;my-app\u0026#34;\u0026gt; \u0026lt;div\u0026gt;{{msg}}\u0026lt;/div\u0026gt; \u0026lt;div v-html=\u0026#34;msg\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script src=\u0026#34;../js/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const App = { template: \u0026#39;#my-app\u0026#39;, data() { return { msg: \u0026#39;\u0026lt;span style=\u0026#34;color:red; background: blue;\u0026#34;\u0026gt;哈哈哈\u0026lt;/span\u0026gt;\u0026#39; } } } Vue.createApp(App).mount(\u0026#39;#app\u0026#39;); \u0026lt;/script\u0026gt; v-text 用于更新元素的 textContent \u0026lt;h2 v-text=\u0026#34;message\u0026#34;\u0026gt;\u0026lt;/h2\u0026gt; \u0026lt;!-- 等价于 --\u0026gt; \u0026lt;h2\u0026gt;{{message}}\u0026lt;/h2\u0026gt; v-pre v-pre用于跳过元素和它的子元素的编译过程，显示原始的Mustache标签： 跳过不需要编译的节点，加快编译的速度 \u0026lt;template id=\u0026#34;my-app\u0026#34;\u0026gt; \u0026lt;h2 v-pre\u0026gt;{{message}}\u0026lt;/h2\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;!-- {{message}} --\u0026gt; v-cloak 用于隐藏尚未完成编译的 DOM 模板。 无需传入 详细信息 该指令只在没有构建步骤的环境下需要使用。 当使用直接在 DOM 中书写的模板时，可能会出现一种叫做“未编译模板闪现”的情况：用户可能先看到的是还没编译完成的双大括号标签，直到挂载的组件将它们替换为实际渲染的内容。 v-cloak 会保留在所绑定的元素上，直到相关组件实例被挂载后才移除。配合像 [v-cloak] { display: none } 这样的 CSS 规则，它可以在组件编译完毕前隐藏原始模板。 [v-cloak] { display: none; } \u0026lt;div v-cloak\u0026gt; {{ message }} \u0026lt;/div\u0026gt; 直到编译完成前，\u0026lt;div\u0026gt; 将不可见。\nv-bind 动态的绑定一个或多个 attribute，也可以是组件的 prop。\n缩写：: 或者 . (当使用 .prop 修饰符)\n期望：any (带参数) | Object (不带参数)\n参数：attrOrProp (可选的)\n修饰符\n.camel - 将短横线命名的 attribute 转变为驼峰式命名。 .prop - 强制绑定为 DOM property。3.2+ .attr - 强制绑定为 DOM attribute。3.2+ 用途\n当用于绑定 class 或 style attribute，v-bind 支持额外的值类型如数组或对象。详见下方的指南链接。\n在处理绑定时，Vue 默认会利用 in 操作符来检查该元素上是否定义了和绑定的 key 同名的 DOM property。如果存在同名的 property，则 Vue 会将它作为 DOM property 赋值，而不是作为 attribute 设置。这个行为在大多数情况都符合期望的绑定值类型，但是你也可以显式用 .prop 和 .attr 修饰符来强制绑定方式。有时这是必要的，特别是在和自定义元素打交道时。\n当用于组件 props 绑定时，所绑定的 props 必须在子组件中已被正确声明。\n当不带参数使用时，可以用于绑定一个包含了多个 attribute 名称-绑定值对的对象。\n用法\n动态地绑定一个或多个 attribute，或一个组件 prop 到表达式。 小知识: vue3 是允许template中有多个根元素\n\u0026lt;!-- vue2 template模板中只能有一个根元素 --\u0026gt; \u0026lt;!-- vue3 是允许template中有多个根元素 --\u0026gt; \u0026lt;template id=\u0026#34;my-app\u0026#34;\u0026gt; \u0026lt;!-- 1.v-bind的基本使用 --\u0026gt; \u0026lt;img v-bind:src=\u0026#34;imgUrl\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;a v-bind:href=\u0026#34;link\u0026#34;\u0026gt;百度一下\u0026lt;/a\u0026gt; \u0026lt;!-- 2.v-bind提供一个语法糖 : --\u0026gt; \u0026lt;img :src=\u0026#34;imgUrl\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;imgUrl\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; 基本使用 \u0026lt;template id=\u0026#34;my-app\u0026#34;\u0026gt; \u0026lt;!-- 1.v-bind的基本使用 --\u0026gt; \u0026lt;img v-bind:src=\u0026#34;imgUrl\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;a v-bind:href=\u0026#34;link\u0026#34;\u0026gt;百度一下\u0026lt;/a\u0026gt; \u0026lt;!-- 2.v-bind提供一个语法糖 : --\u0026gt; \u0026lt;img :src=\u0026#34;imgUrl\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;!-- 以下报错 --\u0026gt; \u0026lt;img src=\u0026#34;imgUrl\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; const App = { template: \u0026#39;#my-app\u0026#39;, data() { return { imgUrl: \u0026#34;https://avatars.githubusercontent.com/u/10335230?s=60\u0026amp;v=4\u0026#34;, link: \u0026#34;https://www.baidu.com\u0026#34; } } } Vue.createApp(App).mount(\u0026#39;#app\u0026#39;); \u0026lt;/script\u0026gt; 绑定 class 在开发中,有时候我们的元素 class也是动态的,比如 当数据为某个状态时,字体显示红色。 当数据另一个状态时,字体显示黑色 绑定class有两种方式： 对象语法 数组语法 对象语法 对象语法：我们可以传给 :class (v-bind:class 的简写) 一个对象，以动态地切换 class \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;template id=\u0026#34;my-app\u0026#34;\u0026gt; \u0026lt;div :class=\u0026#34;className\u0026#34;\u0026gt;哈哈哈哈\u0026lt;/div\u0026gt; \u0026lt;!-- 对象语法: {\u0026#39;active\u0026#39;: boolean} --\u0026gt; \u0026lt;div :class=\u0026#34;{\u0026#39;active\u0026#39;: isActive}\u0026#34;\u0026gt;呵呵呵呵\u0026lt;/div\u0026gt; \u0026lt;button @click=\u0026#34;toggle\u0026#34;\u0026gt;切换\u0026lt;/button\u0026gt; \u0026lt;!-- 也可以有多个键值对 --\u0026gt; \u0026lt;div :class=\u0026#34;{active: isActive, title: true}\u0026#34;\u0026gt;呵呵呵呵\u0026lt;/div\u0026gt; \u0026lt;!-- 默认的class和动态的class结合 --\u0026gt; \u0026lt;div class=\u0026#34;abc cba\u0026#34; :class=\u0026#34;{active: isActive, title: true}\u0026#34;\u0026gt; 呵呵呵呵 \u0026lt;/div\u0026gt; \u0026lt;!-- 将对象放到一个单独的属性中 --\u0026gt; \u0026lt;div class=\u0026#34;abc cba\u0026#34; :class=\u0026#34;classObj\u0026#34;\u0026gt;呵呵呵呵\u0026lt;/div\u0026gt; \u0026lt;!-- 将返回的对象放到一个methods(computed)方法中 --\u0026gt; \u0026lt;div class=\u0026#34;abc cba\u0026#34; :class=\u0026#34;getClassObj()\u0026#34;\u0026gt;呵呵呵呵\u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script src=\u0026#34;../js/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const App = { template: \u0026#34;#my-app\u0026#34;, data() { return { className: \u0026#34;why\u0026#34;, isActive: true, title: \u0026#34;abc\u0026#34;, classObj: { active: true, title: true }, }; }, methods: { toggle() { this.isActive = !this.isActive; this.classObj.active = !this.classObj.active; }, getClassObj() { return this.classObj; } }, }; Vue.createApp(App).mount(\u0026#34;#app\u0026#34;); \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .active { color: red; } \u0026lt;/style\u0026gt; \u0026lt;/body\u0026gt; 数组语法 绑定class – 数组语法 数组语法：我们可以把一个数组传给 :class，以应用一个 class 列表 \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;template id=\u0026#34;my-app\u0026#34;\u0026gt; \u0026lt;div :class=\u0026#34;[\u0026#39;abc\u0026#39;, title]\u0026#34;\u0026gt;哈哈哈哈\u0026lt;/div\u0026gt; \u0026lt;!-- class=\u0026#34;abc cba active\u0026#34; --\u0026gt; \u0026lt;div :class=\u0026#34;[\u0026#39;abc\u0026#39;, title, isActive ? \u0026#39;active\u0026#39;: \u0026#39;\u0026#39;]\u0026#34;\u0026gt;哈哈哈哈\u0026lt;/div\u0026gt; \u0026lt;!-- 可以嵌套对象语法 --\u0026gt; \u0026lt;div :class=\u0026#34;[\u0026#39;abc\u0026#39;, title, {active: isActive}]\u0026#34;\u0026gt;哈哈哈哈\u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script src=\u0026#34;../js/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const App = { template: \u0026#39;#my-app\u0026#39;, data() { return { message: \u0026#34;Hello World\u0026#34;, title: \u0026#34;cba\u0026#34;, isActive: true } } } Vue.createApp(App).mount(\u0026#39;#app\u0026#39;); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; 绑定 style 我们可以利用 v-bind:style 来绑定一些CSS内联样式 这次因为某些样式我们需要根据数据动态来决定 比如某段文字的颜色，大小等等 CSS property 名可以用驼峰式 (camelCase) 或短横线分隔 (kebab-case，记得用引号括起来) 来命名 绑定class有两种方式 对象语法 数组语法 CSS property 名短横线分隔 (kebab-case，记得用引号括起来)\n对象语法 \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;template id=\u0026#34;my-app\u0026#34;\u0026gt; \u0026lt;!-- :style=\u0026#34;{cssPropertyName: cssPropertyValue}\u0026#34; --\u0026gt; \u0026lt;div :style=\u0026#34;{color: finalColor, \u0026#39;font-size\u0026#39;: \u0026#39;30px\u0026#39;}\u0026#34;\u0026gt;哈哈哈哈\u0026lt;/div\u0026gt; \u0026lt;div :style=\u0026#34;{color: finalColor, fontSize: \u0026#39;30px\u0026#39;}\u0026#34;\u0026gt;哈哈哈哈\u0026lt;/div\u0026gt; \u0026lt;div :style=\u0026#34;{color: finalColor, fontSize: finalFontSize + \u0026#39;px\u0026#39;}\u0026#34;\u0026gt;哈哈哈哈\u0026lt;/div\u0026gt; \u0026lt;!-- 绑定一个data中的属性值, 并且是一个对象 --\u0026gt; \u0026lt;div :style=\u0026#34;finalStyleObj\u0026#34;\u0026gt;呵呵呵呵\u0026lt;/div\u0026gt; \u0026lt;!-- 调用一个方法 --\u0026gt; \u0026lt;div :style=\u0026#34;getFinalStyleObj()\u0026#34;\u0026gt;呵呵呵呵\u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script src=\u0026#34;../js/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const App = { template: \u0026#39;#my-app\u0026#39;, data() { return { message: \u0026#34;Hello World\u0026#34;, finalColor: \u0026#39;red\u0026#39;, finalFontSize: 50, finalStyleObj: { \u0026#39;font-size\u0026#39;: \u0026#39;50px\u0026#39;, fontWeight: 700, backgroundColor: \u0026#39;red\u0026#39; } } }, methods: { getFinalStyleObj() { return { \u0026#39;font-size\u0026#39;: \u0026#39;50px\u0026#39;, fontWeight: 700, backgroundColor: \u0026#39;red\u0026#39; } } } } Vue.createApp(App).mount(\u0026#39;#app\u0026#39;); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; 数组语法 \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;template id=\u0026#34;my-app\u0026#34;\u0026gt; \u0026lt;div :style=\u0026#34;[style1Obj, style2Obj]\u0026#34;\u0026gt;哈哈哈\u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script src=\u0026#34;../js/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const App = { template: \u0026#39;#my-app\u0026#39;, data() { return { message: \u0026#34;Hello World\u0026#34;, style1Obj: { color: \u0026#39;red\u0026#39;, fontSize: \u0026#39;30px\u0026#39; }, style2Obj: { textDecoration: \u0026#34;underline\u0026#34; } } } } Vue.createApp(App).mount(\u0026#39;#app\u0026#39;); \u0026lt;/script\u0026gt; \u0026lt;/body 动态绑定属性 在某些情况下，我们属性的名称可能也不是固定的 前端我们无论绑定src、href、class、style，属性名称都是固定的 如果属性名称不是固定的，我们可以使用 :[属性名]=“值” 的格式来定义 这种绑定的方式，我们称之为 动态绑定属性；如下: \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;template id=\u0026#34;my-app\u0026#34;\u0026gt; \u0026lt;!-- \u0026lt;div cba=\u0026#34;kobe\u0026#34;\u0026gt;哈哈哈\u0026lt;/div\u0026gt; --\u0026gt; \u0026lt;div :[name]=\u0026#34;value\u0026#34;\u0026gt;哈哈哈\u0026lt;/div\u0026gt; \u0026lt;img :src=\u0026#34;\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;a :href=\u0026#34;\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;div :class\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script src=\u0026#34;../js/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const App = { template: \u0026#39;#my-app\u0026#39;, data() { return { name: \u0026#34;cba\u0026#34;, value: \u0026#34;kobe\u0026#34; } } } Vue.createApp(App).mount(\u0026#39;#app\u0026#39;); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; 属性直接绑定一个对象 如果我们希望将一个对象的所有属性，绑定到元素上的所有属性，应该怎么做呢？ 非常简单，我们可以直接使用 v-bind 绑定一个 对象 案例：info对象会被拆解成div的各个属性 \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;template id=\u0026#34;my-app\u0026#34;\u0026gt; \u0026lt;!-- \u0026lt;div name=\u0026#34;why\u0026#34; age=\u0026#34;18\u0026#34; height=\u0026#34;1.88\u0026#34;\u0026gt;哈哈哈哈\u0026lt;/div\u0026gt; --\u0026gt; \u0026lt;div v-bind=\u0026#34;info\u0026#34;\u0026gt;哈哈哈哈\u0026lt;/div\u0026gt; \u0026lt;div :=\u0026#34;info\u0026#34;\u0026gt;哈哈哈哈\u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script src=\u0026#34;../js/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const App = { template: \u0026#39;#my-app\u0026#39;, data() { return { info: { name: \u0026#34;why\u0026#34;, age: 18, height: 1.88 } } } } Vue.createApp(App).mount(\u0026#39;#app\u0026#39;); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; v-on v-on绑定事件\n前面我们绑定了元素的内容和属性，在前端开发中另外一个非常重要的特性就是交互。 在前端开发中，我们需要经常和用户进行各种各样的交互 这个时候，我们就必须监听用户发生的事件，比如点击、拖拽、键盘事件等等 在Vue中如何监听事件呢？使用v-on指令。 v-on的用法\n缩写：@ 预期：Function | Inline Statement | Object 参数：event p 修饰符： .stop - 调用 event.stopPropagation()。 .prevent - 调用 event.preventDefault()。 .capture - 添加事件侦听器时使用 capture 模式。 .self - 只当事件是从侦听器绑定的元素本身触发时才触发回调。 .{keyAlias} - 仅当事件是从特定键触发时才触发回调。 .once - 只触发一次回调。 .left - 只当点击鼠标左键时触发。 .right - 只当点击鼠标右键时触发。 .middle - 只当点击鼠标中键时触发。 .passive - { passive: true } 模式添加侦听器 用法：绑定事件监听 event 事件可以参考 https://developer.mozilla.org/en-US/docs/Web/Events\n基本使用 \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;template id=\u0026#34;my-app\u0026#34;\u0026gt; \u0026lt;!-- 完整写法: v-on:监听的事件=\u0026#34;methods中方法\u0026#34; --\u0026gt; \u0026lt;button v-on:click=\u0026#34;btn1Click\u0026#34;\u0026gt;按钮1\u0026lt;/button\u0026gt; \u0026lt;div class=\u0026#34;area\u0026#34; v-on:mousemove=\u0026#34;mouseMove\u0026#34;\u0026gt;div\u0026lt;/div\u0026gt; \u0026lt;!-- 语法糖 --\u0026gt; \u0026lt;button @click=\u0026#34;btn1Click\u0026#34;\u0026gt;按钮1\u0026lt;/button\u0026gt; \u0026lt;!-- 绑定一个表达式: inline statement --\u0026gt; \u0026lt;button @click=\u0026#34;counter++\u0026#34;\u0026gt;{{counter}}\u0026lt;/button\u0026gt; \u0026lt;!-- 绑定一个对象 --\u0026gt; \u0026lt;div class=\u0026#34;area\u0026#34; v-on=\u0026#34;{click: btn1Click, mousemove: mouseMove}\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;area\u0026#34; @=\u0026#34;{click: btn1Click, mousemove: mouseMove}\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script src=\u0026#34;../js/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const App = { template: \u0026#39;#my-app\u0026#39;, data() { return { message: \u0026#34;Hello World\u0026#34;, counter: 100 } }, methods: { btn1Click() { console.log(\u0026#34;按钮1发生了点击\u0026#34;); }, mouseMove() { console.log(\u0026#34;鼠标移动\u0026#34;); } } } Vue.createApp(App).mount(\u0026#39;#app\u0026#39;); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; 参数传递 当通过methods中定义方法，以供 @click调用时，需要注意参数问题： 情况一：如果该方法不需要额外参数，那么方法后的()可以不添加。 但是注意：如果方法本身中有一个参数，那么会默认将原生事件event参数传递进去 情况二：如果需要同时传入某个参数，同时需要 event 时，可以通过 $event 传入事件。 \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;template id=\u0026#34;my-app\u0026#34;\u0026gt; \u0026lt;!-- 默认传入event对象, 可以在方法中获取 --\u0026gt; \u0026lt;button @click=\u0026#34;btn1Click\u0026#34;\u0026gt;按钮1\u0026lt;/button\u0026gt; \u0026lt;!-- $event可以获取到事件发生时的事件对象 --\u0026gt; \u0026lt;button @click=\u0026#34;btn2Click($event, \u0026#39;coderwhy\u0026#39;, 18)\u0026#34;\u0026gt;按钮2\u0026lt;/button\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script src=\u0026#34;../js/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const App = { template: \u0026#39;#my-app\u0026#39;, data() { return { message: \u0026#34;Hello World\u0026#34; } }, methods: { btn1Click(event) { console.log(event); }, btn2Click(event, name, age) { console.log(name, age, event); } } } Vue.createApp(App).mount(\u0026#39;#app\u0026#39;); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; v-on 的修饰符 v-on支持修饰符，修饰符相当于对事件进行了一些特殊的处理： .stop - 调用 event.stopPropagation()。 .prevent - 调用 event.preventDefault()。 .capture - 添加事件侦听器时使用 capture 模式。 .self - 只当事件是从侦听器绑定的元素本身触发时才触发回调。 .{keyAlias} - 仅当事件是从特定键触发时才触发回调。 .once - 只触发一次回调。 .left - 只当点击鼠标左键时触发。 .right - 只当点击鼠标右键时触发。 .middle - 只当点击鼠标中键时触发。 .passive - { passive: true } 模式添加侦听器 stopPropagation 是一个事件修饰符，用于阻止事件冒泡。在 Vue.js 中，当一个元素上的事件被触发时，它会先执行该元素上的事件处理函数，然后再冒泡到该元素的父元素，继续执行父元素的事件处理函数。使用 stopPropagation 可以阻止事件继续冒泡到父元素。在给元素绑定事件时，可以使用 @click.stop 来阻止 click 事件冒泡到父元素。\n\u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;template id=\u0026#34;my-app\u0026#34;\u0026gt; \u0026lt;div @click=\u0026#34;divClick\u0026#34;\u0026gt; \u0026lt;button @click=\u0026#34;btnClick\u0026#34;\u0026gt;按钮\u0026lt;/button\u0026gt; \u0026lt;button @click.stop=\u0026#34;btnClick\u0026#34;\u0026gt;按钮\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; @keyup.enter=\u0026#34;enterKeyup\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script src=\u0026#34;../js/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const App = { template: \u0026#39;#my-app\u0026#39;, data() { return { message: \u0026#34;Hello World\u0026#34; } }, methods: { divClick() { console.log(\u0026#34;divClick\u0026#34;); }, btnClick() { console.log(\u0026#39;btnClick\u0026#39;); }, enterKeyup(event) { console.log(\u0026#34;keyup\u0026#34;, event.target.value); } } } Vue.createApp(App).mount(\u0026#39;#app\u0026#39;); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; 条件渲染 在某些情况下，我们需要根据当前的条件决定某些元素或组件是否渲染，这个时候我们就需要进行条件判断了。 Vue提供了下面的指令来进行条件判断： v-if v-else v-else-if v-show 基本使用 v-if、v-else、v-else-if用于根据条件来渲染某一块的内容： 这些内容只有在条件为true时，才会被渲染出来； 这三个指令与JavaScript的条件语句if、else、else if类似； \u0026lt;template id=\u0026#34;my-app\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;score\u0026#34;\u0026gt; \u0026lt;h2 v-if=\u0026#34;score \u0026gt; 90\u0026#34;\u0026gt;优秀\u0026lt;/h2\u0026gt; \u0026lt;h2 v-else-if=\u0026#34;score \u0026gt; 60\u0026#34;\u0026gt;良好\u0026lt;/h2\u0026gt; \u0026lt;h2 v-else\u0026gt;不及格\u0026lt;/h2\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script src=\u0026#34;../js/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const App = { template: \u0026#39;#my-app\u0026#39;, data() { return { score: 95 } } } Vue.createApp(App).mount(\u0026#39;#app\u0026#39;); \u0026lt;/script\u0026gt; template 和 v-if 结合使用 v-if的渲染原理： v-if是惰性的； 当条件为false时，其判断的内容完全不会被渲染或者会被销毁掉； 当条件为true时，才会真正渲染条件块中的内容; template元素 因为v-if是一个指令，所以必须将其添加到一个元素上： 但是如果我们希望切换的是多个元素呢？ 此时我们渲染div，但是我们并不希望div这种元素被渲染； 这个时候，我们可以选择使用template； template元素可以当做不可见的包裹元素，并且在v-if上使用，但是最终template不会被渲染出来： 有点类似于小程序中的block \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;template id=\u0026#34;my-app\u0026#34;\u0026gt; \u0026lt;template v-if=\u0026#34;isShowHa\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;哈哈哈哈\u0026lt;/h2\u0026gt; \u0026lt;h2\u0026gt;哈哈哈哈\u0026lt;/h2\u0026gt; \u0026lt;h2\u0026gt;哈哈哈哈\u0026lt;/h2\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-else\u0026gt; \u0026lt;h2\u0026gt;呵呵呵呵\u0026lt;/h2\u0026gt; \u0026lt;h2\u0026gt;呵呵呵呵\u0026lt;/h2\u0026gt; \u0026lt;h2\u0026gt;呵呵呵呵\u0026lt;/h2\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;button @click=\u0026#34;isShowHa = !isShowHa\u0026#34;\u0026gt;切换\u0026lt;/button\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script src=\u0026#34;../js/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const App = { template: \u0026#39;#my-app\u0026#39;, data() { return { isShowHa: true } } } Vue.createApp(App).mount(\u0026#39;#app\u0026#39;); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; v-show v-show和v-if的用法看起来是一致的，也是根据一个条件决定是否显示元素或者组件 \u0026lt;template id=\u0026#34;my-app\u0026#34;\u0026gt; \u0026lt;h2 v-show=\u0026#34;isShow\u0026#34;\u0026gt;哈哈哈哈\u0026lt;/h2\u0026gt; \u0026lt;/template\u0026gt; v-show和v-if的区别 首先，在用法上的区别： v-show是不支持template； v-show不可以和v-else一起使用； 其次，本质的区别： v-show元素无论是否需要显示到浏览器上，它的DOM实际都是有渲染的，只是通过CSS的display属性来进行 切换； v-if当条件为false时，其对应的元素压根不会被渲染到DOM中； 开发中如何进行选择呢？ 如果我们的元素需要在显示和隐藏之间频繁的切换，那么使用v-show； 如果不会频繁的发生切换，那么使用v-if； \u0026lt;template id=\u0026#34;my-app\u0026#34;\u0026gt; \u0026lt;h2 v-if=\u0026#34;isShow\u0026#34;\u0026gt;哈哈哈哈\u0026lt;/h2\u0026gt; \u0026lt;h2 v-show=\u0026#34;isShow\u0026#34;\u0026gt;呵呵呵呵\u0026lt;/h2\u0026gt; \u0026lt;/template\u0026gt; 列表渲染 在真实开发中，我们往往会从服务器拿到一组数据，并且需要对其进行渲染。 这个时候我们可以使用v-for来完成； v-for类似于JavaScript的for循环，可以用于遍历一组数据； 基本使用 n v-for的基本格式是 \u0026ldquo;item in 数组\u0026rdquo;：\n数组通常是来自data或者prop，也可以是其他方式； item是我们给每项元素起的一个别名，这个别名可以自定来定义； 我们知道，在遍历一个数组的时候会经常需要拿到数组的索引：\n如果我们需要索引，可以使用格式： \u0026ldquo;(item, index) in 数组\u0026rdquo;； 注意上面的顺序：数组元素项item是在前面的，索引项index是在后面的； v-for支持的类型\nv-for也支持遍历对象，并且支持有一二三个参数： 一个参数： \u0026ldquo;value in object\u0026rdquo;; 二个参数： \u0026ldquo;(value, key) in object\u0026rdquo;; 三个参数： \u0026ldquo;(value, key, index) in object\u0026rdquo;; v-for同时也支持数字的遍历： 每一个item都是一个数字； \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;template id=\u0026#34;my-app\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;电影列表\u0026lt;/h2\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;!-- 遍历数组 --\u0026gt; \u0026lt;li v-for=\u0026#34;(movie, index) in movies\u0026#34;\u0026gt;{{index+1}}.{{movie}}\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;h2\u0026gt;个人信息\u0026lt;/h2\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;!-- 遍历对象 --\u0026gt; \u0026lt;li v-for=\u0026#34;(value, key, index) in info\u0026#34;\u0026gt;{{value}}-{{key}}-{{index}}\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;h2\u0026gt;遍历数字\u0026lt;/h2\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li v-for=\u0026#34;(num, index) in 10\u0026#34;\u0026gt;{{num}}-{{index}}\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script src=\u0026#34;../js/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const App = { template: \u0026#39;#my-app\u0026#39;, data() { return { movies: [ \u0026#34;星际穿越\u0026#34;, \u0026#34;盗梦空间\u0026#34;, \u0026#34;大话西游\u0026#34;, \u0026#34;教父\u0026#34;, \u0026#34;少年派\u0026#34; ], info: { name: \u0026#34;why\u0026#34;, age: 18, height: 1.88 } } } } Vue.createApp(App).mount(\u0026#39;#app\u0026#39;); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; template元素使用 类似于v-if，你可以使用 template 元素来循环渲染一段包含多个元素的内容： 我们使用template来对多个元素进行包裹，而不是使用div来完成； \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;template id=\u0026#34;my-app\u0026#34;\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;template v-for=\u0026#34;(value, key) in info\u0026#34;\u0026gt; \u0026lt;li\u0026gt;{{key}}\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;{{value}}\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;divider\u0026#34;\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script src=\u0026#34;../js/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const App = { template: \u0026#39;#my-app\u0026#39;, data() { return { info: { name: \u0026#34;why\u0026#34;, age: 18, height: 1.88 } } } } Vue.createApp(App).mount(\u0026#39;#app\u0026#39;); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; 数组更新检测 Vue 将被侦听的数组的变更方法进行了包裹，所以它们也将会触发视图更新。这些被包裹过的方法包括： push() pop() shift() unshift() splice() sort() reverse() 替换数组的方法 上面的方法会直接修改原来的数组，但是某些方法不会替换原来的数组，而是会生成新的数组，比如 filter()、 concat() 和 slice()。 \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;template id=\u0026#34;my-app\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;电影列表\u0026lt;/h2\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li v-for=\u0026#34;(movie, index) in movies\u0026#34;\u0026gt;{{index+1}}.{{movie}}\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;newMovie\u0026#34;\u0026gt; \u0026lt;button @click=\u0026#34;addMovie\u0026#34;\u0026gt;添加电影\u0026lt;/button\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script src=\u0026#34;../js/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const App = { template: \u0026#39;#my-app\u0026#39;, data() { return { newMovie: \u0026#34;\u0026#34;, movies: [ \u0026#34;星际穿越\u0026#34;, \u0026#34;盗梦空间\u0026#34;, \u0026#34;大话西游\u0026#34;, \u0026#34;教父\u0026#34;, \u0026#34;少年派\u0026#34; ] } }, methods: { addMovie() { this.movies.push(this.newMovie); this.newMovie = \u0026#34;\u0026#34;; // filter 是过滤的意思, 下文中的代码的意思是: 过滤掉长度小于等于2的电影 // this.movies = this.movies.filter(item =\u0026gt; item.length \u0026gt; 2); } } } Vue.createApp(App).mount(\u0026#39;#app\u0026#39;); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; v-for 中的 key 是什么作用？ https://cn.vuejs.org/api/built-in-special-attributes.html#key\n在使用v-for进行列表渲染时，我们通常会给元素或者组件绑定一个key属性。\n这个key属性有什么作用呢？我们先来看一下官方的解释：\nkey属性主要用在Vue的虚拟DOM算法，在新旧nodes对比时辨识VNodes；\n如果不使用key，Vue会使用一种最大限度减少动态元素并且尽可能的尝试就地修改/复用相同类型元素的算法；\n而使用key时，它会基于key的变化重新排列元素顺序，并且会移除/销毁key不存在的元素；\n官方的解释对于初学者来说并不好理解，比如下面的问题：\n什么是新旧nodes，什么是VNode？ 没有key的时候，如何尝试修改和复用的？ 有key的时候，如何基于key重新排列的？ 认识 VNode 我们先来解释一下VNode的概念： 因为目前我们还没有比较完整的学习组件的概念，所以目前我们先理解HTML元素创建出来的VNode； VNode的全称是Virtual Node，也就是虚拟节点； 事实上，无论是组件还是元素，它们最终在Vue中表示出来的都是一个个VNode； VNode的本质是一个JavaScript的对象；可以用于描述某一个标签/ 元素 的样子 好处: 多平台的渲染, 跨平台(主要好处) 虚拟 DOM 如果我们不只是一个简单的div，而是有一大堆的元素，那么它们应该会形成一个 VNode Tree 虚拟 DOM 与 真实 DOM 不一定一一对应 插入 F 的案例 我们先来看一个案例：这个案例是当我点击按钮时会在中间插入一个f；\n我们可以确定的是，这次更新对于ul和button是不需要进行更新，需要更新的是我们 li 的列表：\n在Vue中，对于相同父元素的子元素节点并不会重新渲染整个列 表；\n因为对于列表中 a、b、c、d它们都是没有变化的；\n在操作真实DOM的时候，我们只需要在中间插入一个 f 的 li 即可；\n\u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;template id=\u0026#34;my-app\u0026#34;\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li v-for=\u0026#34;item in letters\u0026#34; :key=\u0026#34;item\u0026#34;\u0026gt;{{item}}\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;button @click=\u0026#34;insertF\u0026#34;\u0026gt;插入F元素\u0026lt;/button\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script src=\u0026#34;../js/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const App = { template: \u0026#39;#my-app\u0026#39;, data() { return { letters: [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;d\u0026#39;] } }, methods: { insertF() { this.letters.splice(2, 0, \u0026#39;f\u0026#39;) } } } Vue.createApp(App).mount(\u0026#39;#app\u0026#39;); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; 那么Vue中对于列表的更新究竟是如何操作的呢？ Vue事实上会对于有key和没有key会调用两个不同的方法； Vue源码对于key的判断 有key，那么就使用 patchKeyedChildren方法； 没有key，那么久使用 patchUnkeyedChildren方法； diff算法: diff 算法是指生成更新补丁的方式,主要应用于虚拟 DOM 树变化后,更新真实 DOM。所以 diff 算法一定存在这样一个过程:触发更新 → 生成补丁 → 应用补丁。\n没有key的操作过程 我们会发现上面的diff算法效率并不高： c和d来说它们事实上并不需要有任何的改动； 但是因为我们的c被f所使用了，所有后续所有的内容都要一次进行改动，并且最后进行新增； 有key的操作过程-diff算法 第一步的操作是从头开始进行遍历、比较： a和b是一致的会继续进行比较； c和f因为key不一致，所以就会break跳出循环 第二步的操作是从尾部开始进行遍历、比较 第三步是如果旧节点遍历完毕，但是依然有新的节点，那么就新增节点： 第四步是如果新的节点遍历完毕，但是依然有旧的节点，那么就移除旧节点： 第五步是最特色的情况，中间还有很多未知的或者乱序的节点： 有无key的结论 有无key的结论 所以我们可以发现，Vue在进行diff算法的时候，会尽量利用我们的key来进行优化操作： 在没有key的时候我们的效率是非常低效的； 在进行插入或者重置顺序的时候，保持相同的key可以让diff算法更加的高效； ","permalink":"https://waite.wang/posts/web/vue3-learn-2/","summary":"\u003cblockquote\u003e\n\u003cp\u003e本文章来源于王红元老师（coderwhy）的 Vue3 + Ts 课程第二章节 - Vue3 基本指令附上链接：https//ke.qq.com/course/3453141\npermalink: /archives/vue3-ji-ben-zhi-ling-er\u003c/p\u003e","title":"Vue3 基本指令(二)"},{"content":" 本文章来源于王红元老师（coderwhy）的 Vue3 + Ts 课程第二章节 - Vue3 基本指令附上链接：https//ke.qq.com/course/3453141 permalink: /archives/vue3-ji-ben-zhi-ling-er\n邂逅Vue3开发 认识 Vue 什么是 Vue Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。 全程是Vue.js或者Vuejs； 什么是渐进式框架呢？表示我们可以在项目中一点点来引入和使用Vue，而不一定需要全部使用Vue来开发整个 项目； Vue3带来的变化 源码通过monorepo的形式来管理源代码： Mono：单个 Repo：repository仓库 主要是将许多项目的代码存储在同一个 repository 中； 这样做的目的是多个包本身相互独立，可以有自己的功能逻辑、单元测试等，同时又在同一个仓库下方便管理； 而且模块划分的更加清晰，可维护性、可扩展性更强； 源码使用TypeScript来进行重写： 在Vue2.x的时候，Vue使用 Flow 来进行类型检测； 在Vue3.x的时候，Vue的源码全部使用 TypeScript 来进行重构，并且 Vue 本身对 TypeScript 支持也更好了； 性能方面 使用Proxy进行数据劫持 在 Vue2.x 的时候，Vue2 是使用 Object.defineProperty 来劫持数据的 getter 和 setter 方法的； 这种方式一致存在一个缺陷就是当给对象添加或者删除属性时，是无法劫持和监听的； 所以在 Vue2.x 的时候，不得不提供一些特殊的API，比如 $set 或 $delete ，事实上都是一些 hack 方法，也增加了 开发者学习新的API的成本； 而在 Vue3.x 开始，Vue 使用 Proxy 来实现数据的劫持 删除了一些不必要的API： 移除了实例上的 $on , $off 和 $once； 移除了一些特性：如filter、内联模板等； 包括编译方面的优化： 生成Block Tree、Slot编译优化、diff算法优化； 新的API 由Options API 到 Composition API： 在 Vue2.x 的时候，我们会通过 Options API 来描述组件对象； Options API 包括data、props、methods、computed、生命周期等等这些选项； 存在比较大的问题是多个逻辑可能是在不同的地方： 比如created中会使用某一个method来修改data的数据，代码的内聚性非常差； Composition API可以将 相关联的代码 放到同一处 进行处理，而不需要在多个Options之间寻找； Hooks函数增加代码的复用性： 在Vue2.x的时候，我们通常通过mixins在多个组件之间共享逻辑；但是有一个很大的缺陷就是 mixins也是由一大堆的Options组成的，并且多个mixins会存在命名冲突的问题； 在Vue3.x中，我们可以通过Hook函数，来将一部分独立的逻辑抽取出去，并且它们还可以做到是响应式的； 如何使用 Vue 方式一：在页面中通过CDN的方式来引入； 方式二：下载Vue的JavaScript文件，并且自己手动引入； 方式三：通过npm包管理工具安装使用它； 方式四：直接通过Vue CLI创建项目，并且使用它； CDN 引入 \u0026lt;script src=\u0026#34;https://unpkg.com/vue@next\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 下载和引入 下载Vue的源码，可以直接打开CDN的链接： 打开链接，复制其中所有的代码； 创建一个新的文件，比如vue.js，将代码复制到其中； \u0026lt;script src=\u0026#34;../js/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 声明式编程和命令式编程 原生开发和Vue开发的模式和特点,我们会发现是完全不同的,这里其实涉及到两种不同的编程范式命令式编程和声明式编程 命令式编程关注的是“ how to do”,声明式编程关注的是\u0026quot; what to do\u0026quot;,由框架(机器)完成\u0026quot;how\u0026quot;的过程 MVVM模型 MVC和MVVM都是一种软件的体系结构 MVC是 Model-View-Controller的简称,是在前期被使用非常框架的架构模式,比如iS、前端 MVVM是 Model-View- ViewMode的简称,是目前非常流行的架构模式 通常情况下,我们也经常称vue是一个MVVM的框架 vue官方其实有说明,vue虽然并没有完全遵守MVVM的模型,但是整个设计是受到它的启发的 template属性 在使用 createApp的时候,我们传入了一个对象,接下来我们详细解析一下之前传入的属性分别代表什么含义。 template属性:表示的是Vue需要帮助我们渲染的模板信息 目前我们看到它里面有很多的HTML标签,这些标签会替换掉我们挂载到的元素(比如id为app的dⅳv)的innerHTML 模板中有一些奇怪的语法,比如{},比如@ )click,这些都是模板特有的语法 但是这个模板的写法有点过于别扭了,并且IDE很有可能没有任何提示,阻碍我们编程的效率 vue提供了两种方式: 方式一:使用 script标签,并且标记它的类型为 X-template; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;hhhh\u0026lt;/div\u0026gt; \u0026lt;script type=\u0026#34;x-template\u0026#34; id=\u0026#34;why\u0026#34;\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;{{message}}\u0026lt;/h2\u0026gt; \u0026lt;h2\u0026gt;{{counter}}\u0026lt;/h2\u0026gt; \u0026lt;button @click=\u0026#39;increment\u0026#39;\u0026gt;+1\u0026lt;/button\u0026gt; \u0026lt;button @click=\u0026#39;decrement\u0026#39;\u0026gt;-1\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;../js//Vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; Vue.createApp({ template: \u0026#39;#why\u0026#39;, data: function(){ return{ message:\u0026#34;Hello World\u0026#34;, counter: 100 } }, methods: { increment(){ this.counter++ }, decrement(){ this.counter-- } } }).mount(\u0026#34;#app\u0026#34;) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; 方式二:使用任意标签(通常使用 template标签,因为不会被浏览器渲染),设置id;v template元素是一种用于保存客户端内容的机制,该内容再加载页面时不会被呈现,但随后可以在运行时使用 JavaScript 实例化 \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;template id=\u0026#34;why\u0026#34;\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;{{message}}\u0026lt;/h2\u0026gt; \u0026lt;h2\u0026gt;{{counter}}\u0026lt;/h2\u0026gt; \u0026lt;button @click=\u0026#39;increment\u0026#39;\u0026gt;+1\u0026lt;/button\u0026gt; \u0026lt;button @click=\u0026#39;decrement\u0026#39;\u0026gt;-1\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script src=\u0026#34;../js//Vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; Vue.createApp({ template: \u0026#39;#why\u0026#39;, data: function(){ return{ message:\u0026#34;Hello World\u0026#34;, counter: 100 } }, methods: { increment(){ this.counter++ }, decrement(){ this.counter-- } } }).mount(\u0026#34;#app\u0026#34;) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; data属性 data属性是传入一个函数,并且该函数需要返回一个对象\n在Vue2x的时候,也可以传入一个对象(虽然官方推荐是一个函数); 在Vue3x的时候,必须传入一个函数,否则就会直接在浏览器中报错 data中返回的对象会被vue的响应式系统劫持,之后对该对象的修改或者访问都会在劫持中被处理\n所以我们在 template中通过{ counter} 访问 counter,可以从对象中获取到数据 所以我们修改 counter的值时, template中的{ counter)也会发生改变; methods属性（重点） methods属性是一个对象,通常我们会在这个对象中定义很多的方法\n这些方法可以被绑定到 template模板中; 在该方法中,我们可以使用this关键字来直接访问到data中返回的对象的属性; 问题：官方文档有这个描述，即不能使用箭头函数\n为什么不能使用箭头函数(VUE3.0)？\n我们在methods中要使用data返回对象中的数据：\n那么这个this是必须有值的，并且应该可以通过this获取到data返回对象中的数据。 那么我们这个this能不能是window呢？\n不可以是window，因为window中我们无法获取到data返回对象中的数据； 但是如果我们使用箭头函数，那么这个this就会是window了； 为什么是window呢？\n这里涉及到箭头函数使用this的查找规则，它会在自己的上层作用于中来查找this； 最终刚好找到的是script作用于中的this，所以就是window； this到底是如何查找和绑定的呢？\n前端面试之彻底搞懂this指向 不使用箭头函数的情况下，this到底指向什么\n事实上Vue的源码当中就是对methods中的所有函数进行了遍历，并且通过 bind 绑定了 this 具体看 https://mp.weixin.qq.com/s/hYm0JgBI25grNG_2sCRlTA\n// window 隐式绑定 foo(); const obj = { bar: foo }; obj.bar(); /* Window{} {bar: f()} */ const foo2 = () =\u0026gt; { console.log(this); } const obj2 = { bar: foo2 }; obj2.bar(); /* Window{} Window{} */ 如何阅读Vue源码 需要的环境 npm，yarn 操作步骤 安装yarn npm install yarn -g 在项目中配置yarn yarn install 在package.json中的dev后加上\u0026ndash;sourcemap 打包项目 yarn dev （在vue/dist文件夹下有两个文件，vue.global.js和vue.global.js.map） 在vue/examplex新建自己的文件夹以及测试demo 在demo中打下断点—debugger 在浏览器中打开调试面板，选择其中的source面板，查看执行对应的源码 ","permalink":"https://waite.wang/posts/web/vue3-learn-1/","summary":"\u003cblockquote\u003e\n\u003cp\u003e本文章来源于王红元老师（coderwhy）的 Vue3 + Ts 课程第二章节 - Vue3 基本指令附上链接：https//ke.qq.com/course/3453141\npermalink: /archives/vue3-ji-ben-zhi-ling-er\u003c/p\u003e","title":"邂逅 Vue3 开发(一)"},{"content":" title: Windows11家庭中文版系统安装Docker id: a293d46a-9b4e-4e42-8bbc-0bcec5c21662 date: 2023-09-24 22:29:15 auther: admin cover:\n安装到 D 盘(软链接) docker 默认安装路劲为 C:\\Program Files\\Docker docker 虚拟磁盘默认安装路劲为 C:\\Users\\\u0026lt;YourName\u0026gt;\\AppData\\Local\\Docker 用 管理员身份打开cmd窗口 执行如下命令 mklink /j \u0026#34;C:\\Program Files\\Docker\u0026#34; \u0026#34;D:\\Program Files\\Docker\u0026#34; 已经安装Docker，需要重新再安装一次。 安装后C盘下的Docker文件就只是一个软链接了，映射的真实路径在D盘Docker文件夹下(注意: 软链接后需要在相应目录创建文件夹, 不然后续安装会报错) Hyper-Vr 查看自己的系统, 如果你的系统跟我一样是window11家庭中文版，则会找不到Hyper-Vr，这时则需要自己创建，讲下述代码复制在txt文本里，并重命名为Hyper.cmd，右键以管理员方式运行，最后输入“Y”重启电脑后即可。\npushd \u0026#34;%~dp0\u0026#34; dir /b %SystemRoot%\\servicing\\Packages\\*Hyper-V*.mum \u0026gt;hyper-v.txt for /f %%i in (\u0026#39;findstr /i . hyper-v.txt 2^\u0026gt;nul\u0026#39;) do dism /online /norestart /add-package:\u0026#34;%SystemRoot%\\servicing\\Packages\\%%i\u0026#34; del hyper-v.txt Dism /online /enable-feature /featurename:Microsoft-Hyper-V-All /LimitAccess /ALL 找到控制面板\u0026ndash;程序\u0026ndash;程序和功能\u0026ndash;启用或关闭windows功能（或者电脑直接搜索启用或关闭windows功能） ，勾选Hyper-V。（如果找不到 Hyper-V，请尝试以上步骤） 也可以输入下述命令在Windows 操作系统中启用 Microsoft Hyper-V 虚拟化技术。 dism.exe /Online /Enable-Feature:Microsoft-Hyper-V /All 然后输入下述命令，设置 Windows 操作系统中的 Hyper-V 启动类型。具体来说，它会将 Hypervisor 的启动类型设置为 \u0026ldquo;auto\u0026rdquo;，这意味着在系统启动时自动启动 Hyper-V。(非强制) bcdedit /set hypervisorlaunchtype auto 安装 Docker 官网下载docker文件Get Started | Docker，选择download for windows下载。\n双击打开下载好的文件Docker Desktop Installer.exe，add shortcut to desktop选择√代表同意添加快捷键到桌面，如果不勾选就说明不创建快捷键，大家根据自己需求选择就行。之后点击🆗\n等待一会后会出现下图所示，1说明安装成功，2说明必须重启电脑才能成功安装，3代表关闭这个界面重启电脑\n如果重启电脑后又出现下图报错： 说明系统的WSL版本太旧，需要更新，按照提示在终端中输入下述代码等待更新即可。（终端最好以右键点击以管理员身份运行打开） wsl --update 接着继续输入docker \u0026ndash;version检测docker安装的版本，出现如下图说明已经安装docker。 继续输入docker run hello-world，出现下图说明docker安装成功，且可以执行docker命令。 这里有可能报错，当你在终端输入 docker run hello-world，出现的结果反而是下面错误的结果：\nerror during connect: In the default daemon configuration on Windows, the docker client must be run with elevated privileges to connect. 这里是说权限不够，解决方法也很简单，退出 Docker 后，右键点击桌面 docker 图标，选择以管理员身份运行程序，这时候再重新打开终端输入 docker run hello-world，就会出现 正确的结果了。\n这时在打开桌面docker快捷键就不会报错了，见下图，此时还能看到hello-world的镜像。 一些报错. 参考 https://forums.docker.com/t/solved-docker-failed-to-start-docker-desktop-for-windows/106976/16\nDocker: Error response from daemon: Ports are not available 端口没被占用，却显示被占用\ndocker: Error response from daemon: Ports are not available: exposing port TCP 0.0.0.0:10911 -\u0026gt; 0.0.0.0:0: listen tcp 0.0.0.0:10911: bind: An attempt was made to access a socket in a way forbidden by its access permissions.\n看错误信息说是端口被占用了，那咱就用 netstat -aon | findstr, 结果发现Docker报错所指向的端口并没有被占用，又遇到了奇怪问题。 解决: 其实这是Windows中的一个小问题，只需要重启NAT网络就可以解决了，执行如下两条命令： net stop winnat net start winnat ","permalink":"https://waite.wang/posts/win/win11-install-docker/","summary":"\u003chr\u003e\n\u003cp\u003etitle: Windows11家庭中文版系统安装Docker\nid: a293d46a-9b4e-4e42-8bbc-0bcec5c21662\ndate: 2023-09-24 22:29:15\nauther: admin\ncover:\u003c/p\u003e\n\u003ch2 id=\"安装到-d-盘软链接\"\u003e安装到 D 盘(软链接)\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker 默认安装路劲为 C:\u003cspan class=\"se\"\u003e\\P\u003c/span\u003erogram Files\u003cspan class=\"se\"\u003e\\D\u003c/span\u003eocker\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker 虚拟磁盘默认安装路劲为 C:\u003cspan class=\"se\"\u003e\\U\u003c/span\u003esers\u003cspan class=\"se\"\u003e\\\u0026lt;\u003c/span\u003eYourName\u0026gt;\u003cspan class=\"se\"\u003e\\A\u003c/span\u003eppData\u003cspan class=\"se\"\u003e\\L\u003c/span\u003eocal\u003cspan class=\"se\"\u003e\\D\u003c/span\u003eocker\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col\u003e\n\u003cli\u003e用 \u003cstrong\u003e管理员身份打开cmd窗口\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e执行如下命令\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003emklink /j \u003cspan class=\"s2\"\u003e\u0026#34;C:\\Program Files\\Docker\u0026#34;\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;D:\\Program Files\\Docker\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"3\"\u003e\n\u003cli\u003e已经安装Docker，需要重新再安装一次。\u003c/li\u003e\n\u003cli\u003e安装后C盘下的Docker文件就只是一个软链接了，映射的真实路径在D盘Docker文件夹下(注意: 软链接后需要在相应目录创建文件夹, 不然后续安装会报错)\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"hyper-vr\"\u003eHyper-Vr\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e查看自己的系统, 如果你的系统跟我一样是window11家庭\u003ca href=\"https://so.csdn.net/so/search?q=%E4%B8%AD%E6%96%87%E7%89%88\u0026amp;spm=1001.2101.3001.7020\"\u003e中文版\u003c/a\u003e，则会找不到Hyper-Vr，这时则需要自己创建，讲下述代码复制在txt文本里，并重命名为Hyper.cmd，右键以管理员方式运行，最后输入“Y”重启电脑后即可。\u003c/p\u003e","title":"Windows11家庭中文版系统安装Docker"},{"content":"概念的理解 webstorage本地存储 webstorage是本地存储，存储在客户端，包括localStorage和sessionStorage localStorage生命周期是永久，这意味着除非用户显示在浏览器提供的UI上清除localStorage信息，否则这些信息将永远存在。存放数据大小为一般为5MB,而且它仅在客户端（即浏览器）中保存，不参与和服务器的通信 sessionStorage仅在当前会话下有效，关闭页面或浏览器后被清除。存放数据大小为一般为5MB,而且它仅在客户端（即浏览器）中保存，不参与和服务器的通信。源生接口可以接受，亦可再次封装来对Object和Array有更好的支持 WebStorage的目标 提供一种在cookie之外存储会话数据的路径 提供一种存储大量可以跨会话存在的数据的机制 HTML5的WebStorage提供了两种API：localStorage（本地存储）和sessionStorage（会话存储） 作用域的不同： 不同浏览器无法共享localStorage或sessionStorage中的信息。相同浏览器的不同页面间可以共享相同的 localStorage（页面属于相同域名和端口），但是不同页面或标签页间无法共享sessionStorage的信息。这里需要注意的是，页面及标 签页仅指顶级窗口，如果一个标签页包含多个iframe标签且他们属于同源页面，那么他们之间是可以共享sessionStorage的 存储大小： localStorage和sessionStorage的存储数据大小一般都是：5MB 存储位置： localStorage和sessionStorage都保存在客户端，不与服务器进行交互通信 存储内容类型： localStorage和sessionStorage只能存储字符串类型，对于复杂的对象可以使用ECMAScript提供的JSON对象的stringify和parse来处理 获取方式： localStorage：window.localStorage;；sessionStorage：window.sessionStorage; 应用场景： localStoragese：常用于长期登录（+判断用户是否已登录），适合长期保存在本地的数据，而sessionStorage：敏感账号一次性登录 WebStorage的优点： 存储空间更大：cookie为4KB，而WebStorage是5MB 节省网络流量：WebStorage不会传送到服务器，存储在本地的数据可以直接获取，也不会像cookie一样美词请求都会传送到服务器，所以减少了客户端和服务器端的交互，节省了网络流量 对于那种只需要在用户浏览一组页面期间保存而关闭浏览器后就可以丢弃的数据，sessionStorage会非常方便 快速显示：有的数据存储在WebStorage上，再加上浏览器本身的缓存。获取数据时可以从本地获取会比从服务器端获取快得多，所以速度更快 安全性：WebStorage不会随着HTTP header发送到服务器端，所以安全性相对于cookie来说比较高一些，不会担心截获，但是仍然存在伪造问题 WebStorage提供了一些方法，数据操作比cookie方便 setItem (key, value) —— 保存数据，以键值对的方式储存信息。 getItem (key) —— 获取数据，将键值传入，即可获取到对应的value值。 removeItem (key) —— 删除单个数据，根据键值移除对应的信息。 clear () —— 删除所有的数据 key (index) —— 获取某个索引的key cookie HTTP Cookie简称cookie,在HTTP请求发送Set-Cookie HTTP头作为响应的一部分。通过name=value的形式存储 cookie的构成： 名称：name(不区分大小写,但最好认为它是区分的) 值:value(通过URL编码:encodeURIComponent) 域 路径 失效时间:一般默认是浏览器关闭失效,可以自己设置失效时间 安全标志:设置安全标志后只有SSL连接的时候才发送到服务器 cookie的作用:主要用于保存登录信息 生命期为只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭。 存放数据大小为4K左右 。有个数限制（各浏览器不同），一般不能超过20个。与服务器端通信：每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题 cookie的优点：具有极高的扩展性和可用性 通过良好的编程，控制保存在cookie中的session对象的大小 通过加密和安全传输技术，减少cookie被破解的可能性 只有在cookie中存放不敏感的数据，即使被盗取也不会有很大的损失 控制cookie的生命期，使之不会永远有效。这样的话偷盗者很可能拿到的就 是一个过期的cookie cookie的缺点： cookie的长度和数量的限制。每个domain最多只能有20条cookie，每个cookie长度不能超过4KB，否则会被截掉 安全性问题。如果cookie被人拦掉了，那个人就可以获取到所有session信息。加密的话也不起什么作用 有些状态不可能保存在客户端。例如，为了防止重复提交表单，我们需要在服务端保存一个计数器。若吧计数器保存在客户端，则起不到什么作用 sessionStorage sessionStorage是Storage类型的一个对象，拥有clear(),getItem(name),key(index),removeItem(name),setItem(name,value)方法 sessionStorage对象存储特定于某个会话的数据,也就是该数据只保持到浏览器关闭 将数据保存在session对象中。所谓session，是指用户在浏览某个网站时，从进入网站到浏览器关闭所经过的这段时间，也就是用户浏览这个网站所花费的时间。session对象可以用来保存在这段时间内所要求保存的任何数据 sessionStorage为临时保存 localStorage localStorage也是Storage类型的一个对象 在HTML5中localStorage作为持久保存在客户端数据的方案取代了globalStorage(globalStorage必须指定域名) localStorage会永久存储会话数据，除非removeItem,否则会话数据一直存在 将数据保存在客户端本地的硬件设备(通常指硬盘，也可以是其他硬件设备)中，即使浏览器被关闭了，该数据仍然存在，下次打开浏览器访问网站时仍然可以继续使用 5. localStorage为永久保存 区别的比较 本地储存localStorage与cookie的区别 cookie在浏览器与服务器之间来回传递 sessionStorage和localStorage不会把数据发给服务器，仅在本地保存 数据有效期不同 cookie只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭 sessionStorage：仅在当前浏览器窗口关闭前有效 localStorage 始终有效，长期保存 cookie数据还有路径的概念，可以限制cookie只属于某个路径下 存储大小也不同，cookie数据不能超过4k，sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大 作用域不用 sessionStorage不在不同的浏览器窗口中共享 localStorage在所有同源窗口中都是共享的 cookie也是在所有同源窗口中都是共享的 WebStorage 支持事件通知机制，可以将数据更新的通知发送给监听者。Web Storage 的 api 接口使用更方便 cookie、session和localStorage的区别 cookie的内容主要包括：名字、值、过期时间、路径和域，路径与域一起构成cookie的作用范围。若不设置时间，则表示这个cookie的生命期为浏览器会话期间，关闭浏览器窗口，cookie就会消失，这种生命期为浏览器会话期的cookie被称为会话cookie 会话cookie一般不存储在硬盘而是保存在内存里，当然这个行为并不是规范规定的。若设置了过期时间，浏览器就会把cookie保存到硬盘上，关闭后再打开浏览器这些cookie仍然有效直到超过设定的过期时间。对于保存在内存里的cookie，不同的浏览器有不同的处理方式session机制。 当程序需要为某个客户端的请求创建一个session时，服务器首先检查这个客户端的请求里是否已包含了一个session标识（称为session id），如果已包含则说明以前已经为此客户端创建过session，服务器就按照session id把这个session检索出来使用（检索不到，会新建一个），如果客户端请求不包含session id，则为客户端创建一个session并且生成一个与此session相关联的session id，session id的值应该是一个既不会重复，又不容易被找到规律以仿造的字符串，这个session id将被在本次响应中返回给客户端保存。保存这个session id的方式可以采用cookie，这样在交互过程中浏览器可以自动的按照规则把这个标识发送给服务器。 cookie和session的区别 cookie数据存放在客户的浏览器上，session数据放在服务器上 cookie不是很安全，别人可以分析存放在本地的cookie并进行cookie欺骗，考虑到安全应当使用session session会在一定时间内保存在服务器上，当访问增多，会比较占用你服务器的性能，考虑到减轻服务器性能方面，应当使用cookie 单个cookie保存的数*据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie 建议将登录信息等重要信息存放为session，其他信息如果需要保留，可以放在cookie中 session保存在服务器，客户端不知道其中的信心；cookie保存在客户端，服务器能够知道其中的信息 session中保存的是对象，cookie中保存的是字符串 8. session不能区分路径，同一个用户在访问一个网站期间，所有的session在任何一个地方都可以访问到，而cookie中如果设置了路径参数，那么同一个网站中不同路径下的cookie互相是访问不到的 web Storage和cookie的区别 Web Storage的概念和cookie相似，区别是它是为了更大容量存储设计的，cookie的大小是受限的，并且每次请求一个新的页面的时候cookie都会被发送过去，这样无形中浪费了带宽，另外cookie还需要指定作用域，不可跨域调用 web storage拥有setItem,getItem,removeItem,clear等方法，不像cookie需要前端开发者自己封装setCookie，getCookie 但是cookie也是不可或缺的，cookie的作用是与服务器进行交互，作为http规范的一部分而存在的，而web Storage仅仅是为了在本地“存储”数据而生 sessionStorage、localStorage、cookie都是在浏览器端存储的数据，其中sessionStorage的概念很特别，引入了一个“浏览器窗口”的概念，sessionStorage是在同源的同窗口中，始终存在的数据，也就是说只要这个浏览器窗口没有关闭，即使刷新页面或进入同源另一个页面，数据仍然存在，关闭窗口后，sessionStorage就会被销毁，同时“独立”打开的不同窗口，即使是同一页面，sessionStorage对象也是不同的 Web Storage的好处 减少网络流量：一旦数据保存在本地之后，就可以避免再向服务器请求数据，因此减少不必要的数据请求，减少数据在浏览器和服务器间不必要的来回传递 快速显示数据：性能好，从本地读数据比通过网络从服务器上获得数据快得多，本地数据可以及时获得，再加上网页本身也可以有缓存，因此整个页面和数据都在本地的话，可以立即显示 临时存储：很多时候数据只需要在用户浏览一组页面期间使用，关闭窗口后数据就可以丢弃了，这种情况使用sessionStorage非常方便 浏览器本地存储与服务器端存储的区别 数据既可以在浏览器本地存储，也可以在服务器端存储 浏览器可以保存一些数据，需要的时候直接从本地存取，sessionStorage、localStorage和cookie都是由浏览器存储在本地的数据 服务器端也可以保存所有用户的所有数据，但需要的时候浏览器要向服务器请求数据 服务器端可以保存用户的持久数据，如数据库和云存储将用户的大量数据保存在服务器端 ，服务器端也可以保存用户的临时会话数据，服务器端的session机制，如jsp的session对象，数据保存在服务器上 服务器和浏览器之间仅需传递session id即可，服务器根据session id找到对应用户的session对象，会话数据仅在一段时间内有效，这个时间就是server端设置的session有效期 服务器端保存所有的用户的数据，所以服务器端的开销较大，而浏览器端保存则把不同用户需要的数据分别保存在用户各自的浏览器中，浏览器端一般只用来存储小数据，而非服务可以存储大数据或小数据服务器存储数据安全一些，浏览器只适合存储一般数据 sessionStorage、localStorage和cookie的区别 相同点是都是保存在浏览器端、且同源的 cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递，而sessionStorage和localStorage不会自动把数据发送给服务器，仅在本地保存。cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下 存储大小限制也不同，cookie数据不能超过4K，同时因为每次http请求都会携带cookie、所以cookie只适合保存很小的数据，如会话标识。sessionStorage和localStorage虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大 数据有效期不同，sessionStorage：仅在当前浏览器窗口关闭之前有效；localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie：只在设置的cookie过期时间之前有效，即使窗口关闭或浏览器关闭 作用域不同，sessionStorage不在不同的浏览器窗口中共享，即使是同一个页面；localstorage在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的 web Storage支持事件通知机制，可以将数据更新的通知发送给监听者 web Storage的api接口使用更方便 sessionStorage与页面js数据对象的区别 页面中一般的js对象的生存期仅在当前页面有效，因此刷新页面或转到另一页面这样的重新加载页面的情况，数据就不存在了 sessionStorage只要同源的同窗口中，刷新页面或进入同源的不同页面，数据始终存在，也就是说只要浏览器不关闭，数据仍然存在 ","permalink":"https://waite.wang/posts/web/difference-between-cookie-session-localstorage/","summary":"\u003ch2 id=\"概念的理解\"\u003e概念的理解\u003c/h2\u003e\n\u003ch3 id=\"webstorage本地存储\"\u003ewebstorage本地存储\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003ewebstorage是本地存储，存储在客户端，包括localStorage和sessionStorage\u003c/li\u003e\n\u003cli\u003elocalStorage生命周期是永久，这意味着除非用户显示在浏览器提供的UI上清除localStorage信息，否则这些信息将永远存在。存放数据大小为一般为5MB,而且它仅在客户端（即浏览器）中保存，不参与和服务器的通信\u003c/li\u003e\n\u003cli\u003esessionStorage仅在当前会话下有效，关闭页面或浏览器后被清除。存放数据大小为一般为5MB,而且它仅在客户端（即浏览器）中保存，不参与和服务器的通信。源生接口可以接受，亦可再次封装来对Object和Array有更好的支持\u003c/li\u003e\n\u003cli\u003eWebStorage的目标 提供一种在cookie之外存储会话数据的路径 提供一种存储大量可以跨会话存在的数据的机制 HTML5的WebStorage提供了两种API：localStorage（本地存储）和sessionStorage（会话存储）\u003c/li\u003e\n\u003cli\u003e作用域的不同： 不同浏览器无法共享localStorage或sessionStorage中的信息。相同浏览器的不同页面间可以共享相同的 localStorage（页面属于相同域名和端口），但是不同页面或标签页间无法共享sessionStorage的信息。这里需要注意的是，页面及标 签页仅指顶级窗口，如果一个标签页包含多个iframe标签且他们属于同源页面，那么他们之间是可以共享sessionStorage的\u003c/li\u003e\n\u003cli\u003e存储大小： localStorage和sessionStorage的存储数据大小一般都是：5MB\u003c/li\u003e\n\u003cli\u003e存储位置： localStorage和sessionStorage都保存在客户端，不与服务器进行交互通信\u003c/li\u003e\n\u003cli\u003e存储内容类型： localStorage和sessionStorage只能存储字符串类型，对于复杂的对象可以使用ECMAScript提供的JSON对象的stringify和parse来处理\u003c/li\u003e\n\u003cli\u003e获取方式： localStorage：window.localStorage;；sessionStorage：window.sessionStorage;\u003c/li\u003e\n\u003cli\u003e应用场景： localStoragese：常用于长期登录（+判断用户是否已登录），适合长期保存在本地的数据，而sessionStorage：敏感账号一次性登录\u003c/li\u003e\n\u003cli\u003eWebStorage的优点： 存储空间更大：cookie为4KB，而WebStorage是5MB 节省网络流量：WebStorage不会传送到服务器，存储在本地的数据可以直接获取，也不会像cookie一样美词请求都会传送到服务器，所以减少了客户端和服务器端的交互，节省了网络流量 对于那种只需要在用户浏览一组页面期间保存而关闭浏览器后就可以丢弃的数据，sessionStorage会非常方便 快速显示：有的数据存储在WebStorage上，再加上浏览器本身的缓存。获取数据时可以从本地获取会比从服务器端获取快得多，所以速度更快 安全性：WebStorage不会随着HTTP header发送到服务器端，所以安全性相对于cookie来说比较高一些，不会担心截获，但是仍然存在伪造问题 WebStorage提供了一些方法，数据操作比cookie方便 setItem (key, value) —— 保存数据，以键值对的方式储存信息。 getItem (key) —— 获取数据，将键值传入，即可获取到对应的value值。 removeItem (key) —— 删除单个数据，根据键值移除对应的信息。 clear () —— 删除所有的数据 key (index) —— 获取某个索引的key\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"cookie\"\u003ecookie\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003eHTTP Cookie简称cookie,在HTTP请求发送Set-Cookie HTTP头作为响应的一部分。通过name=value的形式存储\u003c/li\u003e\n\u003cli\u003ecookie的构成： 名称：name(不区分大小写,但最好认为它是区分的) 值:value(通过URL编码:encodeURIComponent) 域 路径 失效时间:一般默认是浏览器关闭失效,可以自己设置失效时间 安全标志:设置安全标志后只有SSL连接的时候才发送到服务器\u003c/li\u003e\n\u003cli\u003ecookie的作用:主要用于保存登录信息\u003c/li\u003e\n\u003cli\u003e生命期为只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭。 存放数据大小为4K左右 。有个数限制（各浏览器不同），一般不能超过20个。与服务器端通信：每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题\u003c/li\u003e\n\u003cli\u003ecookie的优点：具有极高的扩展性和可用性 通过良好的编程，控制保存在cookie中的session对象的大小 通过加密和安全传输技术，减少cookie被破解的可能性 只有在cookie中存放不敏感的数据，即使被盗取也不会有很大的损失 控制cookie的生命期，使之不会永远有效。这样的话偷盗者很可能拿到的就 是一个过期的cookie\u003c/li\u003e\n\u003cli\u003ecookie的缺点： cookie的长度和数量的限制。每个domain最多只能有20条cookie，每个cookie长度不能超过4KB，否则会被截掉 安全性问题。如果cookie被人拦掉了，那个人就可以获取到所有session信息。加密的话也不起什么作用 有些状态不可能保存在客户端。例如，为了防止重复提交表单，我们需要在服务端保存一个计数器。若吧计数器保存在客户端，则起不到什么作用\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"sessionstorage\"\u003esessionStorage\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003esessionStorage是Storage类型的一个对象，拥有clear(),getItem(name),key(index),removeItem(name),setItem(name,value)方法\u003c/li\u003e\n\u003cli\u003esessionStorage对象存储特定于某个会话的数据,也就是该数据只保持到浏览器关闭\u003c/li\u003e\n\u003cli\u003e将数据保存在session对象中。所谓session，是指用户在浏览某个网站时，从进入网站到浏览器关闭所经过的这段时间，也就是用户浏览这个网站所花费的时间。session对象可以用来保存在这段时间内所要求保存的任何数据\u003c/li\u003e\n\u003cli\u003esessionStorage为临时保存\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"localstorage\"\u003elocalStorage\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003elocalStorage也是Storage类型的一个对象\u003c/li\u003e\n\u003cli\u003e在HTML5中localStorage作为持久保存在客户端数据的方案取代了globalStorage(globalStorage必须指定域名)\u003c/li\u003e\n\u003cli\u003elocalStorage会永久存储会话数据，除非removeItem,否则会话数据一直存在\u003c/li\u003e\n\u003cli\u003e将数据保存在客户端本地的硬件设备(通常指硬盘，也可以是其他硬件设备)中，即使浏览器被关闭了，该数据仍然存在，下次打开浏览器访问网站时仍然可以继续使用 5. localStorage为永久保存\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"区别的比较\"\u003e区别的比较\u003c/h2\u003e\n\u003ch3 id=\"本地储存localstorage与cookie的区别\"\u003e本地储存localStorage与cookie的区别\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003ecookie在浏览器与服务器之间来回传递 sessionStorage和localStorage不会把数据发给服务器，仅在本地保存\u003c/li\u003e\n\u003cli\u003e数据有效期不同 cookie只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭 sessionStorage：仅在当前浏览器窗口关闭前有效 localStorage 始终有效，长期保存\u003c/li\u003e\n\u003cli\u003ecookie数据还有路径的概念，可以限制cookie只属于某个路径下 存储大小也不同，cookie数据不能超过4k，sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大\u003c/li\u003e\n\u003cli\u003e作用域不用 sessionStorage不在不同的浏览器窗口中共享 localStorage在所有同源窗口中都是共享的 cookie也是在所有同源窗口中都是共享的 WebStorage 支持事件通知机制，可以将数据更新的通知发送给监听者。Web Storage 的 api 接口使用更方便\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"cookiesession和localstorage的区别\"\u003ecookie、session和localStorage的区别\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003ecookie的内容主要包括：名字、值、过期时间、路径和域，路径与域一起构成cookie的作用范围。若不设置时间，则表示这个cookie的生命期为浏览器会话期间，关闭浏览器窗口，cookie就会消失，这种生命期为浏览器会话期的cookie被称为会话cookie\u003c/li\u003e\n\u003cli\u003e会话cookie一般不存储在硬盘而是保存在内存里，当然这个行为并不是规范规定的。若设置了过期时间，浏览器就会把cookie保存到硬盘上，关闭后再打开浏览器这些cookie仍然有效直到超过设定的过期时间。对于保存在内存里的cookie，不同的浏览器有不同的处理方式session机制。\u003c/li\u003e\n\u003cli\u003e当程序需要为某个客户端的请求创建一个session时，服务器首先检查这个客户端的请求里是否已包含了一个session标识（称为session id），如果已包含则说明以前已经为此客户端创建过session，服务器就按照session id把这个session检索出来使用（检索不到，会新建一个），如果客户端请求不包含session id，则为客户端创建一个session并且生成一个与此session相关联的session id，session id的值应该是一个既不会重复，又不容易被找到规律以仿造的字符串，这个session id将被在本次响应中返回给客户端保存。保存这个session id的方式可以采用cookie，这样在交互过程中浏览器可以自动的按照规则把这个标识发送给服务器。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"cookie和session的区别\"\u003ecookie和session的区别\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003ecookie数据存放在客户的浏览器上，session数据放在服务器上\u003c/li\u003e\n\u003cli\u003ecookie不是很安全，别人可以分析存放在本地的cookie并进行cookie欺骗，考虑到安全应当使用session\u003c/li\u003e\n\u003cli\u003esession会在一定时间内保存在服务器上，当访问增多，会比较占用你服务器的性能，考虑到减轻服务器性能方面，应当使用cookie\u003c/li\u003e\n\u003cli\u003e单个cookie保存的数*据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie\u003c/li\u003e\n\u003cli\u003e建议将登录信息等重要信息存放为session，其他信息如果需要保留，可以放在cookie中\u003c/li\u003e\n\u003cli\u003esession保存在服务器，客户端不知道其中的信心；cookie保存在客户端，服务器能够知道其中的信息\u003c/li\u003e\n\u003cli\u003esession中保存的是对象，cookie中保存的是字符串 8. session不能区分路径，同一个用户在访问一个网站期间，所有的session在任何一个地方都可以访问到，而cookie中如果设置了路径参数，那么同一个网站中不同路径下的cookie互相是访问不到的\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"web-storage和cookie的区别\"\u003eweb Storage和cookie的区别\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003eWeb Storage的概念和cookie相似，区别是它是为了更大容量存储设计的，cookie的大小是受限的，并且每次请求一个新的页面的时候cookie都会被发送过去，这样无形中浪费了带宽，另外cookie还需要指定作用域，不可跨域调用\u003c/li\u003e\n\u003cli\u003eweb storage拥有setItem,getItem,removeItem,clear等方法，不像cookie需要前端开发者自己封装setCookie，getCookie\u003c/li\u003e\n\u003cli\u003e但是cookie也是不可或缺的，cookie的作用是与服务器进行交互，作为http规范的一部分而存在的，而web Storage仅仅是为了在本地“存储”数据而生 sessionStorage、localStorage、cookie都是在浏览器端存储的数据，其中sessionStorage的概念很特别，引入了一个“浏览器窗口”的概念，sessionStorage是在同源的同窗口中，始终存在的数据，也就是说只要这个浏览器窗口没有关闭，即使刷新页面或进入同源另一个页面，数据仍然存在，关闭窗口后，sessionStorage就会被销毁，同时“独立”打开的不同窗口，即使是同一页面，sessionStorage对象也是不同的\u003c/li\u003e\n\u003cli\u003eWeb Storage的好处 减少网络流量：一旦数据保存在本地之后，就可以避免再向服务器请求数据，因此减少不必要的数据请求，减少数据在浏览器和服务器间不必要的来回传递 快速显示数据：性能好，从本地读数据比通过网络从服务器上获得数据快得多，本地数据可以及时获得，再加上网页本身也可以有缓存，因此整个页面和数据都在本地的话，可以立即显示 临时存储：很多时候数据只需要在用户浏览一组页面期间使用，关闭窗口后数据就可以丢弃了，这种情况使用sessionStorage非常方便\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"浏览器本地存储与服务器端存储的区别\"\u003e浏览器本地存储与服务器端存储的区别\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e数据既可以在浏览器本地存储，也可以在服务器端存储\u003c/li\u003e\n\u003cli\u003e浏览器可以保存一些数据，需要的时候直接从本地存取，sessionStorage、localStorage和cookie都是由浏览器存储在本地的数据\u003c/li\u003e\n\u003cli\u003e服务器端也可以保存所有用户的所有数据，但需要的时候浏览器要向服务器请求数据\u003c/li\u003e\n\u003cli\u003e服务器端可以保存用户的持久数据，如数据库和云存储将用户的大量数据保存在服务器端 ，服务器端也可以保存用户的临时会话数据，服务器端的session机制，如jsp的session对象，数据保存在服务器上\u003c/li\u003e\n\u003cli\u003e服务器和浏览器之间仅需传递session id即可，服务器根据session id找到对应用户的session对象，会话数据仅在一段时间内有效，这个时间就是server端设置的session有效期\u003c/li\u003e\n\u003cli\u003e服务器端保存所有的用户的数据，所以服务器端的开销较大，而浏览器端保存则把不同用户需要的数据分别保存在用户各自的浏览器中，浏览器端一般只用来存储小数据，而非服务可以存储大数据或小数据服务器存储数据安全一些，浏览器只适合存储一般数据\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"sessionstoragelocalstorage和cookie的区别\"\u003esessionStorage、localStorage和cookie的区别\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e相同点是都是保存在浏览器端、且同源的\u003c/li\u003e\n\u003cli\u003ecookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递，而sessionStorage和localStorage不会自动把数据发送给服务器，仅在本地保存。cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下\u003c/li\u003e\n\u003cli\u003e存储大小限制也不同，cookie数据不能超过4K，同时因为每次http请求都会携带cookie、所以cookie只适合保存很小的数据，如会话标识。sessionStorage和localStorage虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大\u003c/li\u003e\n\u003cli\u003e数据有效期不同，sessionStorage：仅在当前浏览器窗口关闭之前有效；localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie：只在设置的cookie过期时间之前有效，即使窗口关闭或浏览器关闭\u003c/li\u003e\n\u003cli\u003e作用域不同，sessionStorage不在不同的浏览器窗口中共享，即使是同一个页面；localstorage在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的\u003c/li\u003e\n\u003cli\u003eweb Storage支持事件通知机制，可以将数据更新的通知发送给监听者\u003c/li\u003e\n\u003cli\u003eweb Storage的api接口使用更方便\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"sessionstorage与页面js数据对象的区别\"\u003esessionStorage与页面js数据对象的区别\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e页面中一般的js对象的生存期仅在当前页面有效，因此刷新页面或转到另一页面这样的重新加载页面的情况，数据就不存在了\u003c/li\u003e\n\u003cli\u003esessionStorage只要同源的同窗口中，刷新页面或进入同源的不同页面，数据始终存在，也就是说只要浏览器不关闭，数据仍然存在\u003c/li\u003e\n\u003c/ol\u003e","title":"cookie、session和localStorage的区别"},{"content":" 以下代码取的是院校专业分数线\nF12 得到接口\nhttps://api.eol.cn/web/api/?local_batch_id=14\u0026amp;local_province_id=31\u0026amp;local_type_id=3\u0026amp;page=1\u0026amp;school_id=31\u0026amp;size=10\u0026amp;special_group=\u0026amp;uri=apidata/api/gk/score/special\u0026amp;year=2021\u0026amp;signsafe=6cdbc334a395abd2a99b9bd8cc29c42f\n推断参数含义 signsafe 数据加密签名获取 搜索 锁定 signsafe 字段以及加密\n以上看到，t就是请求中的signsafe参数。而且，函数中也出现了HmacSHA1、base64等方法。由此可知，定位的加密位置是正确的。接下来需要将加密函数抠下来改写，方便调用。下断点继续跟踪方法调用。跟踪v.a.enc.Utf8.parse方法，如下多次尝试, 最终试出\nvar CryptoJS = require(\u0026#34;crypto-js\u0026#34;); function signsafe_jami(p) { p = p.replace(/^\\/|https?:\\/\\/\\/?/, \u0026#34;\u0026#34;); p = p.replace(/%2F/g, \u0026#34;/\u0026#34;); console.log(p) let f = CryptoJS.HmacSHA1(CryptoJS.enc.Utf8.parse(p), \u0026#34;D23ABC@#56\u0026#34;); f = CryptoJS.enc.Base64.stringify(f).toString(); f = CryptoJS.MD5(f).toString(); return f; } url = \u0026#34;https://api.eol.cn/web/api/?local_batch_id=14\u0026amp;local_province_id=31\u0026amp;local_type_id=3\u0026amp;page=1\u0026amp;school_id=31\u0026amp;size=100\u0026amp;special_group=\u0026amp;uri=apidata%2Fapi%2Fgk%2Fscore%2Fspecial\u0026amp;year=2021\u0026#34; console.log(signsafe_jami(url)) 开始前 先安装 npm install crypto-js\ndata 解析 通过以上 signsafe 访问文章开头接口, 拿到一长串 data 数据(见开头图2)\n从 method 知道使用的是 aes-256-cbc的方式进行加密, 推出加密方法是aes-256， 密钥长度256位，cbc指的是在加密和解密是需要一个初始化向量(Initialization Vector, IV)，在每次加密之前或者解密之后，使用初始化向量与明文或密文异或。说白了，就是设定的密钥，添加一个初始化偏移量。加密时，明文先与iv偏移量异或，再将结果进行256位的块加密，得到的输出就是密文，同时本次的输出密文作为下一个块加密的IV。\n通过搜索 aes 确定疑似代码 进行仿写\n以下代码参考\nvar CryptoJS = CryptoJS || (function (Math, undefined) { var C = {}; var C_lib = C.lib = {}; var Base = C_lib.Base = (function () { function F() {}; return { extend: function (overrides) { F.prototype = this; var subtype = new F(); if (overrides) { subtype.mixIn(overrides); } if (!subtype.hasOwnProperty(\u0026#39;init\u0026#39;) || this.init === subtype.init) { subtype.init = function () { subtype.$super.init.apply(this, arguments); }; } subtype.init.prototype = subtype; subtype.$super = this; return subtype; }, create: function () { var instance = this.extend(); instance.init.apply(instance, arguments); return instance; }, init: function () {}, mixIn: function (properties) { for (var propertyName in properties) { if (properties.hasOwnProperty(propertyName)) { this[propertyName] = properties[propertyName]; } } if (properties.hasOwnProperty(\u0026#39;toString\u0026#39;)) { this.toString = properties.toString; } }, clone: function () { return this.init.prototype.extend(this); } }; }()); var WordArray = C_lib.WordArray = Base.extend({ init: function (words, sigBytes) { words = this.words = words || []; if (sigBytes != undefined) { this.sigBytes = sigBytes; } else { this.sigBytes = words.length * 4; } }, toString: function (encoder) { return (encoder || Hex).stringify(this); }, concat: function (wordArray) { var thisWords = this.words; var thatWords = wordArray.words; var thisSigBytes = this.sigBytes; var thatSigBytes = wordArray.sigBytes; this.clamp(); if (thisSigBytes % 4) { for (var i = 0; i \u0026lt; thatSigBytes; i++) { var thatByte = (thatWords[i \u0026gt;\u0026gt;\u0026gt; 2] \u0026gt;\u0026gt;\u0026gt; (24 - (i % 4) * 8)) \u0026amp; 0xff; thisWords[(thisSigBytes + i) \u0026gt;\u0026gt;\u0026gt; 2] |= thatByte \u0026lt;\u0026lt; (24 - ((thisSigBytes + i) % 4) * 8); } } else if (thatWords.length \u0026gt; 0xffff) { for (var i = 0; i \u0026lt; thatSigBytes; i += 4) { thisWords[(thisSigBytes + i) \u0026gt;\u0026gt;\u0026gt; 2] = thatWords[i \u0026gt;\u0026gt;\u0026gt; 2]; } } else { thisWords.push.apply(thisWords, thatWords); } this.sigBytes += thatSigBytes; return this; }, clamp: function () { var words = this.words; var sigBytes = this.sigBytes; words[sigBytes \u0026gt;\u0026gt;\u0026gt; 2] \u0026amp;= 0xffffffff \u0026lt;\u0026lt; (32 - (sigBytes % 4) * 8); words.length = Math.ceil(sigBytes / 4); }, clone: function () { var clone = Base.clone.call(this); clone.words = this.words.slice(0); return clone; }, random: function (nBytes) { var words = []; var r = (function (m_w) { var m_w = m_w; var m_z = 0x3ade68b1; var mask = 0xffffffff; return function () { m_z = (0x9069 * (m_z \u0026amp; 0xFFFF) + (m_z \u0026gt;\u0026gt; 0x10)) \u0026amp; mask; m_w = (0x4650 * (m_w \u0026amp; 0xFFFF) + (m_w \u0026gt;\u0026gt; 0x10)) \u0026amp; mask; var result = ((m_z \u0026lt;\u0026lt; 0x10) + m_w) \u0026amp; mask; result /= 0x100000000; result += 0.5; return result * (Math.random() \u0026gt; .5 ? 1 : -1); } }); for (var i = 0, rcache; i \u0026lt; nBytes; i += 4) { var _r = r((rcache || Math.random()) * 0x100000000); rcache = _r() * 0x3ade67b7; words.push((_r() * 0x100000000) | 0); } return new WordArray.init(words, nBytes); } }); var C_enc = C.enc = {}; var Hex = C_enc.Hex = { stringify: function (wordArray) { var words = wordArray.words; var sigBytes = wordArray.sigBytes; var hexChars = []; for (var i = 0; i \u0026lt; sigBytes; i++) { var bite = (words[i \u0026gt;\u0026gt;\u0026gt; 2] \u0026gt;\u0026gt;\u0026gt; (24 - (i % 4) * 8)) \u0026amp; 0xff; hexChars.push((bite \u0026gt;\u0026gt;\u0026gt; 4).toString(16)); hexChars.push((bite \u0026amp; 0x0f).toString(16)); } return hexChars.join(\u0026#39;\u0026#39;); }, parse: function (hexStr) { var hexStrLength = hexStr.length; var words = []; for (var i = 0; i \u0026lt; hexStrLength; i += 2) { words[i \u0026gt;\u0026gt;\u0026gt; 3] |= parseInt(hexStr.substr(i, 2), 16) \u0026lt;\u0026lt; (24 - (i % 8) * 4); } return new WordArray.init(words, hexStrLength / 2); } }; var Latin1 = C_enc.Latin1 = { stringify: function (wordArray) { var words = wordArray.words; var sigBytes = wordArray.sigBytes; var latin1Chars = []; for (var i = 0; i \u0026lt; sigBytes; i++) { var bite = (words[i \u0026gt;\u0026gt;\u0026gt; 2] \u0026gt;\u0026gt;\u0026gt; (24 - (i % 4) * 8)) \u0026amp; 0xff; latin1Chars.push(String.fromCharCode(bite)); } return latin1Chars.join(\u0026#39;\u0026#39;); }, parse: function (latin1Str) { var latin1StrLength = latin1Str.length; var words = []; for (var i = 0; i \u0026lt; latin1StrLength; i++) { words[i \u0026gt;\u0026gt;\u0026gt; 2] |= (latin1Str.charCodeAt(i) \u0026amp; 0xff) \u0026lt;\u0026lt; (24 - (i % 4) * 8); } return new WordArray.init(words, latin1StrLength); } }; var Utf8 = C_enc.Utf8 = { stringify: function (wordArray) { try { return decodeURIComponent(escape(Latin1.stringify(wordArray))); } catch (e) { throw new Error(\u0026#39;Malformed UTF-8 data\u0026#39;); } }, parse: function (utf8Str) { return Latin1.parse(unescape(encodeURIComponent(utf8Str))); } }; var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({ reset: function () { this._data = new WordArray.init(); this._nDataBytes = 0; }, _append: function (data) { if (typeof data == \u0026#39;string\u0026#39;) { data = Utf8.parse(data); } this._data.concat(data); this._nDataBytes += data.sigBytes; }, _process: function (doFlush) { var data = this._data; var dataWords = data.words; var dataSigBytes = data.sigBytes; var blockSize = this.blockSize; var blockSizeBytes = blockSize * 4; var nBlocksReady = dataSigBytes / blockSizeBytes; if (doFlush) { nBlocksReady = Math.ceil(nBlocksReady); } else { nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0); } var nWordsReady = nBlocksReady * blockSize; var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes); if (nWordsReady) { for (var offset = 0; offset \u0026lt; nWordsReady; offset += blockSize) { this._doProcessBlock(dataWords, offset); } var processedWords = dataWords.splice(0, nWordsReady); data.sigBytes -= nBytesReady; } return new WordArray.init(processedWords, nBytesReady); }, clone: function () { var clone = Base.clone.call(this); clone._data = this._data.clone(); return clone; }, _minBufferSize: 0 }); var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({ cfg: Base.extend(), init: function (cfg) { this.cfg = this.cfg.extend(cfg); this.reset(); }, reset: function () { BufferedBlockAlgorithm.reset.call(this); this._doReset(); }, update: function (messageUpdate) { this._append(messageUpdate); this._process(); return this; }, finalize: function (messageUpdate) { if (messageUpdate) { this._append(messageUpdate); } var hash = this._doFinalize(); return hash; }, blockSize: 512 / 32, _createHelper: function (hasher) { return function (message, cfg) { return new hasher.init(cfg).finalize(message); }; }, _createHmacHelper: function (hasher) { return function (message, key) { return new C_algo.HMAC.init(hasher, key).finalize(message); }; } }); var C_algo = C.algo = {}; return C; }(Math)); (function () { var C = CryptoJS; var C_lib = C.lib; var WordArray = C_lib.WordArray; var C_enc = C.enc; var Base64 = C_enc.Base64 = { stringify: function (wordArray) { var words = wordArray.words; var sigBytes = wordArray.sigBytes; var map = this._map; wordArray.clamp(); var base64Chars = []; for (var i = 0; i \u0026lt; sigBytes; i += 3) { var byte1 = (words[i \u0026gt;\u0026gt;\u0026gt; 2] \u0026gt;\u0026gt;\u0026gt; (24 - (i % 4) * 8)) \u0026amp; 0xff; var byte2 = (words[(i + 1) \u0026gt;\u0026gt;\u0026gt; 2] \u0026gt;\u0026gt;\u0026gt; (24 - ((i + 1) % 4) * 8)) \u0026amp; 0xff; var byte3 = (words[(i + 2) \u0026gt;\u0026gt;\u0026gt; 2] \u0026gt;\u0026gt;\u0026gt; (24 - ((i + 2) % 4) * 8)) \u0026amp; 0xff; var triplet = (byte1 \u0026lt;\u0026lt; 16) | (byte2 \u0026lt;\u0026lt; 8) | byte3; for (var j = 0; (j \u0026lt; 4) \u0026amp;\u0026amp; (i + j * 0.75 \u0026lt; sigBytes); j++) { base64Chars.push(map.charAt((triplet \u0026gt;\u0026gt;\u0026gt; (6 * (3 - j))) \u0026amp; 0x3f)); } } var paddingChar = map.charAt(64); if (paddingChar) { while (base64Chars.length % 4) { base64Chars.push(paddingChar); } } return base64Chars.join(\u0026#39;\u0026#39;); }, parse: function (base64Str) { var base64StrLength = base64Str.length; var map = this._map; var reverseMap = this._reverseMap; if (!reverseMap) { reverseMap = this._reverseMap = []; for (var j = 0; j \u0026lt; map.length; j++) { reverseMap[map.charCodeAt(j)] = j; } } var paddingChar = map.charAt(64); if (paddingChar) { var paddingIndex = base64Str.indexOf(paddingChar); if (paddingIndex !== -1) { base64StrLength = paddingIndex; } } return parseLoop(base64Str, base64StrLength, reverseMap); }, _map: \u0026#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\u0026#39; }; function parseLoop(base64Str, base64StrLength, reverseMap) { var words = []; var nBytes = 0; for (var i = 0; i \u0026lt; base64StrLength; i++) { if (i % 4) { var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] \u0026lt;\u0026lt; ((i % 4) * 2); var bits2 = reverseMap[base64Str.charCodeAt(i)] \u0026gt;\u0026gt;\u0026gt; (6 - (i % 4) * 2); words[nBytes \u0026gt;\u0026gt;\u0026gt; 2] |= (bits1 | bits2) \u0026lt;\u0026lt; (24 - (nBytes % 4) * 8); nBytes++; } } return WordArray.create(words, nBytes); } }()); CryptoJS.lib.Cipher || (function (undefined) { var C = CryptoJS; var C_lib = C.lib; var Base = C_lib.Base; var WordArray = C_lib.WordArray; var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm; var C_enc = C.enc; var Utf8 = C_enc.Utf8; var Base64 = C_enc.Base64; var C_algo = C.algo; var EvpKDF = C_algo.EvpKDF; var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({ cfg: Base.extend(), createEncryptor: function (key, cfg) { return this.create(this._ENC_XFORM_MODE, key, cfg); }, createDecryptor: function (key, cfg) { return this.create(this._DEC_XFORM_MODE, key, cfg); }, init: function (xformMode, key, cfg) { this.cfg = this.cfg.extend(cfg); this._xformMode = xformMode; this._key = key; this.reset(); }, reset: function () { BufferedBlockAlgorithm.reset.call(this); this._doReset(); }, process: function (dataUpdate) { this._append(dataUpdate); return this._process(); }, finalize: function (dataUpdate) { if (dataUpdate) { this._append(dataUpdate); } var finalProcessedData = this._doFinalize(); return finalProcessedData; }, keySize: 128 / 32, ivSize: 128 / 32, _ENC_XFORM_MODE: 1, _DEC_XFORM_MODE: 2, _createHelper: (function () { function selectCipherStrategy(key) { if (typeof key == \u0026#39;string\u0026#39;) { return PasswordBasedCipher; } else { return SerializableCipher; } } return function (cipher) { return { encrypt: function (message, key, cfg) { return selectCipherStrategy(key).encrypt(cipher, message, key, cfg); }, decrypt: function (ciphertext, key, cfg) { return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg); } }; }; }()) }); var StreamCipher = C_lib.StreamCipher = Cipher.extend({ _doFinalize: function () { var finalProcessedBlocks = this._process(!!\u0026#39;flush\u0026#39;); return finalProcessedBlocks; }, blockSize: 1 }); var C_mode = C.mode = {}; var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({ createEncryptor: function (cipher, iv) { return this.Encryptor.create(cipher, iv); }, createDecryptor: function (cipher, iv) { return this.Decryptor.create(cipher, iv); }, init: function (cipher, iv) { this._cipher = cipher; this._iv = iv; } }); var CBC = C_mode.CBC = (function () { var CBC = BlockCipherMode.extend(); CBC.Encryptor = CBC.extend({ processBlock: function (words, offset) { var cipher = this._cipher; var blockSize = cipher.blockSize; xorBlock.call(this, words, offset, blockSize); cipher.encryptBlock(words, offset); this._prevBlock = words.slice(offset, offset + blockSize); } }); CBC.Decryptor = CBC.extend({ processBlock: function (words, offset) { var cipher = this._cipher; var blockSize = cipher.blockSize; var thisBlock = words.slice(offset, offset + blockSize); cipher.decryptBlock(words, offset); xorBlock.call(this, words, offset, blockSize); this._prevBlock = thisBlock; } }); function xorBlock(words, offset, blockSize) { var iv = this._iv; if (iv) { var block = iv; this._iv = undefined; } else { var block = this._prevBlock; } for (var i = 0; i \u0026lt; blockSize; i++) { words[offset + i] ^= block[i]; } } return CBC; }()); var C_pad = C.pad = {}; var Pkcs7 = C_pad.Pkcs7 = { pad: function (data, blockSize) { var blockSizeBytes = blockSize * 4; var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes; var paddingWord = (nPaddingBytes \u0026lt;\u0026lt; 24) | (nPaddingBytes \u0026lt;\u0026lt; 16) | (nPaddingBytes \u0026lt;\u0026lt; 8) | nPaddingBytes; var paddingWords = []; for (var i = 0; i \u0026lt; nPaddingBytes; i += 4) { paddingWords.push(paddingWord); } var padding = WordArray.create(paddingWords, nPaddingBytes); data.concat(padding); }, unpad: function (data) { var nPaddingBytes = data.words[(data.sigBytes - 1) \u0026gt;\u0026gt;\u0026gt; 2] \u0026amp; 0xff; data.sigBytes -= nPaddingBytes; } }; var BlockCipher = C_lib.BlockCipher = Cipher.extend({ cfg: Cipher.cfg.extend({ mode: CBC, padding: Pkcs7 }), reset: function () { Cipher.reset.call(this); var cfg = this.cfg; var iv = cfg.iv; var mode = cfg.mode; if (this._xformMode == this._ENC_XFORM_MODE) { var modeCreator = mode.createEncryptor; } else { var modeCreator = mode.createDecryptor; this._minBufferSize = 1; } if (this._mode \u0026amp;\u0026amp; this._mode.__creator == modeCreator) { this._mode.init(this, iv \u0026amp;\u0026amp; iv.words); } else { this._mode = modeCreator.call(mode, this, iv \u0026amp;\u0026amp; iv.words); this._mode.__creator = modeCreator; } }, _doProcessBlock: function (words, offset) { this._mode.processBlock(words, offset); }, _doFinalize: function () { var padding = this.cfg.padding; if (this._xformMode == this._ENC_XFORM_MODE) { padding.pad(this._data, this.blockSize); var finalProcessedBlocks = this._process(!!\u0026#39;flush\u0026#39;); } else { var finalProcessedBlocks = this._process(!!\u0026#39;flush\u0026#39;); padding.unpad(finalProcessedBlocks); } return finalProcessedBlocks; }, blockSize: 128 / 32 }); var CipherParams = C_lib.CipherParams = Base.extend({ init: function (cipherParams) { this.mixIn(cipherParams); }, toString: function (formatter) { return (formatter || this.formatter).stringify(this); } }); var C_format = C.format = {}; var OpenSSLFormatter = C_format.OpenSSL = { stringify: function (cipherParams) { var ciphertext = cipherParams.ciphertext; var salt = cipherParams.salt; if (salt) { var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext); } else { var wordArray = ciphertext; } return wordArray.toString(Base64); }, parse: function (openSSLStr) { var ciphertext = Base64.parse(openSSLStr); var ciphertextWords = ciphertext.words; if (ciphertextWords[0] == 0x53616c74 \u0026amp;\u0026amp; ciphertextWords[1] == 0x65645f5f) { var salt = WordArray.create(ciphertextWords.slice(2, 4)); ciphertextWords.splice(0, 4); ciphertext.sigBytes -= 16; } return CipherParams.create({ ciphertext: ciphertext, salt: salt }); } }; var SerializableCipher = C_lib.SerializableCipher = Base.extend({ cfg: Base.extend({ format: OpenSSLFormatter }), encrypt: function (cipher, message, key, cfg) { cfg = this.cfg.extend(cfg); var encryptor = cipher.createEncryptor(key, cfg); var ciphertext = encryptor.finalize(message); var cipherCfg = encryptor.cfg; return CipherParams.create({ ciphertext: ciphertext, key: key, iv: cipherCfg.iv, algorithm: cipher, mode: cipherCfg.mode, padding: cipherCfg.padding, blockSize: cipher.blockSize, formatter: cfg.format }); }, decrypt: function (cipher, ciphertext, key, cfg) { cfg = this.cfg.extend(cfg); ciphertext = this._parse(ciphertext, cfg.format); var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext); return plaintext; }, _parse: function (ciphertext, format) { if (typeof ciphertext == \u0026#39;string\u0026#39;) { return format.parse(ciphertext, this); } else { return ciphertext; } } }); var C_kdf = C.kdf = {}; var OpenSSLKdf = C_kdf.OpenSSL = { execute: function (password, keySize, ivSize, salt) { if (!salt) { salt = WordArray.random(64 / 8); } var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt); var iv = WordArray.create(key.words.slice(keySize), ivSize * 4); key.sigBytes = keySize * 4; return CipherParams.create({ key: key, iv: iv, salt: salt }); } }; var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({ cfg: SerializableCipher.cfg.extend({ kdf: OpenSSLKdf }), encrypt: function (cipher, message, password, cfg) { cfg = this.cfg.extend(cfg); var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize); cfg.iv = derivedParams.iv; var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg); ciphertext.mixIn(derivedParams); return ciphertext; }, decrypt: function (cipher, ciphertext, password, cfg) { cfg = this.cfg.extend(cfg); ciphertext = this._parse(ciphertext, cfg.format); var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt); cfg.iv = derivedParams.iv; var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg); return plaintext; } }); }()); (function () { var C = CryptoJS; var C_lib = C.lib; var BlockCipher = C_lib.BlockCipher; var C_algo = C.algo; var SBOX = []; var INV_SBOX = []; var SUB_MIX_0 = []; var SUB_MIX_1 = []; var SUB_MIX_2 = []; var SUB_MIX_3 = []; var INV_SUB_MIX_0 = []; var INV_SUB_MIX_1 = []; var INV_SUB_MIX_2 = []; var INV_SUB_MIX_3 = []; (function () { var d = []; for (var i = 0; i \u0026lt; 256; i++) { if (i \u0026lt; 128) { d[i] = i \u0026lt;\u0026lt; 1; } else { d[i] = (i \u0026lt;\u0026lt; 1) ^ 0x11b; } } var x = 0; var xi = 0; for (var i = 0; i \u0026lt; 256; i++) { var sx = xi ^ (xi \u0026lt;\u0026lt; 1) ^ (xi \u0026lt;\u0026lt; 2) ^ (xi \u0026lt;\u0026lt; 3) ^ (xi \u0026lt;\u0026lt; 4); sx = (sx \u0026gt;\u0026gt;\u0026gt; 8) ^ (sx \u0026amp; 0xff) ^ 0x63; SBOX[x] = sx; INV_SBOX[sx] = x; var x2 = d[x]; var x4 = d[x2]; var x8 = d[x4]; var t = (d[sx] * 0x101) ^ (sx * 0x1010100); SUB_MIX_0[x] = (t \u0026lt;\u0026lt; 24) | (t \u0026gt;\u0026gt;\u0026gt; 8); SUB_MIX_1[x] = (t \u0026lt;\u0026lt; 16) | (t \u0026gt;\u0026gt;\u0026gt; 16); SUB_MIX_2[x] = (t \u0026lt;\u0026lt; 8) | (t \u0026gt;\u0026gt;\u0026gt; 24); SUB_MIX_3[x] = t; var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100); INV_SUB_MIX_0[sx] = (t \u0026lt;\u0026lt; 24) | (t \u0026gt;\u0026gt;\u0026gt; 8); INV_SUB_MIX_1[sx] = (t \u0026lt;\u0026lt; 16) | (t \u0026gt;\u0026gt;\u0026gt; 16); INV_SUB_MIX_2[sx] = (t \u0026lt;\u0026lt; 8) | (t \u0026gt;\u0026gt;\u0026gt; 24); INV_SUB_MIX_3[sx] = t; if (!x) { x = xi = 1; } else { x = x2 ^ d[d[d[x8 ^ x2]]]; xi ^= d[d[xi]]; } } }()); var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]; var AES = C_algo.AES = BlockCipher.extend({ _doReset: function () { if (this._nRounds \u0026amp;\u0026amp; this._keyPriorReset === this._key) { return; } var key = this._keyPriorReset = this._key; var keyWords = key.words; var keySize = key.sigBytes / 4; var nRounds = this._nRounds = keySize + 6; var ksRows = (nRounds + 1) * 4; var keySchedule = this._keySchedule = []; for (var ksRow = 0; ksRow \u0026lt; ksRows; ksRow++) { if (ksRow \u0026lt; keySize) { keySchedule[ksRow] = keyWords[ksRow]; } else { var t = keySchedule[ksRow - 1]; if (!(ksRow % keySize)) { t = (t \u0026lt;\u0026lt; 8) | (t \u0026gt;\u0026gt;\u0026gt; 24); t = (SBOX[t \u0026gt;\u0026gt;\u0026gt; 24] \u0026lt;\u0026lt; 24) | (SBOX[(t \u0026gt;\u0026gt;\u0026gt; 16) \u0026amp; 0xff] \u0026lt;\u0026lt; 16) | (SBOX[(t \u0026gt;\u0026gt;\u0026gt; 8) \u0026amp; 0xff] \u0026lt;\u0026lt; 8) | SBOX[t \u0026amp; 0xff]; t ^= RCON[(ksRow / keySize) | 0] \u0026lt;\u0026lt; 24; } else if (keySize \u0026gt; 6 \u0026amp;\u0026amp; ksRow % keySize == 4) { t = (SBOX[t \u0026gt;\u0026gt;\u0026gt; 24] \u0026lt;\u0026lt; 24) | (SBOX[(t \u0026gt;\u0026gt;\u0026gt; 16) \u0026amp; 0xff] \u0026lt;\u0026lt; 16) | (SBOX[(t \u0026gt;\u0026gt;\u0026gt; 8) \u0026amp; 0xff] \u0026lt;\u0026lt; 8) | SBOX[t \u0026amp; 0xff]; } keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t; } } var invKeySchedule = this._invKeySchedule = []; for (var invKsRow = 0; invKsRow \u0026lt; ksRows; invKsRow++) { var ksRow = ksRows - invKsRow; if (invKsRow % 4) { var t = keySchedule[ksRow]; } else { var t = keySchedule[ksRow - 4]; } if (invKsRow \u0026lt; 4 || ksRow \u0026lt;= 4) { invKeySchedule[invKsRow] = t; } else { invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t \u0026gt;\u0026gt;\u0026gt; 24]] ^ INV_SUB_MIX_1[SBOX[(t \u0026gt;\u0026gt;\u0026gt; 16) \u0026amp; 0xff]] ^ INV_SUB_MIX_2[SBOX[(t \u0026gt;\u0026gt;\u0026gt; 8) \u0026amp; 0xff]] ^ INV_SUB_MIX_3[SBOX[t \u0026amp; 0xff]]; } } }, encryptBlock: function (M, offset) { this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX); }, decryptBlock: function (M, offset) { var t = M[offset + 1]; M[offset + 1] = M[offset + 3]; M[offset + 3] = t; this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX); var t = M[offset + 1]; M[offset + 1] = M[offset + 3]; M[offset + 3] = t; }, _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) { var nRounds = this._nRounds; var s0 = M[offset] ^ keySchedule[0]; var s1 = M[offset + 1] ^ keySchedule[1]; var s2 = M[offset + 2] ^ keySchedule[2]; var s3 = M[offset + 3] ^ keySchedule[3]; var ksRow = 4; for (var round = 1; round \u0026lt; nRounds; round++) { var t0 = SUB_MIX_0[s0 \u0026gt;\u0026gt;\u0026gt; 24] ^ SUB_MIX_1[(s1 \u0026gt;\u0026gt;\u0026gt; 16) \u0026amp; 0xff] ^ SUB_MIX_2[(s2 \u0026gt;\u0026gt;\u0026gt; 8) \u0026amp; 0xff] ^ SUB_MIX_3[s3 \u0026amp; 0xff] ^ keySchedule[ksRow++]; var t1 = SUB_MIX_0[s1 \u0026gt;\u0026gt;\u0026gt; 24] ^ SUB_MIX_1[(s2 \u0026gt;\u0026gt;\u0026gt; 16) \u0026amp; 0xff] ^ SUB_MIX_2[(s3 \u0026gt;\u0026gt;\u0026gt; 8) \u0026amp; 0xff] ^ SUB_MIX_3[s0 \u0026amp; 0xff] ^ keySchedule[ksRow++]; var t2 = SUB_MIX_0[s2 \u0026gt;\u0026gt;\u0026gt; 24] ^ SUB_MIX_1[(s3 \u0026gt;\u0026gt;\u0026gt; 16) \u0026amp; 0xff] ^ SUB_MIX_2[(s0 \u0026gt;\u0026gt;\u0026gt; 8) \u0026amp; 0xff] ^ SUB_MIX_3[s1 \u0026amp; 0xff] ^ keySchedule[ksRow++]; var t3 = SUB_MIX_0[s3 \u0026gt;\u0026gt;\u0026gt; 24] ^ SUB_MIX_1[(s0 \u0026gt;\u0026gt;\u0026gt; 16) \u0026amp; 0xff] ^ SUB_MIX_2[(s1 \u0026gt;\u0026gt;\u0026gt; 8) \u0026amp; 0xff] ^ SUB_MIX_3[s2 \u0026amp; 0xff] ^ keySchedule[ksRow++]; s0 = t0; s1 = t1; s2 = t2; s3 = t3; } var t0 = ((SBOX[s0 \u0026gt;\u0026gt;\u0026gt; 24] \u0026lt;\u0026lt; 24) | (SBOX[(s1 \u0026gt;\u0026gt;\u0026gt; 16) \u0026amp; 0xff] \u0026lt;\u0026lt; 16) | (SBOX[(s2 \u0026gt;\u0026gt;\u0026gt; 8) \u0026amp; 0xff] \u0026lt;\u0026lt; 8) | SBOX[s3 \u0026amp; 0xff]) ^ keySchedule[ksRow++]; var t1 = ((SBOX[s1 \u0026gt;\u0026gt;\u0026gt; 24] \u0026lt;\u0026lt; 24) | (SBOX[(s2 \u0026gt;\u0026gt;\u0026gt; 16) \u0026amp; 0xff] \u0026lt;\u0026lt; 16) | (SBOX[(s3 \u0026gt;\u0026gt;\u0026gt; 8) \u0026amp; 0xff] \u0026lt;\u0026lt; 8) | SBOX[s0 \u0026amp; 0xff]) ^ keySchedule[ksRow++]; var t2 = ((SBOX[s2 \u0026gt;\u0026gt;\u0026gt; 24] \u0026lt;\u0026lt; 24) | (SBOX[(s3 \u0026gt;\u0026gt;\u0026gt; 16) \u0026amp; 0xff] \u0026lt;\u0026lt; 16) | (SBOX[(s0 \u0026gt;\u0026gt;\u0026gt; 8) \u0026amp; 0xff] \u0026lt;\u0026lt; 8) | SBOX[s1 \u0026amp; 0xff]) ^ keySchedule[ksRow++]; var t3 = ((SBOX[s3 \u0026gt;\u0026gt;\u0026gt; 24] \u0026lt;\u0026lt; 24) | (SBOX[(s0 \u0026gt;\u0026gt;\u0026gt; 16) \u0026amp; 0xff] \u0026lt;\u0026lt; 16) | (SBOX[(s1 \u0026gt;\u0026gt;\u0026gt; 8) \u0026amp; 0xff] \u0026lt;\u0026lt; 8) | SBOX[s2 \u0026amp; 0xff]) ^ keySchedule[ksRow++]; M[offset] = t0; M[offset + 1] = t1; M[offset + 2] = t2; M[offset + 3] = t3; }, keySize: 256 / 32 }); C.AES = BlockCipher._createHelper(AES); }()); var key = CryptoJS.enc.Hex.parse(\u0026#34;4587dc9b6a7c3e9ef3b920f994edc3a210c460977528138d41e58b9b02c94ffd\u0026#34;); var iv = CryptoJS.enc.Hex.parse(\u0026#34;6aa677d0f4d6646eec5e9a82aedb60b0\u0026#34;); function AES_Encrypt(word) { var srcs = CryptoJS.enc.Utf8.parse(word); var encrypted = CryptoJS.AES.encrypt(srcs, key, { iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 }); return CryptoJS.enc.Hex.stringify(CryptoJS.enc.Base64.parse(encrypted.toString())); } function AES_Decrypt(word) { var srcs = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Hex.parse(word)); var decrypt = CryptoJS.AES.decrypt(srcs, key, { iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 }); return decrypt.toString(CryptoJS.enc.Utf8); } var data=\u0026#39;\u0026#39;; function get_data(){ return AES_Decrypt(data) } console.log(get_data()) 二次重写\nvar CryptoJS = require(\u0026#34;crypto-js\u0026#34;); var key = CryptoJS.enc.Hex.parse(\u0026#34;4587dc9b6a7c3e9ef3b920f994edc3a210c460977528138d41e58b9b02c94ffd\u0026#34;); var iv = CryptoJS.enc.Hex.parse(\u0026#34;6aa677d0f4d6646eec5e9a82aedb60b0\u0026#34;); console.log(key); console.log(iv); function AES_Decrypt(word) { var srcs = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Hex.parse(word)); var decrypt = CryptoJS.AES.decrypt(srcs, key, { iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 }); return decrypt.toString(CryptoJS.enc.Utf8); } url = \u0026#34;\u0026#34; data = \u0026#34;b9a35487d43ec989030037d14d27e154f69d28fc3d2ac20899b0c6479d652077\u0026#34; console.log(AES_Decrypt(data)) 最终完结, 又因为偷懒 想直接部署到服务器\n使用 express 部署 (第一次写 代码像 ? 一样)\nnpm install express npm install body-parser npm install cors --save npm install crypto-js index.js\n/* 引入express框架 */ const express = require(\u0026#39;express\u0026#39;); const app = express(); /* 引入cors */ const cors = require(\u0026#39;cors\u0026#39;); app.use(cors()); /* 引入body-parser */ const bodyParser = require(\u0026#39;body-parser\u0026#39;); const CryptoJS = require(\u0026#34;crypto-js\u0026#34;); app.use(bodyParser.json()); app.use(bodyParser.urlencoded({extended: false})); const {get_data} = require(\u0026#34;./data_decode.js\u0026#34;); app.all(\u0026#39;*\u0026#39;, function (req, res, next) { if (!req.get(\u0026#39;Origin\u0026#39;)) return next(); // use \u0026#34;*\u0026#34; here to accept any origin res.set(\u0026#39;Access-Control-Allow-Origin\u0026#39;, \u0026#39;*\u0026#39;); res.set(\u0026#39;Access-Control-Allow-Methods\u0026#39;, \u0026#39;GET\u0026#39;); res.set(\u0026#39;Access-Control-Allow-Headers\u0026#39;, \u0026#39;X-Requested-With, Content-Type\u0026#39;); // res.set(\u0026#39;Access-Control-Allow-Max-Age\u0026#39;, 3600); if (\u0026#39;OPTIONS\u0026#39; == req.method) return res.send(200); next(); }); app.get(\u0026#39;/\u0026#39;, (req, res) =\u0026gt; { res.send(\u0026#39;\u0026lt;p style=\u0026#34;color:red\u0026#34;\u0026gt;服务已启动\u0026lt;/p\u0026gt;\u0026#39;); }) // get接收前端传递过来的参数 app.post(\u0026#34;/api/post/signsafe\u0026#34;,(req,res)=\u0026gt;{ let url = req.body.url; // 接收前端传递过来的参数 console.log(url) let obj = { code: 2000, status: \u0026#39;ok\u0026#39;, data: signsafe_jami(url) } res.send(obj) }) app.get(\u0026#34;/api/get/signsafe\u0026#34;,(req,res)=\u0026gt;{ let url = req.query.url; // 接收前端传递过来的参数 console.log(url) let obj = { code: 2000, status: \u0026#39;ok\u0026#39;, data: signsafe_jami(url) } res.send(obj) } ) app.post(\u0026#34;/api/post/data\u0026#34;,(req,res)=\u0026gt;{ console.log(req.body); let data = req.body.data; // 接收前端传递过来的参数 let obj = { code: 2000, status: \u0026#39;ok\u0026#39;, data: get_data(data) } res.send(obj) }) /* 监听端口 */ app.listen(3000, () =\u0026gt; { console.log(\u0026#39;listen:3000\u0026#39;); }) function signsafe_jami(p) { p = p.replace(/^\\/|https?:\\/\\/\\/?/, \u0026#34;\u0026#34;); p = p.replace(/%2F/g, \u0026#34;/\u0026#34;); console.log(p) let f = CryptoJS.HmacSHA1(CryptoJS.enc.Utf8.parse(p), \u0026#34;D23ABC@#56\u0026#34;); f = CryptoJS.enc.Base64.stringify(f).toString(); f = CryptoJS.MD5(f).toString(); return f; } data_decode.js\nexports.get_data = AES_Decrypt var CryptoJS = require(\u0026#34;crypto-js\u0026#34;); var key = CryptoJS.enc.Hex.parse(\u0026#34;4587dc9b6a7c3e9ef3b920f994edc3a210c460977528138d41e58b9b02c94ffd\u0026#34;); var iv = CryptoJS.enc.Hex.parse(\u0026#34;6aa677d0f4d6646eec5e9a82aedb60b0\u0026#34;); console.log(key); console.log(iv); function AES_Decrypt(word) { var srcs = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Hex.parse(word)); var decrypt = CryptoJS.AES.decrypt(srcs, key, { iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 }); return decrypt.toString(CryptoJS.enc.Utf8); } 最后记录一下最开始的解密 data 代码 () Tips: 只能说 可以实现 但没必要\nexports.get_data = get_data var CryptoJS = CryptoJS || (function (Math, undefined) { var C = {}; var C_lib = C.lib = {}; var Base = C_lib.Base = (function () { function F() {}; return { extend: function (overrides) { F.prototype = this; var subtype = new F(); if (overrides) { subtype.mixIn(overrides); } if (!subtype.hasOwnProperty(\u0026#39;init\u0026#39;) || this.init === subtype.init) { subtype.init = function () { subtype.$super.init.apply(this, arguments); }; } subtype.init.prototype = subtype; subtype.$super = this; return subtype; }, create: function () { var instance = this.extend(); instance.init.apply(instance, arguments); return instance; }, init: function () {}, mixIn: function (properties) { for (var propertyName in properties) { if (properties.hasOwnProperty(propertyName)) { this[propertyName] = properties[propertyName]; } } if (properties.hasOwnProperty(\u0026#39;toString\u0026#39;)) { this.toString = properties.toString; } }, clone: function () { return this.init.prototype.extend(this); } }; }()); var WordArray = C_lib.WordArray = Base.extend({ init: function (words, sigBytes) { words = this.words = words || []; if (sigBytes != undefined) { this.sigBytes = sigBytes; } else { this.sigBytes = words.length * 4; } }, toString: function (encoder) { return (encoder || Hex).stringify(this); }, concat: function (wordArray) { var thisWords = this.words; var thatWords = wordArray.words; var thisSigBytes = this.sigBytes; var thatSigBytes = wordArray.sigBytes; this.clamp(); if (thisSigBytes % 4) { for (var i = 0; i \u0026lt; thatSigBytes; i++) { var thatByte = (thatWords[i \u0026gt;\u0026gt;\u0026gt; 2] \u0026gt;\u0026gt;\u0026gt; (24 - (i % 4) * 8)) \u0026amp; 0xff; thisWords[(thisSigBytes + i) \u0026gt;\u0026gt;\u0026gt; 2] |= thatByte \u0026lt;\u0026lt; (24 - ((thisSigBytes + i) % 4) * 8); } } else if (thatWords.length \u0026gt; 0xffff) { for (var i = 0; i \u0026lt; thatSigBytes; i += 4) { thisWords[(thisSigBytes + i) \u0026gt;\u0026gt;\u0026gt; 2] = thatWords[i \u0026gt;\u0026gt;\u0026gt; 2]; } } else { thisWords.push.apply(thisWords, thatWords); } this.sigBytes += thatSigBytes; return this; }, clamp: function () { var words = this.words; var sigBytes = this.sigBytes; words[sigBytes \u0026gt;\u0026gt;\u0026gt; 2] \u0026amp;= 0xffffffff \u0026lt;\u0026lt; (32 - (sigBytes % 4) * 8); words.length = Math.ceil(sigBytes / 4); }, clone: function () { var clone = Base.clone.call(this); clone.words = this.words.slice(0); return clone; }, random: function (nBytes) { var words = []; var r = (function (m_w) { var m_w = m_w; var m_z = 0x3ade68b1; var mask = 0xffffffff; return function () { m_z = (0x9069 * (m_z \u0026amp; 0xFFFF) + (m_z \u0026gt;\u0026gt; 0x10)) \u0026amp; mask; m_w = (0x4650 * (m_w \u0026amp; 0xFFFF) + (m_w \u0026gt;\u0026gt; 0x10)) \u0026amp; mask; var result = ((m_z \u0026lt;\u0026lt; 0x10) + m_w) \u0026amp; mask; result /= 0x100000000; result += 0.5; return result * (Math.random() \u0026gt; .5 ? 1 : -1); } }); for (var i = 0, rcache; i \u0026lt; nBytes; i += 4) { var _r = r((rcache || Math.random()) * 0x100000000); rcache = _r() * 0x3ade67b7; words.push((_r() * 0x100000000) | 0); } return new WordArray.init(words, nBytes); } }); var C_enc = C.enc = {}; var Hex = C_enc.Hex = { stringify: function (wordArray) { var words = wordArray.words; var sigBytes = wordArray.sigBytes; var hexChars = []; for (var i = 0; i \u0026lt; sigBytes; i++) { var bite = (words[i \u0026gt;\u0026gt;\u0026gt; 2] \u0026gt;\u0026gt;\u0026gt; (24 - (i % 4) * 8)) \u0026amp; 0xff; hexChars.push((bite \u0026gt;\u0026gt;\u0026gt; 4).toString(16)); hexChars.push((bite \u0026amp; 0x0f).toString(16)); } return hexChars.join(\u0026#39;\u0026#39;); }, parse: function (hexStr) { var hexStrLength = hexStr.length; var words = []; for (var i = 0; i \u0026lt; hexStrLength; i += 2) { words[i \u0026gt;\u0026gt;\u0026gt; 3] |= parseInt(hexStr.substr(i, 2), 16) \u0026lt;\u0026lt; (24 - (i % 8) * 4); } return new WordArray.init(words, hexStrLength / 2); } }; var Latin1 = C_enc.Latin1 = { stringify: function (wordArray) { var words = wordArray.words; var sigBytes = wordArray.sigBytes; var latin1Chars = []; for (var i = 0; i \u0026lt; sigBytes; i++) { var bite = (words[i \u0026gt;\u0026gt;\u0026gt; 2] \u0026gt;\u0026gt;\u0026gt; (24 - (i % 4) * 8)) \u0026amp; 0xff; latin1Chars.push(String.fromCharCode(bite)); } return latin1Chars.join(\u0026#39;\u0026#39;); }, parse: function (latin1Str) { var latin1StrLength = latin1Str.length; var words = []; for (var i = 0; i \u0026lt; latin1StrLength; i++) { words[i \u0026gt;\u0026gt;\u0026gt; 2] |= (latin1Str.charCodeAt(i) \u0026amp; 0xff) \u0026lt;\u0026lt; (24 - (i % 4) * 8); } return new WordArray.init(words, latin1StrLength); } }; var Utf8 = C_enc.Utf8 = { stringify: function (wordArray) { try { return decodeURIComponent(escape(Latin1.stringify(wordArray))); } catch (e) { throw new Error(\u0026#39;Malformed UTF-8 data\u0026#39;); } }, parse: function (utf8Str) { return Latin1.parse(unescape(encodeURIComponent(utf8Str))); } }; var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({ reset: function () { this._data = new WordArray.init(); this._nDataBytes = 0; }, _append: function (data) { if (typeof data == \u0026#39;string\u0026#39;) { data = Utf8.parse(data); } this._data.concat(data); this._nDataBytes += data.sigBytes; }, _process: function (doFlush) { var data = this._data; var dataWords = data.words; var dataSigBytes = data.sigBytes; var blockSize = this.blockSize; var blockSizeBytes = blockSize * 4; var nBlocksReady = dataSigBytes / blockSizeBytes; if (doFlush) { nBlocksReady = Math.ceil(nBlocksReady); } else { nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0); } var nWordsReady = nBlocksReady * blockSize; var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes); if (nWordsReady) { for (var offset = 0; offset \u0026lt; nWordsReady; offset += blockSize) { this._doProcessBlock(dataWords, offset); } var processedWords = dataWords.splice(0, nWordsReady); data.sigBytes -= nBytesReady; } return new WordArray.init(processedWords, nBytesReady); }, clone: function () { var clone = Base.clone.call(this); clone._data = this._data.clone(); return clone; }, _minBufferSize: 0 }); var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({ cfg: Base.extend(), init: function (cfg) { this.cfg = this.cfg.extend(cfg); this.reset(); }, reset: function () { BufferedBlockAlgorithm.reset.call(this); this._doReset(); }, update: function (messageUpdate) { this._append(messageUpdate); this._process(); return this; }, finalize: function (messageUpdate) { if (messageUpdate) { this._append(messageUpdate); } var hash = this._doFinalize(); return hash; }, blockSize: 512 / 32, _createHelper: function (hasher) { return function (message, cfg) { return new hasher.init(cfg).finalize(message); }; }, _createHmacHelper: function (hasher) { return function (message, key) { return new C_algo.HMAC.init(hasher, key).finalize(message); }; } }); var C_algo = C.algo = {}; return C; }(Math)); (function () { var C = CryptoJS; var C_lib = C.lib; var WordArray = C_lib.WordArray; var C_enc = C.enc; var Base64 = C_enc.Base64 = { stringify: function (wordArray) { var words = wordArray.words; var sigBytes = wordArray.sigBytes; var map = this._map; wordArray.clamp(); var base64Chars = []; for (var i = 0; i \u0026lt; sigBytes; i += 3) { var byte1 = (words[i \u0026gt;\u0026gt;\u0026gt; 2] \u0026gt;\u0026gt;\u0026gt; (24 - (i % 4) * 8)) \u0026amp; 0xff; var byte2 = (words[(i + 1) \u0026gt;\u0026gt;\u0026gt; 2] \u0026gt;\u0026gt;\u0026gt; (24 - ((i + 1) % 4) * 8)) \u0026amp; 0xff; var byte3 = (words[(i + 2) \u0026gt;\u0026gt;\u0026gt; 2] \u0026gt;\u0026gt;\u0026gt; (24 - ((i + 2) % 4) * 8)) \u0026amp; 0xff; var triplet = (byte1 \u0026lt;\u0026lt; 16) | (byte2 \u0026lt;\u0026lt; 8) | byte3; for (var j = 0; (j \u0026lt; 4) \u0026amp;\u0026amp; (i + j * 0.75 \u0026lt; sigBytes); j++) { base64Chars.push(map.charAt((triplet \u0026gt;\u0026gt;\u0026gt; (6 * (3 - j))) \u0026amp; 0x3f)); } } var paddingChar = map.charAt(64); if (paddingChar) { while (base64Chars.length % 4) { base64Chars.push(paddingChar); } } return base64Chars.join(\u0026#39;\u0026#39;); }, parse: function (base64Str) { var base64StrLength = base64Str.length; var map = this._map; var reverseMap = this._reverseMap; if (!reverseMap) { reverseMap = this._reverseMap = []; for (var j = 0; j \u0026lt; map.length; j++) { reverseMap[map.charCodeAt(j)] = j; } } var paddingChar = map.charAt(64); if (paddingChar) { var paddingIndex = base64Str.indexOf(paddingChar); if (paddingIndex !== -1) { base64StrLength = paddingIndex; } } return parseLoop(base64Str, base64StrLength, reverseMap); }, _map: \u0026#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\u0026#39; }; function parseLoop(base64Str, base64StrLength, reverseMap) { var words = []; var nBytes = 0; for (var i = 0; i \u0026lt; base64StrLength; i++) { if (i % 4) { var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] \u0026lt;\u0026lt; ((i % 4) * 2); var bits2 = reverseMap[base64Str.charCodeAt(i)] \u0026gt;\u0026gt;\u0026gt; (6 - (i % 4) * 2); words[nBytes \u0026gt;\u0026gt;\u0026gt; 2] |= (bits1 | bits2) \u0026lt;\u0026lt; (24 - (nBytes % 4) * 8); nBytes++; } } return WordArray.create(words, nBytes); } }()); CryptoJS.lib.Cipher || (function (undefined) { var C = CryptoJS; var C_lib = C.lib; var Base = C_lib.Base; var WordArray = C_lib.WordArray; var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm; var C_enc = C.enc; var Utf8 = C_enc.Utf8; var Base64 = C_enc.Base64; var C_algo = C.algo; var EvpKDF = C_algo.EvpKDF; var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({ cfg: Base.extend(), createEncryptor: function (key, cfg) { return this.create(this._ENC_XFORM_MODE, key, cfg); }, createDecryptor: function (key, cfg) { return this.create(this._DEC_XFORM_MODE, key, cfg); }, init: function (xformMode, key, cfg) { this.cfg = this.cfg.extend(cfg); this._xformMode = xformMode; this._key = key; this.reset(); }, reset: function () { BufferedBlockAlgorithm.reset.call(this); this._doReset(); }, process: function (dataUpdate) { this._append(dataUpdate); return this._process(); }, finalize: function (dataUpdate) { if (dataUpdate) { this._append(dataUpdate); } var finalProcessedData = this._doFinalize(); return finalProcessedData; }, keySize: 128 / 32, ivSize: 128 / 32, _ENC_XFORM_MODE: 1, _DEC_XFORM_MODE: 2, _createHelper: (function () { function selectCipherStrategy(key) { if (typeof key == \u0026#39;string\u0026#39;) { return PasswordBasedCipher; } else { return SerializableCipher; } } return function (cipher) { return { encrypt: function (message, key, cfg) { return selectCipherStrategy(key).encrypt(cipher, message, key, cfg); }, decrypt: function (ciphertext, key, cfg) { return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg); } }; }; }()) }); var StreamCipher = C_lib.StreamCipher = Cipher.extend({ _doFinalize: function () { var finalProcessedBlocks = this._process(!!\u0026#39;flush\u0026#39;); return finalProcessedBlocks; }, blockSize: 1 }); var C_mode = C.mode = {}; var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({ createEncryptor: function (cipher, iv) { return this.Encryptor.create(cipher, iv); }, createDecryptor: function (cipher, iv) { return this.Decryptor.create(cipher, iv); }, init: function (cipher, iv) { this._cipher = cipher; this._iv = iv; } }); var CBC = C_mode.CBC = (function () { var CBC = BlockCipherMode.extend(); CBC.Encryptor = CBC.extend({ processBlock: function (words, offset) { var cipher = this._cipher; var blockSize = cipher.blockSize; xorBlock.call(this, words, offset, blockSize); cipher.encryptBlock(words, offset); this._prevBlock = words.slice(offset, offset + blockSize); } }); CBC.Decryptor = CBC.extend({ processBlock: function (words, offset) { var cipher = this._cipher; var blockSize = cipher.blockSize; var thisBlock = words.slice(offset, offset + blockSize); cipher.decryptBlock(words, offset); xorBlock.call(this, words, offset, blockSize); this._prevBlock = thisBlock; } }); function xorBlock(words, offset, blockSize) { var iv = this._iv; if (iv) { var block = iv; this._iv = undefined; } else { var block = this._prevBlock; } for (var i = 0; i \u0026lt; blockSize; i++) { words[offset + i] ^= block[i]; } } return CBC; }()); var C_pad = C.pad = {}; var Pkcs7 = C_pad.Pkcs7 = { pad: function (data, blockSize) { var blockSizeBytes = blockSize * 4; var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes; var paddingWord = (nPaddingBytes \u0026lt;\u0026lt; 24) | (nPaddingBytes \u0026lt;\u0026lt; 16) | (nPaddingBytes \u0026lt;\u0026lt; 8) | nPaddingBytes; var paddingWords = []; for (var i = 0; i \u0026lt; nPaddingBytes; i += 4) { paddingWords.push(paddingWord); } var padding = WordArray.create(paddingWords, nPaddingBytes); data.concat(padding); }, unpad: function (data) { var nPaddingBytes = data.words[(data.sigBytes - 1) \u0026gt;\u0026gt;\u0026gt; 2] \u0026amp; 0xff; data.sigBytes -= nPaddingBytes; } }; var BlockCipher = C_lib.BlockCipher = Cipher.extend({ cfg: Cipher.cfg.extend({ mode: CBC, padding: Pkcs7 }), reset: function () { Cipher.reset.call(this); var cfg = this.cfg; var iv = cfg.iv; var mode = cfg.mode; if (this._xformMode == this._ENC_XFORM_MODE) { var modeCreator = mode.createEncryptor; } else { var modeCreator = mode.createDecryptor; this._minBufferSize = 1; } if (this._mode \u0026amp;\u0026amp; this._mode.__creator == modeCreator) { this._mode.init(this, iv \u0026amp;\u0026amp; iv.words); } else { this._mode = modeCreator.call(mode, this, iv \u0026amp;\u0026amp; iv.words); this._mode.__creator = modeCreator; } }, _doProcessBlock: function (words, offset) { this._mode.processBlock(words, offset); }, _doFinalize: function () { var padding = this.cfg.padding; if (this._xformMode == this._ENC_XFORM_MODE) { padding.pad(this._data, this.blockSize); var finalProcessedBlocks = this._process(!!\u0026#39;flush\u0026#39;); } else { var finalProcessedBlocks = this._process(!!\u0026#39;flush\u0026#39;); padding.unpad(finalProcessedBlocks); } return finalProcessedBlocks; }, blockSize: 128 / 32 }); var CipherParams = C_lib.CipherParams = Base.extend({ init: function (cipherParams) { this.mixIn(cipherParams); }, toString: function (formatter) { return (formatter || this.formatter).stringify(this); } }); var C_format = C.format = {}; var OpenSSLFormatter = C_format.OpenSSL = { stringify: function (cipherParams) { var ciphertext = cipherParams.ciphertext; var salt = cipherParams.salt; if (salt) { var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext); } else { var wordArray = ciphertext; } return wordArray.toString(Base64); }, parse: function (openSSLStr) { var ciphertext = Base64.parse(openSSLStr); var ciphertextWords = ciphertext.words; if (ciphertextWords[0] == 0x53616c74 \u0026amp;\u0026amp; ciphertextWords[1] == 0x65645f5f) { var salt = WordArray.create(ciphertextWords.slice(2, 4)); ciphertextWords.splice(0, 4); ciphertext.sigBytes -= 16; } return CipherParams.create({ ciphertext: ciphertext, salt: salt }); } }; var SerializableCipher = C_lib.SerializableCipher = Base.extend({ cfg: Base.extend({ format: OpenSSLFormatter }), encrypt: function (cipher, message, key, cfg) { cfg = this.cfg.extend(cfg); var encryptor = cipher.createEncryptor(key, cfg); var ciphertext = encryptor.finalize(message); var cipherCfg = encryptor.cfg; return CipherParams.create({ ciphertext: ciphertext, key: key, iv: cipherCfg.iv, algorithm: cipher, mode: cipherCfg.mode, padding: cipherCfg.padding, blockSize: cipher.blockSize, formatter: cfg.format }); }, decrypt: function (cipher, ciphertext, key, cfg) { cfg = this.cfg.extend(cfg); ciphertext = this._parse(ciphertext, cfg.format); var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext); return plaintext; }, _parse: function (ciphertext, format) { if (typeof ciphertext == \u0026#39;string\u0026#39;) { return format.parse(ciphertext, this); } else { return ciphertext; } } }); var C_kdf = C.kdf = {}; var OpenSSLKdf = C_kdf.OpenSSL = { execute: function (password, keySize, ivSize, salt) { if (!salt) { salt = WordArray.random(64 / 8); } var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt); var iv = WordArray.create(key.words.slice(keySize), ivSize * 4); key.sigBytes = keySize * 4; return CipherParams.create({ key: key, iv: iv, salt: salt }); } }; var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({ cfg: SerializableCipher.cfg.extend({ kdf: OpenSSLKdf }), encrypt: function (cipher, message, password, cfg) { cfg = this.cfg.extend(cfg); var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize); cfg.iv = derivedParams.iv; var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg); ciphertext.mixIn(derivedParams); return ciphertext; }, decrypt: function (cipher, ciphertext, password, cfg) { cfg = this.cfg.extend(cfg); ciphertext = this._parse(ciphertext, cfg.format); var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt); cfg.iv = derivedParams.iv; var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg); return plaintext; } }); }()); (function () { var C = CryptoJS; var C_lib = C.lib; var BlockCipher = C_lib.BlockCipher; var C_algo = C.algo; var SBOX = []; var INV_SBOX = []; var SUB_MIX_0 = []; var SUB_MIX_1 = []; var SUB_MIX_2 = []; var SUB_MIX_3 = []; var INV_SUB_MIX_0 = []; var INV_SUB_MIX_1 = []; var INV_SUB_MIX_2 = []; var INV_SUB_MIX_3 = []; (function () { var d = []; for (var i = 0; i \u0026lt; 256; i++) { if (i \u0026lt; 128) { d[i] = i \u0026lt;\u0026lt; 1; } else { d[i] = (i \u0026lt;\u0026lt; 1) ^ 0x11b; } } var x = 0; var xi = 0; for (var i = 0; i \u0026lt; 256; i++) { var sx = xi ^ (xi \u0026lt;\u0026lt; 1) ^ (xi \u0026lt;\u0026lt; 2) ^ (xi \u0026lt;\u0026lt; 3) ^ (xi \u0026lt;\u0026lt; 4); sx = (sx \u0026gt;\u0026gt;\u0026gt; 8) ^ (sx \u0026amp; 0xff) ^ 0x63; SBOX[x] = sx; INV_SBOX[sx] = x; var x2 = d[x]; var x4 = d[x2]; var x8 = d[x4]; var t = (d[sx] * 0x101) ^ (sx * 0x1010100); SUB_MIX_0[x] = (t \u0026lt;\u0026lt; 24) | (t \u0026gt;\u0026gt;\u0026gt; 8); SUB_MIX_1[x] = (t \u0026lt;\u0026lt; 16) | (t \u0026gt;\u0026gt;\u0026gt; 16); SUB_MIX_2[x] = (t \u0026lt;\u0026lt; 8) | (t \u0026gt;\u0026gt;\u0026gt; 24); SUB_MIX_3[x] = t; var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100); INV_SUB_MIX_0[sx] = (t \u0026lt;\u0026lt; 24) | (t \u0026gt;\u0026gt;\u0026gt; 8); INV_SUB_MIX_1[sx] = (t \u0026lt;\u0026lt; 16) | (t \u0026gt;\u0026gt;\u0026gt; 16); INV_SUB_MIX_2[sx] = (t \u0026lt;\u0026lt; 8) | (t \u0026gt;\u0026gt;\u0026gt; 24); INV_SUB_MIX_3[sx] = t; if (!x) { x = xi = 1; } else { x = x2 ^ d[d[d[x8 ^ x2]]]; xi ^= d[d[xi]]; } } }()); var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]; var AES = C_algo.AES = BlockCipher.extend({ _doReset: function () { if (this._nRounds \u0026amp;\u0026amp; this._keyPriorReset === this._key) { return; } var key = this._keyPriorReset = this._key; var keyWords = key.words; var keySize = key.sigBytes / 4; var nRounds = this._nRounds = keySize + 6; var ksRows = (nRounds + 1) * 4; var keySchedule = this._keySchedule = []; for (var ksRow = 0; ksRow \u0026lt; ksRows; ksRow++) { if (ksRow \u0026lt; keySize) { keySchedule[ksRow] = keyWords[ksRow]; } else { var t = keySchedule[ksRow - 1]; if (!(ksRow % keySize)) { t = (t \u0026lt;\u0026lt; 8) | (t \u0026gt;\u0026gt;\u0026gt; 24); t = (SBOX[t \u0026gt;\u0026gt;\u0026gt; 24] \u0026lt;\u0026lt; 24) | (SBOX[(t \u0026gt;\u0026gt;\u0026gt; 16) \u0026amp; 0xff] \u0026lt;\u0026lt; 16) | (SBOX[(t \u0026gt;\u0026gt;\u0026gt; 8) \u0026amp; 0xff] \u0026lt;\u0026lt; 8) | SBOX[t \u0026amp; 0xff]; t ^= RCON[(ksRow / keySize) | 0] \u0026lt;\u0026lt; 24; } else if (keySize \u0026gt; 6 \u0026amp;\u0026amp; ksRow % keySize == 4) { t = (SBOX[t \u0026gt;\u0026gt;\u0026gt; 24] \u0026lt;\u0026lt; 24) | (SBOX[(t \u0026gt;\u0026gt;\u0026gt; 16) \u0026amp; 0xff] \u0026lt;\u0026lt; 16) | (SBOX[(t \u0026gt;\u0026gt;\u0026gt; 8) \u0026amp; 0xff] \u0026lt;\u0026lt; 8) | SBOX[t \u0026amp; 0xff]; } keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t; } } var invKeySchedule = this._invKeySchedule = []; for (var invKsRow = 0; invKsRow \u0026lt; ksRows; invKsRow++) { var ksRow = ksRows - invKsRow; if (invKsRow % 4) { var t = keySchedule[ksRow]; } else { var t = keySchedule[ksRow - 4]; } if (invKsRow \u0026lt; 4 || ksRow \u0026lt;= 4) { invKeySchedule[invKsRow] = t; } else { invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t \u0026gt;\u0026gt;\u0026gt; 24]] ^ INV_SUB_MIX_1[SBOX[(t \u0026gt;\u0026gt;\u0026gt; 16) \u0026amp; 0xff]] ^ INV_SUB_MIX_2[SBOX[(t \u0026gt;\u0026gt;\u0026gt; 8) \u0026amp; 0xff]] ^ INV_SUB_MIX_3[SBOX[t \u0026amp; 0xff]]; } } }, encryptBlock: function (M, offset) { this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX); }, decryptBlock: function (M, offset) { var t = M[offset + 1]; M[offset + 1] = M[offset + 3]; M[offset + 3] = t; this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX); var t = M[offset + 1]; M[offset + 1] = M[offset + 3]; M[offset + 3] = t; }, _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) { var nRounds = this._nRounds; var s0 = M[offset] ^ keySchedule[0]; var s1 = M[offset + 1] ^ keySchedule[1]; var s2 = M[offset + 2] ^ keySchedule[2]; var s3 = M[offset + 3] ^ keySchedule[3]; var ksRow = 4; for (var round = 1; round \u0026lt; nRounds; round++) { var t0 = SUB_MIX_0[s0 \u0026gt;\u0026gt;\u0026gt; 24] ^ SUB_MIX_1[(s1 \u0026gt;\u0026gt;\u0026gt; 16) \u0026amp; 0xff] ^ SUB_MIX_2[(s2 \u0026gt;\u0026gt;\u0026gt; 8) \u0026amp; 0xff] ^ SUB_MIX_3[s3 \u0026amp; 0xff] ^ keySchedule[ksRow++]; var t1 = SUB_MIX_0[s1 \u0026gt;\u0026gt;\u0026gt; 24] ^ SUB_MIX_1[(s2 \u0026gt;\u0026gt;\u0026gt; 16) \u0026amp; 0xff] ^ SUB_MIX_2[(s3 \u0026gt;\u0026gt;\u0026gt; 8) \u0026amp; 0xff] ^ SUB_MIX_3[s0 \u0026amp; 0xff] ^ keySchedule[ksRow++]; var t2 = SUB_MIX_0[s2 \u0026gt;\u0026gt;\u0026gt; 24] ^ SUB_MIX_1[(s3 \u0026gt;\u0026gt;\u0026gt; 16) \u0026amp; 0xff] ^ SUB_MIX_2[(s0 \u0026gt;\u0026gt;\u0026gt; 8) \u0026amp; 0xff] ^ SUB_MIX_3[s1 \u0026amp; 0xff] ^ keySchedule[ksRow++]; var t3 = SUB_MIX_0[s3 \u0026gt;\u0026gt;\u0026gt; 24] ^ SUB_MIX_1[(s0 \u0026gt;\u0026gt;\u0026gt; 16) \u0026amp; 0xff] ^ SUB_MIX_2[(s1 \u0026gt;\u0026gt;\u0026gt; 8) \u0026amp; 0xff] ^ SUB_MIX_3[s2 \u0026amp; 0xff] ^ keySchedule[ksRow++]; s0 = t0; s1 = t1; s2 = t2; s3 = t3; } var t0 = ((SBOX[s0 \u0026gt;\u0026gt;\u0026gt; 24] \u0026lt;\u0026lt; 24) | (SBOX[(s1 \u0026gt;\u0026gt;\u0026gt; 16) \u0026amp; 0xff] \u0026lt;\u0026lt; 16) | (SBOX[(s2 \u0026gt;\u0026gt;\u0026gt; 8) \u0026amp; 0xff] \u0026lt;\u0026lt; 8) | SBOX[s3 \u0026amp; 0xff]) ^ keySchedule[ksRow++]; var t1 = ((SBOX[s1 \u0026gt;\u0026gt;\u0026gt; 24] \u0026lt;\u0026lt; 24) | (SBOX[(s2 \u0026gt;\u0026gt;\u0026gt; 16) \u0026amp; 0xff] \u0026lt;\u0026lt; 16) | (SBOX[(s3 \u0026gt;\u0026gt;\u0026gt; 8) \u0026amp; 0xff] \u0026lt;\u0026lt; 8) | SBOX[s0 \u0026amp; 0xff]) ^ keySchedule[ksRow++]; var t2 = ((SBOX[s2 \u0026gt;\u0026gt;\u0026gt; 24] \u0026lt;\u0026lt; 24) | (SBOX[(s3 \u0026gt;\u0026gt;\u0026gt; 16) \u0026amp; 0xff] \u0026lt;\u0026lt; 16) | (SBOX[(s0 \u0026gt;\u0026gt;\u0026gt; 8) \u0026amp; 0xff] \u0026lt;\u0026lt; 8) | SBOX[s1 \u0026amp; 0xff]) ^ keySchedule[ksRow++]; var t3 = ((SBOX[s3 \u0026gt;\u0026gt;\u0026gt; 24] \u0026lt;\u0026lt; 24) | (SBOX[(s0 \u0026gt;\u0026gt;\u0026gt; 16) \u0026amp; 0xff] \u0026lt;\u0026lt; 16) | (SBOX[(s1 \u0026gt;\u0026gt;\u0026gt; 8) \u0026amp; 0xff] \u0026lt;\u0026lt; 8) | SBOX[s2 \u0026amp; 0xff]) ^ keySchedule[ksRow++]; M[offset] = t0; M[offset + 1] = t1; M[offset + 2] = t2; M[offset + 3] = t3; }, keySize: 256 / 32 }); C.AES = BlockCipher._createHelper(AES); }()); var key = CryptoJS.enc.Hex.parse(\u0026#34;4587dc9b6a7c3e9ef3b920f994edc3a210c460977528138d41e58b9b02c94ffd\u0026#34;); var iv = CryptoJS.enc.Hex.parse(\u0026#34;6aa677d0f4d6646eec5e9a82aedb60b0\u0026#34;); function AES_Encrypt(word) { var srcs = CryptoJS.enc.Utf8.parse(word); var encrypted = CryptoJS.AES.encrypt(srcs, key, { iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 }); return CryptoJS.enc.Hex.stringify(CryptoJS.enc.Base64.parse(encrypted.toString())); } function AES_Decrypt(word) { var srcs = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Hex.parse(word)); var decrypt = CryptoJS.AES.decrypt(srcs, key, { iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 }); return decrypt.toString(CryptoJS.enc.Utf8); } function get_data(data){ return AES_Decrypt(data) } ","permalink":"https://waite.wang/posts/python/cawler-from-zhangshang-college-page/","summary":"\u003cblockquote\u003e\n\u003cp\u003e以下代码取的是院校专业分数线\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003cimg alt=\"_20221027212744\" loading=\"lazy\" src=\"https://qiniu.waite.wang/202309151459082.png\"\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eF12 得到接口\u003cbr\u003e\n\u003ca href=\"https://api.eol.cn/web/api/?local\"\u003ehttps://api.eol.cn/web/api/?local\u003c/a\u003e_batch_id=14\u0026amp;local_province_id=31\u0026amp;local_type_id=3\u0026amp;page=1\u0026amp;school_id=31\u0026amp;size=10\u0026amp;special_group=\u0026amp;uri=apidata/api/gk/score/special\u0026amp;year=2021\u0026amp;signsafe=6cdbc334a395abd2a99b9bd8cc29c42f\u003cbr\u003e\n\u003cimg alt=\"_20221027213021\" loading=\"lazy\" src=\"https://qiniu.waite.wang/202309151459515.png\"\u003e\u003c/p\u003e\n\u003cp\u003e推断参数含义\n\u003cimg alt=\"_20221027213205\" loading=\"lazy\" src=\"https://qiniu.waite.wang/202309151459905.png\"\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"signsafe-数据加密签名获取\"\u003esignsafe 数据加密签名获取\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003e搜索 锁定 signsafe 字段以及加密\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003cimg alt=\"image\" loading=\"lazy\" src=\"https://qiniu.waite.wang/202309151459897.png\"\u003e\u003c/p\u003e\n\u003cp\u003e以上看到，t就是请求中的signsafe参数。而且，函数中也出现了HmacSHA1、base64等方法。由此可知，定位的加密位置是正确的。接下来需要将加密函数抠下来改写，方便调用。下断点继续跟踪方法调用。跟踪v.a.enc.Utf8.parse方法，如下多次尝试, 最终试出\u003c/p\u003e","title":"某高考平台逆向"},{"content":" 参考 https://answers.microsoft.com/zh-hans/windows/forum/all/win11%E6%97%A0%E6%B3%95%E6%8A%8A%E8%99%9A%E6%8B%9F/50381a46-ce77-40f5-8bde-a9d01b361e6c\n解决: WIN11无法把虚拟内存更改到其他盘，改完后重启显示由于启动页面文件配置的问题,然后虚拟内存又回c盘了\n分页文件更改 此电脑 -\u0026gt; 右键属性 -\u0026gt; 高级系统设置 选择高级 -\u0026gt; 性能(设置) -\u0026gt; 高级 -\u0026gt; 虚拟内存 -\u0026gt; 更改 取消勾选“自动管理所有驱动器的分页文件大小\u0026quot; C -\u0026gt; 无分页文件 -\u0026gt; 设置 D -\u0026gt; 自定义大小 -\u0026gt; 建议最小在 1.5 倍数以上 输入虚拟内存大小后请务在设置的虚拟内存大小右侧点击“设置”后再点击“确定”/“应用”，否则虚拟内存配量将不生效。 重启 提示以及解决方案 通过修该键值解决问题一般是因为当前开启了Bitlocker，所以对于虚拟内存的修改做出了一些限制。 解决此限制\nwin键+R， 输入：regedit 打开注册表编辑器 找到：HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Session Manager\\Memory Management 然后PagefileOnOsVolume和ExistingPageFiles，将PagefileOnOsVolume 的值由默认的1改为0，ExistingPageFiles里面的C:改为你要更换的盘符名。 ","permalink":"https://waite.wang/posts/win/modify-virtual-memory-to-other-disk/","summary":"\u003cblockquote\u003e\n\u003cp\u003e参考 \u003ca href=\"https://answers.microsoft.com/zh-hans/windows/forum/all/win11%E6%97%A0%E6%B3%95%E6%8A%8A%E8%99%9A%E6%8B%9F/50381a46-ce77-40f5-8bde-a9d01b361e6c\"\u003ehttps://answers.microsoft.com/zh-hans/windows/forum/all/win11%E6%97%A0%E6%B3%95%E6%8A%8A%E8%99%9A%E6%8B%9F/50381a46-ce77-40f5-8bde-a9d01b361e6c\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e解决: WIN11无法把虚拟内存更改到其他盘，改完后重启显示由于启动页面文件配置的问题,然后虚拟内存又回c盘了\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"分页文件更改\"\u003e分页文件更改\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e此电脑 -\u0026gt; 右键属性 -\u0026gt; 高级系统设置\u003c/li\u003e\n\u003cli\u003e选择高级 -\u0026gt; 性能(设置) -\u0026gt; 高级 -\u0026gt; 虚拟内存 -\u0026gt; 更改\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://qiniu.waite.wang/20230903163805.png\"\u003e\u003c/p\u003e","title":"Win11 改虚拟内存到C盘之外的盘"},{"content":"安装 MinGW MinGW（Minimalist GNU for Windows）, 是一个适用于微软windows应用程序的极简洁的开发环境。MinGW提供了一个完整的开源编程工具集，适用于原生MS-Windows应用程序的开发，并且不依赖于任何第三方C运行时DLL。MinGW主要供在MS-Windows平台上工作的开发人员使用，但也可跨平台使用。\n安装 https://sourceforge.net/projects/mingw-w64/files/ 解压 配置 环境变量 到 bin 目录 验证 gcc -v 查看版本号\n新建文件 test.c\n#include \u0026lt;stdio.h\u0026gt; int main() { printf(\u0026#34;hello world\\n\u0026#34;); return 0; } gcc test.c -o test\ntest.exe\nVsCode 配置 插件安装 C/C++\nCode Runner\n设置 code runner 右键 扩展设置 勾选以下 打开项目 在打开的文件夹中新建一个名为“.vscode”的子文件夹\n选中“.vscode”子文件夹，新增三个配置文件”c_cpp_propertise.json“、”launch.json“、”tasks.json“\n以下 C:/mingw64/ 替换为 自己路径\nc_cpp_propertise.json\n{ \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Win32\u0026#34;, \u0026#34;includePath\u0026#34;: [ \u0026#34;${workspaceRoot}\u0026#34;, \u0026#34;C:/mingw64/include/**\u0026#34;, \u0026#34;C:/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++\u0026#34;, \u0026#34;C:/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++/x86_64-w64-mingw32\u0026#34;, \u0026#34;C:/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++/backward\u0026#34;, \u0026#34;C:/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/include\u0026#34;, \u0026#34;C:/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/include-fixed\u0026#34;, \u0026#34;C:/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/../../../../x86_64-w64-mingw32/include\u0026#34; ], \u0026#34;defines\u0026#34;: [ \u0026#34;_DEBUG\u0026#34;, \u0026#34;UNICODE\u0026#34;, \u0026#34;__GNUC__=6\u0026#34;, \u0026#34;__cdecl=__attribute__((__cdecl__))\u0026#34; ], \u0026#34;intelliSenseMode\u0026#34;: \u0026#34;msvc-x64\u0026#34;, \u0026#34;browse\u0026#34;: { \u0026#34;limitSymbolsToIncludedHeaders\u0026#34;: true, \u0026#34;databaseFilename\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;path\u0026#34;: [ \u0026#34;${workspaceRoot}\u0026#34;, \u0026#34;C:/mingw64/include/**\u0026#34;, \u0026#34;C:/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++\u0026#34;, \u0026#34;C:/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++/x86_64-w64-mingw32\u0026#34;, \u0026#34;C:/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++/backward\u0026#34;, \u0026#34;C:/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/include\u0026#34;, \u0026#34;C:/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/include-fixed\u0026#34;, \u0026#34;C:/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/../../../../x86_64-w64-mingw32/include\u0026#34; ] } } ], \u0026#34;version\u0026#34;: 4 } launch.json { \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;(gdb) Launch\u0026#34;, // 配置名称，将会在启动配置的下拉菜单中显示 \u0026#34;type\u0026#34;: \u0026#34;cppdbg\u0026#34;, // 配置类型，这里只能为cppdbg \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, //请求配置类型，可以为launch（启动）或attach（附加） \u0026#34;program\u0026#34;: \u0026#34;${workspaceFolder}/${fileBasenameNoExtension}.exe\u0026#34;, // 将要进行调试的程序的路径 \u0026#34;args\u0026#34;: [], // 程序调试时传递给程序的命令行参数，一般设为空即可 \u0026#34;stopAtEntry\u0026#34;: false, // 设为true时程序将暂停在程序入口处，一般设置为false \u0026#34;cwd\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34;, // 调试程序时的工作目录，一般为${workspaceRoot}即代码所在目录workspaceRoot已被弃用，现改为workspaceFolder \u0026#34;environment\u0026#34;: [], \u0026#34;externalConsole\u0026#34;: true, // 调试时是否显示控制台窗口，一般设置为true显示控制台 \u0026#34;MIMode\u0026#34;: \u0026#34;gdb\u0026#34;, \u0026#34;miDebuggerPath\u0026#34;: \u0026#34;C:/mingw64/bin/gdb.exe\u0026#34;, // miDebugger的路径，注意这里要与MinGw的路径对应 \u0026#34;preLaunchTask\u0026#34;: \u0026#34;gcc\u0026#34;, // 调试会话开始前执行的任务，一般为编译程序，c++为g++, c为gcc \u0026#34;setupCommands\u0026#34;: [ { \u0026#34;description\u0026#34;: \u0026#34;Enable pretty-printing for gdb\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;-enable-pretty-printing\u0026#34;, \u0026#34;ignoreFailures\u0026#34;: false } ] } ] } tasks.json { \u0026#34;version\u0026#34;: \u0026#34;2.0.0\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;gcc\u0026#34;, // 注意对应 \u0026#34;args\u0026#34;: [ \u0026#34;-g\u0026#34;, \u0026#34;${file}\u0026#34;, \u0026#34;-o\u0026#34;, \u0026#34;${fileBasenameNoExtension}.exe\u0026#34; ], // 编译命令参数 \u0026#34;problemMatcher\u0026#34;: { \u0026#34;owner\u0026#34;: \u0026#34;cpp\u0026#34;, \u0026#34;fileLocation\u0026#34;: [ \u0026#34;relative\u0026#34;, \u0026#34;${workspaceFolder}\u0026#34; ], \u0026#34;pattern\u0026#34;: { \u0026#34;regexp\u0026#34;: \u0026#34;^(.*):(\\\\d+):(\\\\d+):\\\\s+(warning|error):\\\\s+(.*)$\u0026#34;, \u0026#34;file\u0026#34;: 1, \u0026#34;line\u0026#34;: 2, \u0026#34;column\u0026#34;: 3, \u0026#34;severity\u0026#34;: 4, \u0026#34;message\u0026#34;: 5 } } } 运行 新建 hello.c #include \u0026lt;stdio.h\u0026gt; int main(void){ printf(\u0026#34;hello world! I\\\u0026#39; m VSCode\\n\u0026#34;); return 0; } 右键 Run Code ","permalink":"https://waite.wang/posts/win/gcc-install-and-use-in-vscode/","summary":"\u003ch2 id=\"安装-mingw\"\u003e安装 MinGW\u003c/h2\u003e\n\u003cp\u003eMinGW（Minimalist GNU for Windows）, 是一个适用于微软windows应用程序的极简洁的开发环境。MinGW提供了一个完整的开源编程工具集，适用于原生MS-Windows应用程序的开发，并且不依赖于任何第三方C运行时DLL。MinGW主要供在MS-Windows平台上工作的开发人员使用，但也可跨平台使用。\u003c/p\u003e","title":"gcc 安装 + vscode 搭建"},{"content":"什么是 TypeScript TypeScript既是一种语言又是一组工具。TypeScript是JavaScript的一个超集。换句话说，TypeScript是JavaScript加上一些额外的功能。\nTypeScript 扩展了 JavaScript 的语法，所以任何现有的 JavaScript 程序可以不加改变的在 TypeScript 下工作。TypeScript 是为大型应用之开发而设计，而编译时它产生 JavaScript 以确保兼容性。\nTypeScript 可以编译出纯净、 简洁的 JavaScript 代码，并且可以运行在任何浏览器上、Node.js 环境中和任何支持 ECMAScript 3（或更高版本）的 JavaScript 引擎中。\nTypeScript的组成部分 语言 - 它包括语法，关键字和类型注释。\n编译器 - TypeScript编译器（TSC）将使用TypeScript编写的指令转换为其等效的JavaScript。\n语言服务 - “TypeScript语言服务”在核心编译管道周围公开了一个额外的层，它是类似编辑器的应用程序。语言服务支持常见的编辑器操作集，如语句完成，签名帮助，代码格式化和大纲，着色等。\nTypescript 官网地址: https://www.typescriptlang.org/zh/\n使用 nvm 来管理 node 版本: https://github.com/nvm-sh/nvm\n安装 Typescript: npm install -g typescript 使用 tsc 全局命令：\n// 查看 tsc 版本 tsc -v // 编译 ts 文件 tsc fileName.ts // 使用 tsc -v 查看是否安装成功, 若成功返回 typescript 版本号 // 链接失败使用淘宝镜像 npm config set registry https://registry.npm.taobao.org TypeScript 转 JavaScript cmd 到文件目录 tsc 文件名.ts WebStorm 中自动转换, 勾选 Recompile on change, Webstorm 中勾选如下 类型声明 Boolean、Number let val2:boolean; val2 = true; // val2 = 1; // 会报错 console.log(val2); let val1:number; // 定义了一个名称叫做val1的变量, 这个变量中将来只能存储数值类型的数据 val1 = 123; // val1 = \u0026#34;123\u0026#34;; // 会报错 console.log(val1); String 多行字符串 let hello: string = `Welcome to W3cschool`; // 类似于 \u0026#34;Welcome to \\nW3cschool\u0026#34;; 内嵌表达式 let name: string = `Loen`; let age: number = 37; let sentence: string = `Hello, my name is ${ name }. I\u0026#39;ll be ${ age + 1 } years old next month.`; // 类似于 \u0026#34;Hello, my name is \u0026#34; + name + \u0026#34;.\\nI\u0026#39;ll be \u0026#34; + (age + 1) + \u0026#34; years old next month.\u0026#34;; // 和 format 性质差不多 自动拆分字符串 function userinfo(params,name,age){ console.log(params); console.log(name); console.log(age); } let myname = \u0026#34;Loen Wang\u0026#34;; let getAge = function(){ return 18; } // 调用 userinfo`hello my name is ${myname}, i\u0026#39;m ${getAge()}` 数组和元祖 数组数据类型一致 Array \u0026lt; number \u0026gt; // 需求: 要求定义一个数组, 这个数组中将来只能存储数值类型的数据 let arr1: Array\u0026lt;number\u0026gt;; // 表示定义了一个名称叫做arr1的数组, 这个数组中将来只能够存储数值类型的数据 arr1 = [1, 3, 5]; // arr1 = [\u0026#39;a\u0026#39;, 3, 5]; // 报错 console.log(arr1); string[ ] // 需求: 要求定义一个数组, 这个数组中将来只能存储字符串类型的数据 let arr2:string[]; // 表示定义了一个名称叫做arr2的数组, 这个数组中将来只能够存储字符串类型的数据 arr2 = [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;]; // arr2 = [1, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;]; // 报错 console.log(arr2); 数组数据类型不一致 联合类型声明数组 (number | string)[ ]\nlet arr3:(number | string)[]; // 表示定义了一个名称叫做arr3的数组, 这个数组中将来既可以存储数值类型的数据, 也可以存储字符串类型的数据 arr3 = [1, \u0026#39;b\u0026#39;, 2, \u0026#39;c\u0026#39;]; // arr3 = [1, \u0026#39;b\u0026#39;, 2, \u0026#39;c\u0026#39;, false]; // 报错 console.log(arr3); 自由任意类型元素的数组 如果不希望类型检查器对值进行检查,直接通过编译阶段的检查。 那么我们可以使用 any 类型来标记这些变量 let notSure: any = 4; notSure = \u0026#34;这是一个字符串\u0026#34;; notSure = false; // 现在我们又可以将其改成布尔类型 当你只知道一部分数据的类型时，any类型也是有用的。 比如，你有一个数组，它包含了不同的类型的数据： let arr4:any[]; // 表示定义了一个名称叫做arr4的数组, 这个数组中将来可以存储任意类型的数据 arr4 = [1, \u0026#39;b\u0026#39;, false]; console.log(arr4); 严格限制类型和长度的元祖数组 {% note blue \u0026rsquo;\u0026rsquo; flat %}\nTS中的元祖类型其实就是数组类型的扩展,元祖用于保存定长定数据类型的数据\n{% endnote %}\nlet arr5:[string, number, boolean]; // 表示定义了一个名称叫做arr5的元祖, 这个元祖中将来可以存储3个元素, 第一个元素必须是字符串类型, 第二个元素必须是数字类型, 第三个元素必须是布尔类型 arr5 = [\u0026#39;a\u0026#39;, 1, true]; // arr5 = [\u0026#39;a\u0026#39;, 1, true, false]; // 超过指定的长度会报错 arr5 = [\u0026#39;a\u0026#39;, 1, true]; console.log(arr5); enum枚举 枚举用于表示固定的几个取值,例如: 一年只有四季、人的性别只能是男或者女。 枚举类型是TS为JS扩展的一种类型, 在原生的JS中是没有枚举类型的。\nenum Color {Red, Green, Blue} let c: Color = Color.Green; // 默认情况下，从0开始为元素编号。 你也可以手动的指定成员的数值 // tips: enum Color {Red = 1, Green, Blue} let c: Color = Color.Green; // 或者 enum Color {Red = 1, Green = 2, Blue = 4} let c: Color = Color.Green; /* 枚举类型提供的一个便利是你可以由枚举的值得到它的名字。 例如，我们知道数值为2，但是不确定它映射到Color里的哪个名字， 我们可以查找相应的名字： */ enum Color {Red = 1, Green, Blue} let colorName: string = Color[2]; alert(colorName); // 显示\u0026#39;Green\u0026#39;因为上面代码里它的值是2 Any、Void any表示任意类型, 当我们不清楚某个值的具体类型的时候我们就可以使用any，任何数据类型的值都可以赋值给any类型, 一般用于定义一些通用性比较强的变量, 或者用于保存从其它框架中获取的不确定类型的值\nlet value:any; // 定义了一个可以保存任意类型数据的变量 value = 123; value = \u0026#34;abc\u0026#34;; value = true; value = [1, 3, 5]; void与any正好相反, 表示没有任何类型, 一般用于函数返回值。在TS中只有null和undefined可以赋值给void类型\nfunction test():void { console.log(\u0026#34;hello world\u0026#34;); } test(); let value:void; // 定义了一个不可以保存任意类型数据的变量, 只能保存null和undefined // value = 123; // 报错 // value = \u0026#34;abc\u0026#34;;// 报错 // value = true;// 报错 // 注意点: null和undefined是所有类型的子类型, 所以我们可以将null和undefined赋值给任意类型 // value = null; // 不会报错 value = undefined;// 不会报错 Never 表示的是那些永不存在的值的类型,一般用于抛出异常或根本不可能有返回值的函数。\nNever 可以赋值给任意类型, 但其他类型不可以赋值给 Never\n// 返回never的函数必须存在无法达到的终点 function error(message: string): never { throw new Error(message); } // 推断的返回值类型为never function fail() { return error(\u0026#34;Something failed\u0026#34;); } // 返回never的函数必须存在无法达到的终点 function infiniteLoop(): never { while (true) { } } Object 对象 let obj:object; // 定义了一个只能保存对象的变量 // obj = 1; // obj = \u0026#34;123\u0026#34;; // obj = true; obj = {name:\u0026#39;lnj\u0026#39;, age:33}; console.log(obj); interface 接口 基本用法 interface Person { firstName: string; lastName: string; } function hello(person: Person) { return \u0026#34;Hello, \u0026#34; + person.firstName + \u0026#34; \u0026#34; + person.lastName; } let user = { firstName: \u0026#34;Wang\u0026#34;, lastName: \u0026#34;Loen\u0026#34; // else: \u0026#34;error\u0026#34; 会报错 }; document.body.innerHTML = hello(user); 属性数量不确定时的定义方法 少用可选属性 属性名字后面加一个 ？表示可选属性\ninterface FullName{ firstName:string lastName:string middleName?:string } function say({firstName, lastName, middleName}:FullName):void { // console.log(`我的姓名是:${firstName}_${lastName}`); if(middleName){ console.log(`我的姓名是:${firstName}_${middleName}_${lastName}`); }else{ console.log(`我的姓名是:${firstName}_${lastName}`); } } say({firstName:\u0026#39;Jonathan\u0026#39;, lastName:\u0026#39;Lee\u0026#39;, middleName:\u0026#34;666\u0026#34;}); say({firstName:\u0026#39;Jonathan\u0026#39;, lastName:\u0026#39;Lee\u0026#39;}); 多用索引签名 在定义对象中key（propName）和value的数据结构，后续对象中的属性，只要key和value满足索引签名的限定即可, 无论有多少个都无所谓。\ninterface FullName { [propName:string]:string } let obj:FullName = { // 注意点: 只要key和value满足索引签名的限定即可, 无论有多少个都无所谓 firstName:\u0026#39;Jonathan\u0026#39;, lastName:\u0026#39;Lee\u0026#39;, // middleName:false // 报错 // 无论key是什么类型最终都会自动转换成字符串类型, 所以没有报错 // false: \u0026#39;666\u0026#39; } interface stringArray { [propName:number]:string } let arr:stringArray = { 0:\u0026#39;a\u0026#39;, 1:\u0026#39;b\u0026#39;, 2:\u0026#39;c\u0026#39; }; // let arr:stringArray = [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;]; console.log(arr[0]); console.log(arr[1]); console.log(arr[2]); 接口的继承 interface LengthInterface { length:number } interface WidthInterface { width:number } interface HeightInterface { height:number } interface RectInterface extends LengthInterface,WidthInterface,HeightInterface { // length:number // width:number // height:number color:string } let rect:RectInterface = { length:10, width:20, height:30, color:\u0026#39;red\u0026#39; } 函数接口 interface SumInterface { (a:number, b:number):number } // 建议使用这种写法 let sum:SumInterface= function(x,y) { return x + y; } let res = sum(10, 20); console.log(res); 只读属性 可以在属性名前用 readonly来指定只读属性:\ninterface Point { readonly x: number; readonly y: number; } 可以通过赋值一个对象字面量来构造一个Point。 赋值后， x 和 y 再也不能被改变了。\nlet p1: Point = { x: 10, y: 20 }; p1.x = 5; // error! TypeScript 具有 ReadonlyArray 类型，它与 Array 相似，只是把所有可变方法去掉了，因此可以确保数组创建后再也不能被修改：\nlet a: number[] = [1, 2, 3, 4]; let ro: ReadonlyArray\u0026lt;number\u0026gt; = a; ro[0] = 12; // error! ro.push(5); // error! ro.length = 100; // error! a = ro; // error! 函数声明 定义函数 // typescript定义函数的方法 // 命名函数 function say1(name:string):void { console.log(name); } // 匿名函数 let say2 = function (name:string):void { console.log(name); } // 箭头函数 let say3 = (name:string):void =\u0026gt;{ console.log(name); } 函数声明和分离实现 利用 type 声明函数 // 先利用type声明一个函数 type AddFun = (a:number, b:number)=\u0026gt;number; // 再根据声明去实现这个函数 // 此时函数的参数和返回值可以不需要写类型声明了，因为ts可以通过这个函数声明推断出来类型了 let add:AddFun = function (x, y) { return x + y; }; let res = add(30, 20); console.log(res); 利用 interface 声明函数 // 先利用interface声明一个函数 interface AddFun { (a:number, b:number):number } let add:AddFun = function (x, y) { return x + y; }; let res = add(30, 20); console.log(res); 参数 可选参数 // 需求: 要求定义一个函数可以实现2个数或者3个数的加法 function add(x:number, y:number, z?:number):number { return x + y + (z ? z : 0); } let res = add(10, 20); let res = add(10, 20, 30); // 可选参数后面只能跟可选参数 // 可选参数可以是一个或多个 默认参数 function add(x:number, y:number=10):number { return x + y; } let res = add(10); let res = add(10, 30); 剩余参数 function add(x:number, ...ags:number[]) { console.log(x); console.log(ags); } add(10, 20, 30, 40, 50) 类型断言 类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构。 它没有运行时的影响，只是在编译阶段起作用。TypeScript 会假设你，程序员，已经进行了必须的检查。\n类型断言有两种形式。 其一是尖括号语法： let someValue: any = \u0026#34;this is a string\u0026#34;; let strLength: number = (\u0026lt;string\u0026gt;someValue).length; 另一个为as语法： let someValue: any = \u0026#34;this is a string\u0026#34;; let strLength: number = (someValue as string).length; 例如: 我们拿到了一个any类型的变量, 但是我们明确的知道这个变量中保存的是字符串类型，此时我们就可以通过类型断言将any类型转换成string类型, 使用字符串类型中相关的方法了。\nlet str:any = \u0026#39;it666\u0026#39;; // 当还是any的时候是没有.length的提示的 let len = (str as string).length; console.log(len); 泛型 什么是泛型 用来弥补any没有语法提示和报错的缺点。\n最开始不指定类型，后面根据我们传入的类型确定类型。\n软件工程中，我们不仅要创建一致的定义良好的API，同时也要考虑可重用性。 组件不仅能够支持当前的数据类型，同时也能支持未来的数据类型，这在创建大型系统时为你提供了十分灵活的功能。在像C#和Java这样的语言中，可以使用泛型来创建可重用的组件，一个组件可以支持多种类型的数据。 这样用户就可以以自己的数据类型来使用组件。\n使用方法 我们给identity添加了类型变量T。 T帮助我们捕获用户传入的类型（比如：number），之后我们就可以使用这个类型。 之后我们再次使用了 T当做返回值类型。现在我们可以知道参数类型与返回值类型是相同的了。 这允许我们跟踪函数里使用的类型的信息。\n我们把这个版本的identity函数叫做泛型，因为它可以适用于多个类型。 不同于使用 any，它不会丢失信息，像第一个例子那像保持准确性，传入数值类型并返回数值类型。\n泛型类 class GenericNumber\u0026lt;T\u0026gt; { zeroValue: T; add: (x: T, y: T) =\u0026gt; T; } let myGenericNumber = new GenericNumber\u0026lt;number\u0026gt;(); myGenericNumber.zeroValue = 0; myGenericNumber.add = function(x, y) { return x + y; };\\ // GenericNumber类的使用是十分直观的，并且你可能已经注意到了，没有什么去限制它只能使用number类型。 也可以使用字符串或其它更复杂的类型。 let stringNumeric = new GenericNumber\u0026lt;string\u0026gt;(); stringNumeric.zeroValue = \u0026#34;\u0026#34;; stringNumeric.add = function(x, y) { return x + y; }; console.log(stringNumeric.add(stringNumeric.zeroValue, \u0026#34;test\u0026#34;)); //与接口一样，直接把泛型类型放在类后面，可以帮助我们确认类的所有属性都在使用相同的类型。 泛型约束 默认情况下我们可以指定泛型为任意类型，但是有些情况下我们需要指定的类型满足某些条件后才能指定\n那么这个时候我们就可以使用泛型约束。\ninterface IWithLength { length: number } function echoWithLength\u0026lt;T extends IWithLength\u0026gt;(arg: T): T { console.log(arg.length) return arg } const len01 = echoWithLength(\u0026#39;abc\u0026#39;) // 3 const len02 = echoWithLength({ length: 12 }) // 12 const len03 = echoWithLength([1, 2, 3]) // 3 ","permalink":"https://waite.wang/posts/web/ts-learn/","summary":"\u003ch2 id=\"什么是-typescript\"\u003e什么是 TypeScript\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eTypeScript既是一种语言又是一组工具。TypeScript是JavaScript的一个超集。换句话说，TypeScript是JavaScript加上一些额外的功能。\u003c/p\u003e","title":"TypeScript 入门"},{"content":" 首先由于 Win10 家庭版没有 gpedit.msc (本地策略组编辑器), cmd 以下代码将电脑模拟为 专业版\n@echo off pushd \u0026#34;%~dp0\u0026#34; dir /b C:\\Windows\\servicing\\Packages\\Microsoft-Windows-GroupPolicy-ClientExtensions-Package~3*.mum \u0026gt;List.txt dir /b C:\\Windows\\servicing\\Packages\\Microsoft-Windows-GroupPolicy-ClientTools-Package~3*.mum \u0026gt;\u0026gt;List.txt for /f %%i in (\u0026#39;findstr /i . List.txt 2^\u0026gt;nul\u0026#39;) do dism /online /norestart /add-package:\u0026#34;C:\\Windows\\servicing\\Packages\\%%i\u0026#34; pause Win + R 打开 gpedit.msc, 将 \u0026ldquo;以管理员批准模式运行所有管理员\n原因: 电脑本身是管理员用户 但 更上层还有个 更高的管理员\n","permalink":"https://waite.wang/posts/win/power-up-operation-based-on-insufficient-aministrator-uthority-in-win10/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e首先由于 Win10 家庭版没有 gpedit.msc (本地策略组编辑器), cmd 以下代码将电脑模拟为 专业版\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e@echo off\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epushd \u0026#34;%~dp0\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edir /b C:\\Windows\\servicing\\Packages\\Microsoft-Windows-GroupPolicy-ClientExtensions-Package~3*.mum \u0026gt;List.txt\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edir /b C:\\Windows\\servicing\\Packages\\Microsoft-Windows-GroupPolicy-ClientTools-Package~3*.mum \u0026gt;\u0026gt;List.txt\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003efor /f %%i in (\u0026#39;findstr /i . List.txt 2^\u0026gt;nul\u0026#39;) do dism /online /norestart /add-package:\u0026#34;C:\\Windows\\servicing\\Packages\\%%i\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epause\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eWin + R 打开 gpedit.msc, 将 \u0026ldquo;以管理员批准模式运行所有管理员\u003c/strong\u003e\u003c/p\u003e","title":"基于 Win10 管理员权限不足的升权操作"},{"content":"窗口透明 \u0026lt;style\u0026gt; .hope-ui-light{ background-image: url(\u0026#34;https://www.dmoe.cc/random.php\u0026#34;) !important; background-repeat:no-repeat;background-size:cover;background-attachment:fixed;background-position-x:center; } .obj-box { border-radius: 15px !important; } .hope-ui-light .obj-box { background-color: #ffffff70 !important; } .hope-c-PJLV .hope-c-PJLV-ikSuVsl-css { border-radius: 15px !important; background-color: #ffffff70 !important; } .hope-c-PJLV .hope-c-PJLV-ibtHApG-css { border-radius: 15px !important; background-color: #ffffff70 !important; } \u0026lt;/style\u0026gt; 看板娘 \u0026lt;script src=\u0026#34;https://eqcn.ajz.miesnfu.com/wp-content/plugins/wp-3d-pony/live2dw/lib/L2Dwidget.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- 看板娘 --\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget@latest/autoload.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 鼠标点击效果 \u0026lt;!--鼠标点击效果--\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/js/maodian.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; Aplayer、Meting \u0026lt;!-- aplayer、meting --\u0026gt; \u0026lt;!-- require APlayer --\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- require MetingJS --\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- 不显示歌词 --\u0026gt; \u0026lt;script\u0026gt; function removelrc() { //检测是否存在歌词按钮 if (!document.querySelector(\u0026#34;.aplayer-icon-lrc\u0026#34;)) return; else { //触发以后立刻移除监听 document.removeEventListener(\u0026#34;DOMNodeInserted\u0026#34;,removelrc); //稍作延时保证触发函数时存在按钮 setTimeout(function() { //以触发按钮的方式隐藏歌词，防止在点击显示歌词按钮时需要点击两次才能出现的问题 document.querySelector(\u0026#34;.aplayer-icon-lrc\u0026#34;).click(); }, 1); console.log(\u0026#34;success\u0026#34;); return; } } document.addEventListener(\u0026#39;DOMNodeInserted\u0026#39;, removelrc) \u0026lt;/script\u0026gt; Meting Body部分\n\u0026lt;meting-js server=\u0026#34;netease\u0026#34; type=\u0026#34;playlist\u0026#34; id=\u0026#34;7292043675\u0026#34; fixed = true \u0026gt; \u0026lt;/meting-js\u0026gt; \u0026lt;!-- 吸附边缘 css --\u0026gt; \u0026lt;style\u0026gt; .aplayer.aplayer-withlist.aplayer-fixed.aplayer-narrow, .aplayer.aplayer-withlist.aplayer-fixed.aplayer-narrow .aplayer-body { left: -66px !important; } .aplayer.aplayer-withlist.aplayer-fixed.aplayer-narrow:hover .aplayer-body { left: 0 !important; } \u0026lt;/style\u0026gt; Nnplayer \u0026lt;script src=\u0026#34;https://unpkg.com/nplayer@latest/dist/index.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 备案信息 及 图标颜色 \u0026lt;!--备案信息--\u0026gt; \u0026lt;/style\u0026gt; \u0026lt;link href=\u0026#34;https://lf6-cdn-tos.bytecdntp.com/cdn/expire-1-M/font-awesome/6.0.0/css/all.min.css\u0026#34; rel=\u0026#34; stylesheet \u0026#34;\u0026gt; \u0026lt;div id=\u0026#34;customize\u0026#34; style=\u0026#34;display:none; text-align:center;\u0026#34;\u0026gt; \u0026lt;br /\u0026gt; \u0026lt;div style=\u0026#34;font-size:15px; font-family: \u0026#39;Segoe UI\u0026#39;, Tahoma, Geneva, Verdana, sans-serif;\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;nav-item\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;nav-link\u0026#34; href=\u0026#34;https://github.com/Xhofe/alist\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;i class=\u0026#34;fa fa-heart\u0026#34; style=\u0026#34;color:#9932CC;\u0026#34; aria-hidden=\u0026#34;true\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; 由Alist驱动 | \u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;nav-item\u0026#34; style=\u0026#34;margin-bottom: 5px;\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;nav-link\u0026#34; href=\u0026#34;https://cloud1.waite.wang/@manage\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;i class=\u0026#34;fa fa-gear\u0026#34; style=\u0026#34;color:#9932CC;\u0026#34; aria-hidden=\u0026#34;true\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; 管理后台 \u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;br/\u0026gt; \u0026lt;span class=\u0026#34;nav-item\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;nav-link\u0026#34; href=\u0026#34;https://waite.wang/\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;i class=\u0026#34;fa-solid fa-copyright\u0026#34; style=\u0026#34;color:#9932CC\u0026#34; aria-hidden=\u0026#34;true\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; 2022 WAITE.WANG | \u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;nav-item\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;nav-link\u0026#34; href=\u0026#34;https://beian.miit.gov.cn/\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;i class=\u0026#34;fa fa-balance-scale\u0026#34; style=\u0026#34;color:#9932CC;\u0026#34; aria-hidden=\u0026#34;true\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; 粤 ICP 备 2022028437 号 \u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;br /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; let interval = setInterval(() =\u0026gt; { if (document.querySelector(\u0026#34;.footer\u0026#34;)) { document.querySelector(\u0026#34;#customize\u0026#34;).style.display = \u0026#34;\u0026#34;; clearInterval(interval); } }, 200); \u0026lt;/script\u0026gt; \u0026lt;/font\u0026gt; \u0026lt;style type=\u0026#34;text/css\u0026#34;\u0026gt; .footer { display: none !important; } .hope-c-ivMHWx-dvmlqS-cv { color: #9932CC !important; } .hope-c-PJLV-igVoCQk-css { color: #9932CC !important; } .hope-c-PJLV-ilcHcHe-css { color: #9932CC !important; } .hope-c-PJLV-ieavQQG-css { color: #9932CC !important; } \u0026lt;/style\u0026gt; 运行时间 \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; function show_runtime() { window.setTimeout(\u0026#34;show_runtime()\u0026#34;, 1000); X = new Date(\u0026#34;8/24/2022 10:28:00\u0026#34;); Y = new Date(); T = (Y.getTime() - X.getTime()); M = 24 * 60 * 60 * 1000; a = T / M; A = Math.floor(a); b = (a - A) * 24; B = Math.floor(b); c = (b - B) * 60; C = Math.floor((b - B) * 60); D = Math.floor((c - C) * 60); runtime_span.innerHTML = \u0026#34;本站已运行 \u0026#34; + A + \u0026#34;天\u0026#34; + B + \u0026#34;小时\u0026#34; + C + \u0026#34;分\u0026#34; + D + \u0026#34;秒\u0026#34; } show_runtime(); \u0026lt;/script\u0026gt; \u0026lt;span id=\u0026#34;runtime_span\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; 网站访问量 \u0026lt;!-- 访问量 --\u0026gt; \u0026lt;script async src=\u0026#34;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 本站总访问量 \u0026lt;span id=\u0026#34;busuanzi_value_site_pv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; 次 自定义头部代码 \u0026lt;!--Alist V3建议添加的，已经默认添加了，如果你的没有建议加上--\u0026gt; \u0026lt;script src=\u0026#34;https://polyfill.io/v3/polyfill.min.js?features=String.prototype.replaceAll\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!--引入字体，全局字体使用--\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://npm.elemecdn.com/lxgw-wenkai-webfont@1.1.0/lxgwwenkai-regular.css\u0026#34; /\u0026gt; \u0026lt;!--评论系统使用的js--\u0026gt; \u0026lt;script src=\u0026#39;https://unpkg.com/valine/dist/Valine.min.js\u0026#39;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!--不蒜子计数器--\u0026gt; \u0026lt;script async src=\u0026#34;https://busuanzi.icodeq.com/busuanzi.pure.mini.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- Font6，自定义底部使用和看板娘使用的图标和字体文件--\u0026gt; \u0026lt;link type=\u0026#39;text/css\u0026#39; rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://npm.elemecdn.com/font6pro@6.0.1/css/fontawesome.min.css\u0026#34; media=\u0026#39;all\u0026#39;\u0026gt; \u0026lt;link href=\u0026#34;https://npm.elemecdn.com/font6pro@6.0.1/css/all.min.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34;\u0026gt; \u0026lt;!--音乐播放器所用的文件--\u0026gt; \u0026lt;!-- require APlayer --\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://npm.elemecdn.com/aplayer@1.10.1/dist/APlayer.min.css\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;https://npm.elemecdn.com/aplayer@1.10.1/dist/APlayer.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- require MetingJS --\u0026gt; \u0026lt;script src=\u0026#34;https://npm.elemecdn.com/meting@2.0.1/dist/Meting.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; /* 去除通知栏 右上角 X */ .notify-render .hope-close-button{ display: none; } /* 图片API用法点进去都会有食用说明的 樱花：https://www.dmoe.cc 夏沫：https://cdn.seovx.com 搏天：https://api.btstu.cn/doc/sjbz.php 姬长信：https://github.com/insoxin/API 小歪：https://api.ixiaowai.cn/ 保罗：https://api.paugram.com 墨天逸：https://api.mtyqx.cn 岁月小筑：https://img.xjh.me 东方Project：https://img.paulzzh.com */ /*白天背景图*/ .hope-ui-light{ background-image: url(\u0026#34;http://pic.rmb.bdstatic.com/bjh/7569b014a1abafd5481298763300ae1d.png\u0026#34;) !important; background-repeat:no-repeat;background-size:cover;background-attachment:fixed;background-position-x:center; } /*夜间背景图*/ .hope-ui-dark { background-image: url(http://pic.rmb.bdstatic.com/bjh/ebe942a9de49856f389c65f25a338335.png) !important; background-repeat:no-repeat;background-size:cover;background-attachment:fixed;background-position-x:center; } /*主列表夜间模式透明，50%这数值是控制透明度大小的*/ .obj-box.hope-stack.hope-c-dhzjXW.hope-c-PJLV.hope-c-PJLV-iigjoxS-css{ background-color:rgb(0 0 0 / 50%) !important; } /*readme夜间模式透明，50%这数值是控制透明度大小的*/ .hope-c-PJLV.hope-c-PJLV-iiuDLME-css{ background-color:rgb(0 0 0 / 50%) !important; } /*主列表透明*/ .obj-box.hope-stack.hope-c-dhzjXW.hope-c-PJLV.hope-c-PJLV-igScBhH-css { background-color: rgba(255, 255, 255, 0.5) !important; } /*readme透明*/ .hope-c-PJLV.hope-c-PJLV-ikSuVsl-css{ background-color: rgba(255, 255, 255, 0.5) !important; } /*顶部右上角切换按钮透明*/ .hope-c-ivMHWx-hZistB-cv.hope-icon-button{ background-color: rgba(255, 255, 255, 0.3) !important; } /*右下角侧边栏按钮透明*/ .hope-c-PJLV-ijgzmFG-css{ background-color: rgba(255, 255, 255, 0.5) !important; } /*白天模式代码块透明*/ .hope-ui-light pre{ background-color: rgba(255, 255, 255, 0.1) !important; } /*夜间模式代码块透明*/ .hope-ui-dark pre { background-color: rgba(255, 255, 255, 0) !important; } /*底部CSS，.App .table这三个一起的*/ dibu { border-top: 0px; position: absolute; bottom: 0; width: 100%; margin: 0px; padding: 0px; } .App { min-height: 85vh; } .table { margin: auto; } /*去掉底部*/ .footer { display: none !important; } /*全局字体*/ *{font-family:LXGW WenKai} *{font-weight:bold} body {font-family: LXGW WenKai;} /*以下为评论系统专用*/ /*适配大小契合度*/ .newValine{ width: min(96%, 940px); flex-direction: column; row-gap: var(--hope-space-2); border-radius: var(--hope-radii-xl); padding: var(--hope-space-2); box-shadow: var(--hope-shadows-lg); } /*评论区 - 白天模式透明度*/ .hope-ui-light .newValine{ background-color: rgba(255, 255, 255, 0.8) !important; } /*评论区 - 夜间模式透明度*/ .hope-ui-dark .newValine{ background-color:rgb(0 0 0 / 80%) !important; } /*输入栏里面跳舞的小人背景图*/ .vedit{ background-image:url(https://cdn.jsdelivr.net/gh/anwen-anyi/imgAnwen/images/OuNiJiang.gif); background-size:contain; background-repeat:no-repeat; background-position:right bottom; transition:all 0.25s ease-in-out 0s; } textarea#comment-textarea:focus{ background-position-y:120px; transition:all 0.25s ease-in-out 0s; } /*渐变背景CSS*/ #canvas-basic { position: fixed; display: block; width: 100%; height: 100%; top: 0; right: 0; bottom: 0; left: 0; z-index: -999; } \u0026lt;/style\u0026gt; 看板娘代码 \u0026lt;!--看板娘 -自定义大小，隐藏对话框和对话框高度--\u0026gt; \u0026lt;style type=\u0026#34;text/css\u0026#34;\u0026gt; #waifu #live2d { height: 350px!important; width: 350px!important; } #waifu-tips { top: -60px; /*display:none !important;隐藏对话框*/ } \u0026lt;/style\u0026gt; \u0026lt;!--看板娘加载指定模型--\u0026gt; \u0026lt;script\u0026gt; localStorage.setItem(\u0026#39;modelId\u0026#39;, \u0026#39;7\u0026#39;); localStorage.setItem(\u0026#39;modelTexturesId\u0026#39;, \u0026#39;3\u0026#39;); \u0026lt;/script\u0026gt; \u0026lt;!--自己选左右--\u0026gt; \u0026lt;script src=\u0026#34;https://api.itggg.cn/live2dnew/left/index.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://api.itggg.cn/live2dnew/right/index.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!--以下四个两个主用两个备用的,选一条使用即可--\u0026gt; \u0026lt;!--自己选左右--\u0026gt; \u0026lt;script src=\u0026#34;https://api.itggg.cn/live2dnew/left/index.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://api.itggg.cn/live2dnew/right/index.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!--备用的，自己选左右--\u0026gt; \u0026lt;script src=\u0026#34;https://luluossfile.lulufind.com/work/teacher_u20221017ce7b5991_1666420843832_19934968_file.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://luluossfile.lulufind.com/work/teacher_u20221017bb6d7454_1666420849979_19584065_file.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 自行替换鼠标样式说明 \u0026lt;!--较为个性化的鼠标指针样式，可结合个人需要自行修改--\u0026gt; \u0026lt;style\u0026gt; body { cursor: url(https://luluossfile.lulufind.com/work/teacher_u20221021b3a89013_1666841028833_10660845_file.cur), default; } select{ cursor: url(https://luluossfile.lulufind.com/work/teacher_u2021090299b56677_1666842679271_10490748_file.cur), pointer; } button,a:hover{ cursor: url(https://luluossfile.lulufind.com/work/teacher_u20221017ac9f1124_1666842626270_11086578_file.cur), pointer; } input{ cursor:url(https://luluossfile.lulufind.com/work/teacher_u2021090299b56677_1666842633386_14976764_file.cur), text; } textarea,input:focus{ cursor:url(https://luluossfile.lulufind.com/work/teacher_u202210176ba36766_1666842640146_15845280_file.cur), text; } code{ cursor: url(https://luluossfile.lulufind.com/work/teacher_u20221021b3a89013_1666842646779_15864973_file.cur), default; } pre\u0026gt;code{ cursor: url(https://luluossfile.lulufind.com/work/teacher_u202210176ba36766_1666842653500_10010236_file.cur), default; } \u0026lt;/style\u0026gt; 自定义内容代码 \u0026lt;!--延迟加载--\u0026gt; \u0026lt;!--如果要写自定义内容建议都加到这个延迟加载的范围内--\u0026gt; \u0026lt;div id=\u0026#34;customize\u0026#34; style=\u0026#34;display: none;\u0026#34;\u0026gt; \u0026lt;div\u0026gt; \u0026lt;!--音乐播放器--\u0026gt; \u0026lt;meting-js fixed=\u0026#34;true\u0026#34; autoplay=\u0026#34;false\u0026#34; theme=\u0026#34;#409EFF\u0026#34; list-folded=\u0026#34;true\u0026#34; auto=\u0026#34;QQ音乐或者网易云的链接\u0026#34;\u0026gt;\u0026lt;/meting-js\u0026gt; \u0026lt;!--评论模块还有下面的script也是--\u0026gt; \u0026lt;center\u0026gt; \u0026lt;div class=\u0026#34;newValine\u0026#34; id=\u0026#34;vcomments\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/center\u0026gt; \u0026lt;script\u0026gt; new Valine({ visitor: true, el: \u0026#39;#vcomments\u0026#39;, avatar: \u0026#39;wavatar\u0026#39;, appId: \u0026#39;Your appId\u0026#39;, appKey: \u0026#39;Your appKey\u0026#39;, placeholder: \u0026#34;有什么问题欢迎评论区留言~么么哒\u0026#34; }) \u0026lt;/script\u0026gt; \u0026lt;br /\u0026gt; \u0026lt;center class=\u0026#34;dibu\u0026#34;\u0026gt; \u0026lt;div style=\u0026#34; line-height: 20px;font-size: 9pt;font-weight: bold;\u0026#34;\u0026gt; \u0026lt;span\u0026gt; \u0026#34; \u0026lt;span style=\u0026#34;color: rgb(13, 109, 252); font-weight: bold;\u0026#34; id=\u0026#34;hitokoto\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34; id=\u0026#34;hitokoto_text\u0026#34;\u0026gt; \u0026#34;人生最大的遗憾,就是在最无能为力的时候遇到一个想要保护一生的人.\u0026#34; \u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt; \u0026#34; \u0026lt;/span\u0026gt; \u0026lt;p style=\u0026#34;margin-left: 10rem;font-size: 8pt;\u0026#34;\u0026gt; \u0026lt;small\u0026gt; —— Anwen\u0026#39;s Cloud \u0026lt;/small\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div style=\u0026#34;font-size: 13px; font-weight: bold;\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;nav-item\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;nav-link\u0026#34; href=\u0026#34;xxxxxxxxxx\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;i class=\u0026#34;fab fa-qq\u0026#34; style=\u0026#34;color:#409EFF\u0026#34; aria-hidden=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;/i\u0026gt; QQ | \u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;nav-item\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;nav-link\u0026#34; href=\u0026#34;mailto:xxxxx@foxmail.com\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;i class=\u0026#34;fa-duotone fa-envelope-open\u0026#34; style=\u0026#34;color:#409EFF\u0026#34; aria-hidden=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;/i\u0026gt; 邮箱 | \u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;nav-item\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;nav-link\u0026#34; href=\u0026#34;xxxxxx\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;i class=\u0026#34;fas fa-edit\u0026#34; style=\u0026#34;color:#409EFF\u0026#34; aria-hidden=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;/i\u0026gt; 博客 | \u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;nav-item\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;nav-link\u0026#34; href=\u0026#34;xxxxxxxx\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;i class=\u0026#34;fas fa-comment-lines\u0026#34; style=\u0026#34;color:#409EFF;\u0026#34; aria-hidden=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;/i\u0026gt; 留言 | \u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;nav-item\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;nav-link\u0026#34; href=\u0026#34;xxxxxxx\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;i class=\u0026#34;fa fa-cloud-download\u0026#34; style=\u0026#34;color:#409EFF;\u0026#34; aria-hidden=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;/i\u0026gt; 云盘 | \u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;!--后台入口--\u0026gt; \u0026lt;span class=\u0026#34;nav-item\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;nav-link\u0026#34; href=\u0026#34;/@manage\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;i class=\u0026#34;fa-solid fa-folder-gear\u0026#34; style=\u0026#34;color:#409EFF;\u0026#34; aria-hidden=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;/i\u0026gt; 管理 | \u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;!--版权，请尊重作者--\u0026gt; \u0026lt;span class=\u0026#34;nav-item\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;nav-link\u0026#34; href=\u0026#34;https://github.com/Xhofe/alist\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;i class=\u0026#34;fa-solid fa-copyright\u0026#34; style=\u0026#34;color:#409EFF;\u0026#34; aria-hidden=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;/i\u0026gt; Alist \u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;br /\u0026gt; \u0026lt;!--添加一个访问量--\u0026gt; \u0026lt;span\u0026gt; 本\u0026#34;\u0026lt;span style=\u0026#34;color: rgb(13, 109, 252); font-weight: bold;\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;目录\u0026lt;/a\u0026gt;\u0026lt;/span\u0026gt;\u0026#34;访问量 \u0026lt;span id=\u0026#34;busuanzi_value_page_pv\u0026#34; style=\u0026#34;color: rgb(13, 109, 252); font-weight: bold;\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; 次 本站总访问量 \u0026lt;span id=\u0026#34;busuanzi_value_site_pv\u0026#34; style=\u0026#34;color: rgb(13, 109, 252); font-weight: bold;\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; 次 本站总访客数 \u0026lt;span id=\u0026#34;busuanzi_value_site_uv\u0026#34; style=\u0026#34;color: rgb(13, 109, 252); font-weight: bold;\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; 人 \u0026lt;/span\u0026gt; \u0026lt;br /\u0026gt; \u0026lt;!--添加备案信息--\u0026gt; \u0026lt;span class=\u0026#34;nav-item\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;nav-link\u0026#34; href=\u0026#34;https://beian.miit.gov.cn/#/Integrated/index\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;i class=\u0026#34;fa-solid fa-shield-check\u0026#34; style=\u0026#34;color:#409EFF;\u0026#34; aria-hidden=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;/i\u0026gt; 冀 ICP备2222000777号 \u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/center\u0026gt; \u0026lt;br /\u0026gt; \u0026lt;br /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!--一言API--\u0026gt; \u0026lt;script src=\u0026#34;https://v1.hitokoto.cn/?encode=js\u0026amp;select=%23hitokoto\u0026#34; defer\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!--延迟加载范围到这里结束--\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!--延迟加载配套使用JS--\u0026gt; \u0026lt;script\u0026gt; let interval = setInterval(() =\u0026gt; { if (document.querySelector(\u0026#34;.footer\u0026#34;)) { document.querySelector(\u0026#34;#customize\u0026#34;).style.display = \u0026#34;\u0026#34;; clearInterval(interval); } }, 200); \u0026lt;/script\u0026gt; \u0026lt;!-- 渐变背景初始化,如果要使用渐变背景把下面的那一行注释去掉即可--\u0026gt; \u0026lt;!-- 下面的几行都是渐变的一套,自定义头部内还有一个关联的自定义CSS --\u0026gt; \u0026lt;!--\u0026lt;canvas id=\u0026#34;canvas-basic\u0026#34;\u0026gt;\u0026lt;/canvas\u0026gt; --\u0026gt; \u0026lt;script src=\u0026#34;https://npm.elemecdn.com/granim@2.0.0/dist/granim.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; var granimInstance = new Granim({ element: \u0026#39;#canvas-basic\u0026#39;, direction: \u0026#39;left-right\u0026#39;, isPausedWhenNotInView: true, states : { \u0026#34;default-state\u0026#34;: { gradients: [ [\u0026#39;#a18cd1\u0026#39;, \u0026#39;#fbc2eb\u0026#39;], [\u0026#39;#fff1eb\u0026#39;, \u0026#39;#ace0f9\u0026#39;], [\u0026#39;#d4fc79\u0026#39;, \u0026#39;#96e6a1\u0026#39;], [\u0026#39;#a1c4fd\u0026#39;, \u0026#39;#c2e9fb\u0026#39;], [\u0026#39;#a8edea\u0026#39;, \u0026#39;#fed6e3\u0026#39;], [\u0026#39;#9890e3\u0026#39;, \u0026#39;#b1f4cf\u0026#39;], [\u0026#39;#a1c4fd\u0026#39;, \u0026#39;#c2e9fb\u0026#39;], [\u0026#39;#fff1eb\u0026#39;, \u0026#39;#ace0f9\u0026#39;] ] } } }); \u0026lt;/script\u0026gt; 网页点击鼠标特效 \u0026lt;!-- 网页鼠标点击特效 - 核心价值观关键字 --\u0026gt; \u0026lt;script\u0026gt; (function () { var a_idx = 0; window.onclick = function (event) { var a = new Array(\u0026#34;❤富强❤\u0026#34;, \u0026#34;❤民主❤\u0026#34;, \u0026#34;❤文明❤\u0026#34;, \u0026#34;❤和谐❤\u0026#34;, \u0026#34;❤自由❤\u0026#34;, \u0026#34;❤平等❤\u0026#34;, \u0026#34;❤公正❤\u0026#34;, \u0026#34;❤法治❤\u0026#34;, \u0026#34;❤爱国❤\u0026#34;, \u0026#34;❤敬业❤\u0026#34;, \u0026#34;❤诚信❤\u0026#34;, \u0026#34;❤友善❤\u0026#34;); var heart = document.createElement(\u0026#34;b\u0026#34;); //创建b元素 heart.onselectstart = new Function(\u0026#39;event.returnValue=false\u0026#39;); //防止拖动 document.body.appendChild(heart).innerHTML = a[a_idx]; //将b元素添加到页面上 a_idx = (a_idx + 1) % a.length; heart.style.cssText = \u0026#34;position: fixed;left:-100%;\u0026#34;; //给p元素设置样式 var f = 13, // 字体大小 x = event.clientX - f / 2 - 30, // 横坐标 y = event.clientY - f, // 纵坐标 c = randomColor(), // 随机颜色 a = 1, // 透明度 s = 0.8; // 放大缩小 var timer = setInterval(function () { //添加定时器 if (a \u0026lt;= 0) { document.body.removeChild(heart); clearInterval(timer); } else { heart.style.cssText = \u0026#34;font-size:16px;cursor: default;position: fixed;color:\u0026#34; + c + \u0026#34;;left:\u0026#34; + x + \u0026#34;px;top:\u0026#34; + y + \u0026#34;px;opacity:\u0026#34; + a + \u0026#34;;transform:scale(\u0026#34; + s + \u0026#34;);\u0026#34;; y--; a -= 0.016; s += 0.002; } }, 15) } // 随机颜色 function randomColor() { return \u0026#34;rgb(\u0026#34; + (~~(Math.random() * 255)) + \u0026#34;,\u0026#34; + (~~(Math.random() * 255)) + \u0026#34;,\u0026#34; + (~~(Math .random() * 255)) + \u0026#34;)\u0026#34;; } }()); \u0026lt;/script\u0026gt; \u0026lt;!-- 网页鼠标点击特效 - 爱心 --\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; ! function (e, t, a) { function r() { for (var e = 0; e \u0026lt; s.length; e++) s[e].alpha \u0026lt;= 0 ? (t.body.removeChild(s[e].el), s.splice(e, 1)) : (s[ e].y--, s[e].scale += .004, s[e].alpha -= .013, s[e].el.style.cssText = \u0026#34;left:\u0026#34; + s[e].x + \u0026#34;px;top:\u0026#34; + s[e].y + \u0026#34;px;opacity:\u0026#34; + s[e].alpha + \u0026#34;;transform:scale(\u0026#34; + s[e].scale + \u0026#34;,\u0026#34; + s[e] .scale + \u0026#34;) rotate(45deg);background:\u0026#34; + s[e].color + \u0026#34;;z-index:99999\u0026#34;); requestAnimationFrame(r) } function n() { var t = \u0026#34;function\u0026#34; == typeof e.onclick \u0026amp;\u0026amp; e.onclick; e.onclick = function (e) { t \u0026amp;\u0026amp; t(), o(e) } } function o(e) { var a = t.createElement(\u0026#34;div\u0026#34;); a.className = \u0026#34;heart\u0026#34;, s.push({ el: a, x: e.clientX - 5, y: e.clientY - 5, scale: 1, alpha: 1, color: c() }), t.body.appendChild(a) } function i(e) { var a = t.createElement(\u0026#34;style\u0026#34;); a.type = \u0026#34;text/css\u0026#34;; try { a.appendChild(t.createTextNode(e)) } catch (t) { a.styleSheet.cssText = e } t.getElementsByTagName(\u0026#34;head\u0026#34;)[0].appendChild(a) } function c() { return \u0026#34;rgb(\u0026#34; + ~~(255 * Math.random()) + \u0026#34;,\u0026#34; + ~~(255 * Math.random()) + \u0026#34;,\u0026#34; + ~~(255 * Math .random()) + \u0026#34;)\u0026#34; } var s = []; e.requestAnimationFrame = e.requestAnimationFrame || e.webkitRequestAnimationFrame || e .mozRequestAnimationFrame || e.oRequestAnimationFrame || e.msRequestAnimationFrame || function (e) { setTimeout(e, 1e3 / 60) }, i( \u0026#34;.heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: \u0026#39;\u0026#39;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;}.heart:after{top: -5px;}.heart:before{left: -5px;}\u0026#34; ), n(), r() }(window, document); \u0026lt;/script\u0026gt; \u0026lt;!--鼠标点击效果--\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/js/maodian.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 音乐播放器添加说明 核心代码（记得引用头部内的喔~） QQ音乐 \u0026lt;meting-js fixed=\u0026#34;true\u0026#34; autoplay=\u0026#34;false\u0026#34; theme=\u0026#34;#409EFF\u0026#34; list-folded=\u0026#34;true\u0026#34; auto=\u0026#34;https://y.qq.com/n/yqq/playlist/7927599544.html\u0026#34;\u0026gt;\u0026lt;/meting-js\u0026gt; 网易云 \u0026lt;meting-js fixed=\u0026#34;true\u0026#34; autoplay=\u0026#34;false\u0026#34; theme=\u0026#34;#409EFF\u0026#34; list-folded=\u0026#34;true\u0026#34; server=\u0026#34;netease\u0026#34; type=\u0026#34;playlist\u0026#34; id=\u0026#34;2195404116\u0026#34;\u0026gt; \u0026lt;/meting-js\u0026gt; 加上歌词 \u0026lt;meting-js name=\u0026#34;rainymood\u0026#34; artist=\u0026#34;rainymood\u0026#34; url=\u0026#34;https://rainymood.com/audio1110/0.m4a\u0026#34; cover=\u0026#34;https://rainymood.com/i/badge.jpg\u0026#34; fixed=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;pre hidden\u0026gt; [00:00.00]This [00:04.01]is [00:08.02]Waite \u0026lt;/pre\u0026gt; \u0026lt;/meting-js\u0026gt; 音乐的一些其他参数 选项 默认 描述 id require require song id / playlist id / album id / search keyword server require music platform: netease, tencent, kugou, xiami, baidu type require song, playlist, album, search, artist auto options music link, support: netease, tencent, xiami fixed false enable fixed mode mini false enable mini mode autoplay false audio autoplay theme #2980b9 main color loop all player loop play, values: \u0026lsquo;all\u0026rsquo;, \u0026lsquo;one\u0026rsquo;, \u0026rsquo;none\u0026rsquo; order list player play order, values: \u0026rsquo;list\u0026rsquo;, \u0026lsquo;random\u0026rsquo; preload auto values: \u0026rsquo;none\u0026rsquo;, \u0026lsquo;metadata\u0026rsquo;, \u0026lsquo;auto\u0026rsquo; volume 0.7 default volume, notice that player will remember user setting, default volume will not work after user set volume themselves mutex true prevent to play multiple player at the same time, pause other play lrc-type 0 lyric type list-folded false indicate whether list should folded at first list-max-height 340px list max height storage-name metingjs localStorage key that store player setting 自用 \u0026lt;!--如果要写自定义内容建议都加到这个延迟加载的范围内--\u0026gt; \u0026lt;div id=\u0026#34;customize\u0026#34; style=\u0026#34;display: none;\u0026#34;\u0026gt; \u0026lt;div\u0026gt; \u0026lt;!--音乐播放器--\u0026gt; \u0026lt;meting-js list-folded=\u0026#34;true\u0026#34; server=\u0026#34;netease\u0026#34; type=\u0026#34;playlist\u0026#34; id=\u0026#34;7292043675\u0026#34; fixed=true\u0026gt; \u0026lt;pre hidden\u0026gt; [00:00.00]This [00:04.01]is [00:08.02]Waite \u0026lt;/pre\u0026gt; \u0026lt;/meting-js\u0026gt; \u0026lt;br /\u0026gt; \u0026lt;center class=\u0026#34;dibu\u0026#34;\u0026gt; \u0026lt;div style=\u0026#34; line-height: 20px;font-size: 9pt;font-weight: bold;\u0026#34;\u0026gt; \u0026lt;span\u0026gt; \u0026#34; \u0026lt;span style=\u0026#34;color: rgb(121, 15, 104); font-weight: bold; font-size: 15px;\u0026#34; id=\u0026#34;hitokoto\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34; id=\u0026#34;hitokoto_text\u0026#34;\u0026gt; \u0026#34;人生最大的遗憾,就是在最无能为力的时候遇到一个想要保护一生的人.\u0026#34; \u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt; \u0026#34; \u0026lt;/span\u0026gt; \u0026lt;p style=\u0026#34;margin-left: 10rem;font-size: 8pt;\u0026#34;\u0026gt; \u0026lt;small\u0026gt; —— Waite\u0026#39;s Cloud \u0026lt;/small\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div style=\u0026#34;font-size: 13px; font-weight: bold;\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;nav-item\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;nav-link\u0026#34; href=\u0026#34;tencent://message/?uin=1657724340\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;i class=\u0026#34;fab fa-qq\u0026#34; style=\u0026#34;color:#9932CC\u0026#34; aria-hidden=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;/i\u0026gt; QQ | \u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;nav-item\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;nav-link\u0026#34; href=\u0026#34;mailto:waite0603@qq.com\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;i class=\u0026#34;fa-duotone fa-envelope-open\u0026#34; style=\u0026#34;color:#9932CC\u0026#34; aria-hidden=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;/i\u0026gt; 邮箱 | \u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;nav-item\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;nav-link\u0026#34; href=\u0026#34;https://waite.wang/\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;i class=\u0026#34;fas fa-edit\u0026#34; style=\u0026#34;color:#9932CC\u0026#34; aria-hidden=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;/i\u0026gt; 博客 | \u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;nav-item\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;nav-link\u0026#34; href=\u0026#34;#\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;i class=\u0026#34;fa fa-cloud-download\u0026#34; style=\u0026#34;color:#9932CC;\u0026#34; aria-hidden=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;/i\u0026gt; 云盘 | \u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;!--后台入口--\u0026gt; \u0026lt;span class=\u0026#34;nav-item\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;nav-link\u0026#34; href=\u0026#34;/@manage\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;i class=\u0026#34;fa-solid fa-folder-gear\u0026#34; style=\u0026#34;color:#9932CC;\u0026#34; aria-hidden=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;/i\u0026gt; 管理 | \u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;!--版权，请尊重作者--\u0026gt; \u0026lt;span class=\u0026#34;nav-item\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;nav-link\u0026#34; href=\u0026#34;https://github.com/Xhofe/alist\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;i class=\u0026#34;fa-solid fa-copyright\u0026#34; style=\u0026#34;color:#9932CC;\u0026#34; aria-hidden=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;/i\u0026gt; Alist \u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;br /\u0026gt; \u0026lt;!--添加一个访问量--\u0026gt; \u0026lt;span\u0026gt; 本\u0026#34;\u0026lt;span style=\u0026#34;color: rgb(121, 15, 104); font-weight: bold;\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;目录\u0026lt;/a\u0026gt;\u0026lt;/span\u0026gt;\u0026#34;访问量 \u0026lt;span id=\u0026#34;busuanzi_value_page_pv\u0026#34; style=\u0026#34;color: rgb(121, 15, 104); font-weight: bold;\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; 次 本站总访问量 \u0026lt;span id=\u0026#34;busuanzi_value_site_pv\u0026#34; style=\u0026#34;color: rgb(121, 15, 104); font-weight: bold;\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; 次 本站总访客数 \u0026lt;span id=\u0026#34;busuanzi_value_site_uv\u0026#34; style=\u0026#34;color: rgb(121, 15, 104); font-weight: bold;\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; 人 \u0026lt;/span\u0026gt; \u0026lt;br /\u0026gt; \u0026lt;!--添加备案信息--\u0026gt; \u0026lt;span class=\u0026#34;nav-item\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;nav-link\u0026#34; href=\u0026#34;https://beian.miit.gov.cn/#/Integrated/index\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;i class=\u0026#34;fa-solid fa-shield-check\u0026#34; style=\u0026#34;color:#9932CC;\u0026#34; aria-hidden=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;/i\u0026gt; 粤 ICP 备 2022028437 号 \u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/center\u0026gt; \u0026lt;br /\u0026gt; \u0026lt;br /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!--一言API--\u0026gt; \u0026lt;script src=\u0026#34;https://v1.hitokoto.cn/?encode=js\u0026amp;select=%23hitokoto\u0026#34; defer\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!--延迟加载范围到这里结束--\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!--延迟加载配套使用JS--\u0026gt; \u0026lt;script\u0026gt; let interval = setInterval(() =\u0026gt; { if (document.querySelector(\u0026#34;.footer\u0026#34;)) { document.querySelector(\u0026#34;#customize\u0026#34;).style.display = \u0026#34;\u0026#34;; clearInterval(interval); } }, 200); function removelrc() { //检测是否存在歌词按钮 if (!document.querySelector(\u0026#34;.aplayer-icon-lrc\u0026#34;)) return; else { //触发以后立刻移除监听 document.removeEventListener(\u0026#34;DOMNodeInserted\u0026#34;, removelrc); //稍作延时保证触发函数时存在按钮 setTimeout(function () { //以触发按钮的方式隐藏歌词，防止在点击显示歌词按钮时需要点击两次才能出现的问题 document.querySelector(\u0026#34;.aplayer-icon-lrc\u0026#34;).click(); }, 1); console.log(\u0026#34;success\u0026#34;); return; } } document.addEventListener(\u0026#39;DOMNodeInserted\u0026#39;, removelrc) \u0026lt;/script\u0026gt; \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; /* 去除通知栏 右上角 X */ .notify-render .hope-close-button { display: none; } /* 图片API用法点进去都会有食用说明的 樱花：https://www.dmoe.cc 夏沫：https://cdn.seovx.com 搏天：https://api.btstu.cn/doc/sjbz.php 姬长信：https://github.com/insoxin/API 小歪：https://api.ixiaowai.cn/ 保罗：https://api.paugram.com 墨天逸：https://api.mtyqx.cn 岁月小筑：https://img.xjh.me 东方Project：https://img.paulzzh.com */ .footer { display: none !important; } .hope-c-ivMHWx-dvmlqS-cv { color: #9932CC !important; } .hope-c-PJLV-igVoCQk-css { color: #9932CC !important; } .hope-c-PJLV-ilcHcHe-css { color: #9932CC !important; } .hope-c-PJLV-ieavQQG-css { color: #9932CC !important; } /*白天背景图*/ .hope-ui-light { background-image: url(\u0026#34;https://img.waite.wang/images/2022/11/27/640x420.jpg\u0026#34;) !important; background-repeat: no-repeat; background-size: cover; background-attachment: fixed; background-position-x: center; } /*夜间背景图*/ .hope-ui-dark { background-image: url(\u0026#34;https://img.waite.wang/images/2022/11/27/640x420-1.jpg\u0026#34;) !important; background-repeat: no-repeat; background-size: cover; background-attachment: fixed; background-position-x: center; } /*主列表夜间模式透明，50%这数值是控制透明度大小的*/ .obj-box.hope-stack.hope-c-dhzjXW.hope-c-PJLV.hope-c-PJLV-iigjoxS-css { background-color: rgb(0 0 0 / 50%) !important; } /*readme夜间模式透明，50%这数值是控制透明度大小的*/ .hope-c-PJLV.hope-c-PJLV-iiuDLME-css { background-color: rgb(0 0 0 / 50%) !important; } /*主列表透明*/ .obj-box.hope-stack.hope-c-dhzjXW.hope-c-PJLV.hope-c-PJLV-igScBhH-css { background-color: rgba(255, 255, 255, 0.5) !important; } /*readme透明*/ .hope-c-PJLV.hope-c-PJLV-ikSuVsl-css { background-color: rgba(255, 255, 255, 0.5) !important; } /*顶部右上角切换按钮透明*/ .hope-c-ivMHWx-hZistB-cv.hope-icon-button { background-color: rgba(255, 255, 255, 0.3) !important; } /*右下角侧边栏按钮透明*/ .hope-c-PJLV-ijgzmFG-css { background-color: rgba(255, 255, 255, 0.5) !important; } /*白天模式代码块透明*/ .hope-ui-light pre { background-color: rgba(255, 255, 255, 0.1) !important; } /*夜间模式代码块透明*/ .hope-ui-dark pre { background-color: rgba(255, 255, 255, 0) !important; } /*底部CSS，.App .table这三个一起的*/ dibu { border-top: 0px; position: absolute; bottom: 0; width: 100%; margin: 0px; padding: 0px; } .App { min-height: 85vh; } .table { margin: auto; } /*去掉底部*/ .footer { display: none !important; } /*全局字体*/ * { font-family: LXGW WenKai } * { font-weight: bold } body { font-family: LXGW WenKai; } .aplayer.aplayer-withlist.aplayer-fixed.aplayer-narrow, .aplayer.aplayer-withlist.aplayer-fixed.aplayer-narrow .aplayer-body { left: -66px !important; } .aplayer.aplayer-withlist.aplayer-fixed.aplayer-narrow:hover .aplayer-body { left: 0 !important; } \u0026lt;/style\u0026gt; ","permalink":"https://waite.wang/posts/tools/alist-beautiful-guide/","summary":"\u003ch2 id=\"窗口透明\"\u003e窗口透明\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nx\"\u003estyle\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ehope\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"nx\"\u003eui\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"nx\"\u003elight\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nx\"\u003ebackground\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"nx\"\u003eimage\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003eurl\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;https://www.dmoe.cc/random.php\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"nx\"\u003eimportant\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nx\"\u003ebackground\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"nx\"\u003erepeat\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"nx\"\u003eno\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"nx\"\u003erepeat\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"nx\"\u003ebackground\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"nx\"\u003esize\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"nx\"\u003ecover\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"nx\"\u003ebackground\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"nx\"\u003eattachment\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"nx\"\u003efixed\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"nx\"\u003ebackground\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"nx\"\u003eposition\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"nx\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"nx\"\u003ecenter\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eobj\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"nx\"\u003ebox\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nx\"\u003eborder\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"nx\"\u003eradius\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e15\u003c/span\u003e\u003cspan class=\"nx\"\u003epx\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"nx\"\u003eimportant\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ehope\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"nx\"\u003eui\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"nx\"\u003elight\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eobj\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"nx\"\u003ebox\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nx\"\u003ebackground\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"nx\"\u003ecolor\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"err\"\u003e#\u003c/span\u003e\u003cspan class=\"nx\"\u003effffff70\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"nx\"\u003eimportant\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ehope\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"nx\"\u003ec\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"nx\"\u003ePJLV\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ehope\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"nx\"\u003ec\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"nx\"\u003ePJLV\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"nx\"\u003eikSuVsl\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"nx\"\u003ecss\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nx\"\u003eborder\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"nx\"\u003eradius\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e15\u003c/span\u003e\u003cspan class=\"nx\"\u003epx\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"nx\"\u003eimportant\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nx\"\u003ebackground\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"nx\"\u003ecolor\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"err\"\u003e#\u003c/span\u003e\u003cspan class=\"nx\"\u003effffff70\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"nx\"\u003eimportant\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ehope\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"nx\"\u003ec\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"nx\"\u003ePJLV\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ehope\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"nx\"\u003ec\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"nx\"\u003ePJLV\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"nx\"\u003eibtHApG\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"nx\"\u003ecss\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nx\"\u003eborder\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"nx\"\u003eradius\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e15\u003c/span\u003e\u003cspan class=\"nx\"\u003epx\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"nx\"\u003eimportant\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nx\"\u003ebackground\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"nx\"\u003ecolor\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"err\"\u003e#\u003c/span\u003e\u003cspan class=\"nx\"\u003effffff70\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"nx\"\u003eimportant\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"err\"\u003e/style\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"看板娘\"\u003e看板娘\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003escript\u003c/span\u003e \u003cspan class=\"na\"\u003esrc\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;https://eqcn.ajz.miesnfu.com/wp-content/plugins/wp-3d-pony/live2dw/lib/L2Dwidget.min.js\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003escript\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c\"\u003e\u0026lt;!-- 看板娘 --\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003elink\u003c/span\u003e \u003cspan class=\"na\"\u003erel\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;stylesheet\u0026#34;\u003c/span\u003e \u003cspan class=\"na\"\u003ehref\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003escript\u003c/span\u003e \u003cspan class=\"na\"\u003esrc\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget@latest/autoload.js\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003escript\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"鼠标点击效果\"\u003e鼠标点击效果\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c\"\u003e\u0026lt;!--鼠标点击效果--\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003escript\u003c/span\u003e \u003cspan class=\"na\"\u003esrc\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/js/maodian.js\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003escript\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"aplayermeting\"\u003eAplayer、Meting\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c\"\u003e\u0026lt;!-- aplayer、meting --\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c\"\u003e\u0026lt;!-- require APlayer --\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003elink\u003c/span\u003e \u003cspan class=\"na\"\u003erel\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;stylesheet\u0026#34;\u003c/span\u003e \u003cspan class=\"na\"\u003ehref\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003escript\u003c/span\u003e \u003cspan class=\"na\"\u003esrc\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003escript\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c\"\u003e\u0026lt;!-- require MetingJS --\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003escript\u003c/span\u003e \u003cspan class=\"na\"\u003esrc\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003escript\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c\"\u003e\u0026lt;!-- 不显示歌词 --\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003escript\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     \u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003eremovelrc\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e//检测是否存在歌词按钮\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"nb\"\u003edocument\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003equerySelector\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;.aplayer-icon-lrc\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"c1\"\u003e//触发以后立刻移除监听\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e            \u003cspan class=\"nb\"\u003edocument\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eremoveEventListener\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;DOMNodeInserted\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"nx\"\u003eremovelrc\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"c1\"\u003e//稍作延时保证触发函数时存在按钮\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e            \u003cspan class=\"nx\"\u003esetTimeout\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"c1\"\u003e//以触发按钮的方式隐藏歌词，防止在点击显示歌词按钮时需要点击两次才能出现的问题\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e                \u003cspan class=\"nb\"\u003edocument\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003equerySelector\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;.aplayer-icon-lrc\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003eclick\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;success\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003edocument\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eaddEventListener\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;DOMNodeInserted\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eremovelrc\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003escript\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003eMeting Body部分\u003c/strong\u003e\u003c/p\u003e","title":"Alist 美化指南"},{"content":"创建vite项目并安装vscode插件 Vite Vite 是一个 web 开发构建工具，由于其原生 ES 模块导入方式，可以实现闪电般的冷服务器启动.通过在终端中运行以下命令，可以使用 Vite 快速构建 Vue 项目\n兼容性注意\nVite 需要 Node.js 版本 14.18+，16+。然而，有些模板需要依赖更高的 Node 版本才能正常运行，当你的包管理器发出警告时，请注意升级你的 Node 版本。\n使用 NPM: $ npm create vite@latest 使用 Yarn: $ yarn create vite 使用 PNPM: $ pnpm create vite 然后按照提示操作即可！\n你还可以通过附加的命令行选项直接指定项目名称和你想要使用的模板。例如，要构建一个 Vite + Vue 项目，运行:\n# npm 6.x npm create vite@latest my-vue-app --template vue # npm 7+, extra double-dash is needed: npm create vite@latest my-vue-app -- --template vue # yarn yarn create vite my-vue-app --template vue # pnpm pnpm create vite my-vue-app --template vue 查阅更多可以查看 Vite and Vue3 官网\n插件安装 Vue Language Features (Volar): VueLF 是一个专门为 Vue 3 构建的语言支持插件。它基于@vue/reactivity按需计算一切，实现原生 TypeScript 语言服务级别的性能。 Vue 3 Snippets: Vue 代码提示 WindiCSS IntelliSense Stylelint: 然后禁用项目的 css 和 scss 验证。 (ctrl+shift+p) 并搜索“设置 json” \u0026#34;scss.validate\u0026#34;: false \u0026#34;css.validate\u0026#34;: false 在项目根目录stylelint.config.js中创建 stylelint 插件配置文件, 添加以下内容以忽略规则apply, tailwind,etc: module.exports = { rules: { \u0026#39;at-rule-no-unknown\u0026#39;: [ true, { ignoreAtRules: [\u0026#39;tailwind\u0026#39;, \u0026#39;apply\u0026#39;, \u0026#39;variants\u0026#39;, \u0026#39;responsive\u0026#39;, \u0026#39;screen\u0026#39;] } ], \u0026#39;declaration-block-trailing-semicolon\u0026#39;: null, \u0026#39;no-descending-specificity\u0026#39;: null } } Element-plus https://element-plus.org/zh-CN/\n我们建议您使用包管理器（如 NPM、Yarn 或 pnpm）安装 Element Plus，然后您就可以使用打包工具，例如 Vite 或 webpack。\n# 选择一个你喜欢的包管理器 # NPM $ npm install element-plus --save # Yarn $ yarn add element-plus # pnpm $ pnpm install element-plus 用法 完整引入 如果你对打包后的文件大小不是很在乎，那么使用完整导入会更方便。\n// main.ts import { createApp } from \u0026#39;vue\u0026#39; import ElementPlus from \u0026#39;element-plus\u0026#39; import \u0026#39;element-plus/dist/index.css\u0026#39; import App from \u0026#39;./App.vue\u0026#39; const app = createApp(App) app.use(ElementPlus) app.mount(\u0026#39;#app\u0026#39;) Windi CSS https://cn.windicss.org/guide/\n安装相关包： npm i -D vite-plugin-windicss windicss 然后，在你的 Vite 配置中添加插件： // vite.config.js import WindiCSS from \u0026#39;vite-plugin-windicss\u0026#39; export default { plugins: [ WindiCSS(), ], } 最后，在你的 Vite 入口文件中导入 virtual:windi.css： import \u0026#39;virtual:windi.css\u0026#39; 使用及 @apply 简化代码 \u0026lt;script setup\u0026gt; \u0026lt;/script\u0026gt; \u0026lt;template\u0026gt; \u0026lt;button class=\u0026#39;btn\u0026#39;\u0026gt; 按钮 \u0026lt;/button\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;style\u0026gt; .btn{ @apply bg-purple-500 text-indigo-50 px-4 py-2 rounded-full transition-all duration-500 hover:( bg-purple-900) focus:(ring-8 ring-purple-900); } \u0026lt;/style\u0026gt; Vue-router https://router.vuejs.org/zh/index.html\nnpm install vue-router@4 yarn add vue-router@4 /router/index.js import { createRouter, // 函数用来创建一个路由实例 createWebHashHistory // 用来创建一个基于哈希路由的历史对象 } from \u0026#39;vue-router\u0026#39; const routes = [{ path: \u0026#39;/\u0026#39;, name: \u0026#39;Home\u0026#39;, component: () =\u0026gt; import(\u0026#39;../views/Home.vue\u0026#39;) }] // 这段代码定义了一个路由器，该路由器使用createWebHashHistory()创建的历史记录对象和给定的路由（routes）来定义路由。 // createWebHashHistory()创建的历史记录对象会把URL的片段存储在window.location.hash中，以支持前进和后退按钮和书签。 const router = createRouter({ history: createWebHashHistory(), routes }) export default router main.js import router from \u0026#39;./router\u0026#39; const app = createApp(App) app.use(router) app.mount(\u0026#39;#app\u0026#39;) 捕获所有路由或 404 Not found 路由 常规参数只匹配 url 片段之间的字符，用 / 分隔。如果我们想匹配任意路径，我们可以使用自定义的 路径参数 正则表达式，在 路径参数 后面的括号中加入 正则表达式 :\nconst routes = [ // 将匹配所有内容并将其放在 `$route.params.pathMatch` 下 { path: \u0026#39;/:pathMatch(.*)*\u0026#39;, name: \u0026#39;NotFound\u0026#39;, component: NotFound }, // 将匹配以 `/user-` 开头的所有内容，并将其放在 `$route.params.afterUser` 下 { path: \u0026#39;/user-:afterUser(.*)\u0026#39;, component: UserGeneric }, ] 登陆页面开发 ElementPlus_Layout 布局: 通过基础的 24 分栏，迅速简便地创建布局。 Flexbox: 使用 flex 创建一个块级 flex 容器。 Layout 响应式布局 参照了 Bootstrap 的 响应式设计，预设了五个响应尺寸：xs、sm、md、lg 和 xl。\n\u0026lt;template\u0026gt; \u0026lt;el-row :gutter=\u0026#34;10\u0026#34;\u0026gt; \u0026lt;el-col :xs=\u0026#34;8\u0026#34; :sm=\u0026#34;6\u0026#34; :md=\u0026#34;4\u0026#34; :lg=\u0026#34;3\u0026#34; :xl=\u0026#34;1\u0026#34; \u0026gt;\u0026lt;div class=\u0026#34;grid-content ep-bg-purple\u0026#34; /\u0026gt;\u0026lt;/el-col\u0026gt; \u0026lt;el-col :xs=\u0026#34;4\u0026#34; :sm=\u0026#34;6\u0026#34; :md=\u0026#34;8\u0026#34; :lg=\u0026#34;9\u0026#34; :xl=\u0026#34;11\u0026#34; \u0026gt;\u0026lt;div class=\u0026#34;grid-content ep-bg-purple-light\u0026#34; /\u0026gt;\u0026lt;/el-col\u0026gt; \u0026lt;el-col :xs=\u0026#34;4\u0026#34; :sm=\u0026#34;6\u0026#34; :md=\u0026#34;8\u0026#34; :lg=\u0026#34;9\u0026#34; :xl=\u0026#34;11\u0026#34; \u0026gt;\u0026lt;div class=\u0026#34;grid-content ep-bg-purple\u0026#34; /\u0026gt;\u0026lt;/el-col\u0026gt; \u0026lt;el-col :xs=\u0026#34;8\u0026#34; :sm=\u0026#34;6\u0026#34; :md=\u0026#34;4\u0026#34; :lg=\u0026#34;3\u0026#34; :xl=\u0026#34;1\u0026#34; \u0026gt;\u0026lt;div class=\u0026#34;grid-content ep-bg-purple-light\u0026#34; /\u0026gt;\u0026lt;/el-col\u0026gt; \u0026lt;/el-row\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;style\u0026gt; .el-col { border-radius: 4px; } .grid-content { border-radius: 4px; min-height: 36px; } \u0026lt;/style\u0026gt; xs \u0026lt;768px 响应式栅格数或者栅格属性对象 number / object sm ≥768px 响应式栅格数或者栅格属性对象 number / object md ≥992px 响应式栅格数或者栅格属性对象 number / object lg ≥1200px 响应式栅格数或者栅格属性对象 number / object xl ≥1920px 响应式栅格数或者栅格属性对象 number / object icon 图标引入 https://element-plus.gitee.io/zh-CN/component/icon.html\n# 选择一个你喜欢的包管理器 # NPM $ npm install @element-plus/icons-vue # Yarn $ yarn add @element-plus/icons-vue # pnpm $ pnpm install @element-plus/icons-vue 注册所有图标\n您需要从 @element-plus/icons-vue 中导入所有图标并进行全局注册。\n// main.ts // 如果您正在使用CDN引入，请删除下面一行。 import * as ElementPlusIconsVue from \u0026#39;@element-plus/icons-vue\u0026#39; const app = createApp(App) for (const [key, component] of Object.entries(ElementPlusIconsVue)) { app.component(key, component) } 使用(插槽)\n\u0026lt;el-input v-model=\u0026#34;form.username\u0026#34; placeholder=\u0026#34;请输入用户名\u0026#34;\u0026gt; \u0026lt;template #prefix\u0026gt; \u0026lt;el-icon class=\u0026#34;el-input__icon\u0026#34;\u0026gt; \u0026lt;search /\u0026gt; \u0026lt;/el-icon\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/el-input\u0026gt; import { Calendar, Search } from \u0026#39;@element-plus/icons-vue\u0026#39; 外部 icon 阿里巴巴矢量图库iconfont\n选择图标加入购物车, 直接下载引用\n// mian.js import \u0026#39;./assets/icon/iconfont.css\u0026#39; \u0026lt;el-link type=\u0026#34;primary\u0026#34; class=\u0026#34;text-white\u0026#34; @click=\u0026#34;JumpToGithub\u0026#34;\u0026gt; \u0026lt;i class=\u0026#34;iconfont icon-icon_github mr-1\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; Github \u0026lt;/el-link\u0026gt; setup 是在单文件组件 (SFC) 中使用组合式 API 的编译时语法糖。当同时使用 SFC 与组合式 API 时该语法是默认推荐。相比于普通的 语法，它具有更多优势：\n更少的样板内容，更简洁的代码。 能够使用纯 TypeScript 声明 props 和自定义事件。 更好的运行时性能 (其模板会被编译成同一作用域内的渲染函数，避免了渲染上下文代理对象)。 更好的 IDE 类型推导性能 (减少了语言服务器从代码中抽取类型的工作)。 普通的 只在组件被首次引入的时候执行一次不同， 中的代码会在每次组件实例被创建的时候执行。 当使用 的时候，任何在 声明的顶层的绑定 (包括变量，函数声明，以及 import 导入的内容) 都能在模板中直接使用 import 导入的内容也会以同样的方式暴露。这意味着我们可以在模板表达式中直接使用导入的 helper 函数，而不需要通过 methods 选项来暴露它 \u0026lt;script setup\u0026gt; // 变量 const msg = \u0026#39;Hello!\u0026#39; // 函数 function log() { console.log(msg) } \u0026lt;/script\u0026gt; \u0026lt;template\u0026gt; \u0026lt;button @click=\u0026#34;log\u0026#34;\u0026gt;{{ msg }}\u0026lt;/button\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup\u0026gt; import { capitalize } from \u0026#39;./helpers\u0026#39; \u0026lt;/script\u0026gt; \u0026lt;template\u0026gt; \u0026lt;div\u0026gt;{{ capitalize(\u0026#39;hello\u0026#39;) }}\u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; 以下为简单示例代码\n\u0026lt;template\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;{{ myref0 }}\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;{{ myref1 }}\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;{{ myref2 }}\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;{{ myref3 }}\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;{{ myrea0 }}\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;{{ myrea1 }}\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;{{ myrea2.age }}\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;{{ myrea3.user.name }}\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;{{ myrea4.one.three.age.four }}\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;el-button @click=\u0026#34;change\u0026#34;\u0026gt;change\u0026lt;/el-button\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import { ref, reactive } from \u0026#39;vue\u0026#39; export default { setup() { let myref0 = ref(1); let myref1 = ref(2); let myref2 = ref(true); let myref3 = ref(\u0026#39;myref3\u0026#39;) let myrea0 = reactive(0); let myrea1 = reactive(\u0026#39;myrea1\u0026#39;); let myrea2 = reactive({ age: 3 }) let myrea3 = reactive({ user: { name: \u0026#34;zs\u0026#34;, } }) let myrea4 = reactive({ top: \u0026#39;top\u0026#39;, one: { two: \u0026#34;two\u0026#34;, three: { name: \u0026#34;LS\u0026#34;, age: { four: \u0026#34;four\u0026#34; } }, } }) function change() { myref0 = 2; myref1.value++; myref2.value = false; myref3.value = \u0026#39;MyRef333\u0026#39; myrea0++; myrea1 = \u0026#39;myrea1111\u0026#39;; myrea2.age++; myrea3.user.name = \u0026#34;ww\u0026#34;; myrea4.one.three.age.four = \u0026#34;five\u0026#34;; console.log(myref0); console.log(myrea0); console.log(myrea1); } return { myref0, myrea0, myref1, myrea1, myref2, myrea2, myref3, myrea3, myrea4, change } } } \u0026lt;/script\u0026gt; 1 =\u0026gt; 1 2 =\u0026gt; 3 false =\u0026gt; flase MyRef3 =\u0026gt; MyRef333 0 =\u0026gt; 0 myrea1 =\u0026gt; myrea1 3 =\u0026gt; 4 zs =\u0026gt; ww four =\u0026gt; five ref包裹简单类型，可以响应数据变化。 reactive包裹简单类型，不可以响应数据变化。 在更改ref包裹的值时，需要加 .value 来触发响应。 在页面中使用，{{ }}进行文本插值时，即使使用ref包裹也不需要添加 .value 属性，得益于在检测到 __v_isRef:true 时，vue会帮我们添加。 登录表单校验 \u0026lt;el-form ref=\u0026#34;formRef\u0026#34; :model=\u0026#34;form\u0026#34; :rules=\u0026#34;rules\u0026#34; class=\u0026#34;w-2/4\u0026#34;\u0026gt; \u0026lt;el-form-item prop=\u0026#34;username\u0026#34;\u0026gt; \u0026lt;el-input v-model=\u0026#34;form.username\u0026#34; placeholder=\u0026#34;请输入用户名\u0026#34;\u0026gt; \u0026lt;template #prefix\u0026gt; \u0026lt;el-icon\u0026gt; \u0026lt;User /\u0026gt; \u0026lt;/el-icon\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/el-input\u0026gt; \u0026lt;/el-form-item\u0026gt; \u0026lt;el-form-item prop=\u0026#34;password\u0026#34;\u0026gt; \u0026lt;el-input v-model=\u0026#34;form.password\u0026#34; type=\u0026#34;password\u0026#34; placeholder=\u0026#34;请输入密码\u0026#34; show-password @keyup.enter.native=\u0026#34;onSubmit\u0026#34;\u0026gt; \u0026lt;template #prefix\u0026gt; \u0026lt;el-icon\u0026gt; \u0026lt;Lock /\u0026gt; \u0026lt;/el-icon\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/el-input\u0026gt; \u0026lt;/el-form-item\u0026gt; \u0026lt;el-form-item\u0026gt; \u0026lt;el-button round color=\u0026#34;#2563eb \u0026#34; class=\u0026#34;w-full\u0026#34; type=\u0026#34;primary\u0026#34; @click=\u0026#34;onSubmit\u0026#34;\u0026gt;登 录\u0026lt;/el-button\u0026gt; \u0026lt;/el-form-item\u0026gt; \u0026lt;/el-form\u0026gt; import { reactive, ref } from \u0026#39;vue\u0026#39; // do not use same name with ref const form = reactive({ username: \u0026#34;\u0026#34;, password: \u0026#34;\u0026#34; }) const rules = { username: [ { required: true, message: \u0026#39;用户名不能为空\u0026#39;, trigger: \u0026#39;blur\u0026#39; }, ], password: [ { required: true, message: \u0026#39;密码不能为空\u0026#39;, trigger: \u0026#39;blur\u0026#39; }, ] } const formRef = ref(null) const onSubmit = () =\u0026gt; { formRef.value.validate((valid) =\u0026gt; { if (!valid) { return false } console.log(\u0026#34;验证通过\u0026#34;); }) } Axios http://axios-js.com/\nnpm install axios // /src/axios.js import axios from \u0026#39;axios\u0026#39;; console.log(import.meta.env.VITE_APP_BASE_API); const instance = axios.create({ baseURL:import.meta.env.VITE_APP_BASE_API, }) export default instance; // vue.config.js import { defineConfig } from \u0026#39;vite\u0026#39; import vue from \u0026#39;@vitejs/plugin-vue\u0026#39; import WindiCSS from \u0026#39;vite-plugin-windicss\u0026#39; import path from \u0026#39;path\u0026#39; // https://vitejs.dev/config/ export default defineConfig({ // 它将别名“~”映射到当前目录的“src”文件夹，因此在进行路径引用时，可以使用“~”，而不是使用相对路径。 resolve: { alias: { \u0026#39;~\u0026#39;: path.resolve(__dirname, \u0026#39;src\u0026#39;), }, }, plugins: [ vue(), WindiCSS() ], server: { cors: true, proxy: { \u0026#39;/api\u0026#39;: { target: \u0026#39;https://ceshi13.dishait.cn\u0026#39;, changeOrigin: true, rewrite: (path) =\u0026gt; path.replace(/^\\/api/, \u0026#39;\u0026#39;), }, }, }, build: { sourcemap: false, // 消除打包大小超过500kb警告 chunkSizeWarningLimit: 4000 }, }) import axios from \u0026#39;~/axios\u0026#39;; // 通过 export 导出 export const login = (username, password) =\u0026gt; { return axios.post(\u0026#39;/admin/login\u0026#39;, { username, password }); }; Vueuse https://vueuse.org/\n把一些原本不支持响应式的 api 等 支持响应式\nuseCookies npm i @vueuse/integrations npm i universal-cookie \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;col-12\u0026#34;\u0026gt; \u0026lt;el-button type=\u0026#34;primary\u0026#34; @click=\u0026#34;set(\u0026#39;test\u0026#39;, \u0026#39;test\u0026#39;)\u0026#34;\u0026gt;设置cookie\u0026lt;/el-button\u0026gt; \u0026lt;el-button type=\u0026#34;primary\u0026#34; @click=\u0026#34;remove(\u0026#39;test\u0026#39;)\u0026#34;\u0026gt;删除cookie\u0026lt;/el-button\u0026gt; \u0026lt;el-button type=\u0026#34;primary\u0026#34; @click=\u0026#34;get(\u0026#39;test\u0026#39;)\u0026#34;\u0026gt;读取cookie\u0026lt;/el-button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup\u0026gt; import { useCookies } from \u0026#34;@vueuse/integrations/useCookies\u0026#34;; const TokenKey = \u0026#34;admin-token\u0026#34;; const cookies = useCookies(); // 获取token export function getToken() { return cookies.get(TokenKey); } // 设置token export function setToken(token) { // token 有效期为 60 分钟 const expires = new Date(Date.now() + 60 * 60 * 1000); cookies.set(TokenKey, token, { expires }); } // 移除token export function removeToken() { return cookies.remove(TokenKey); } \u0026lt;/script\u0026gt; 拦截器 import { getToken} from \u0026#39;~/composables/auth\u0026#39; import { toast } from \u0026#39;~/composables/util\u0026#39; import axios from \u0026#39;axios\u0026#39;; // 创建axios实例 const instance = axios.create({ baseURL: import.meta.env.VITE_APP_BASE_API, }) // 添加请求拦截器 instance.interceptors.request.use(function (config) { // 在发送请求之前做些什么 const token = getToken(); if (token) { config.headers[\u0026#39;token\u0026#39;] = token; } return config; }, function (error) { // 对请求错误做些什么 return Promise.reject(error); }); // 添加响应拦截器 instance.interceptors.response.use(function (response) { // 对响应数据做点什么 return response.data.data; }, function (error) { // 对响应错误做点什么 toast(error.response.data.msg, \u0026#39;error\u0026#39;); return Promise.reject(error); }); export default instance; Vuex Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式 + 库。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。\nnpm install vuex@next --save // /store/index.js import { createStore } from \u0026#39;vuex\u0026#39; // 创建一个新的 store 实例 const store = createStore({ state() { return { // 用户信息 user: {} } }, mutations: { // 设置用户信息 SET_USER_INFO(state, user) { state.user = user } } }); export default store import { useStore } from \u0026#39;vuex\u0026#39; const store = useStore(); store.commit(\u0026#39;SET_USER_INFO\u0026#39;, res2); \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;about\u0026#34;\u0026gt; \u0026lt;h1\u0026gt; {{ $store.state.user }}\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; 具体使用看官方文档\n全局路由守卫 // /src/permission.js // 处理权限相关 import router from \u0026#39;~/router\u0026#39; import { getToken } from \u0026#39;~/composables/auth\u0026#39; import { toast } from \u0026#39;~/composables/util\u0026#39; // 全局前置守卫 router.beforeEach((to, from, next) =\u0026gt; { // 如果有token，就放行 const token = getToken(); // 如果没有token，就跳转到登录页 if (!token \u0026amp;\u0026amp; to.path !== \u0026#39;/login\u0026#39;) { toast(\u0026#34;请先登录\u0026#34;, \u0026#34;warning\u0026#34;); return next ({ path: \u0026#34;/login\u0026#34; }) }; // 防止重复登录 if (token \u0026amp;\u0026amp; to.path === \u0026#39;/login\u0026#39;) { toast(\u0026#34;请先退出登录\u0026#34;, \u0026#34;warning\u0026#34;); return next ({ path: from.path }) }; next() }) // mian.js import \u0026#34;./permission\u0026#34; app.use(store) 全局 loading // npm i nprogress // main.js import \u0026#34;nprogress/nprogress.css\u0026#34; // composable/util.js // 显示全屏loading export function showFullLoading() { nprogress.start() } // 隐藏全屏loading export function hideFullLoading() { nprogress.done() } // permission.js import { toast, showFullLoading, hideFullLoading } from \u0026#39;~/composables/util\u0026#39; // 全局前置守卫 router.beforeEach(async (to, from, next) =\u0026gt; { // 显示 loading showFullLoading(); } // 全局后置守卫 router.afterEach(() =\u0026gt; { // 隐藏 loading hideFullLoading(); }) 样式 #nprogress .bar { background: wheat !important; height: 3px !important; } 动态页面标题 // router/index.js { path: \u0026#39;/login\u0026#39;, name: \u0026#39;Login\u0026#39;, component: Login, meta: { title: \u0026#39;登录\u0026#39; } } // permission.js // 全局前置守卫 router.beforeEach(async (to, from, next) =\u0026gt; { // 设置页面标题 document.title = to.meta.title; } 后台 Layout 开发 组件引用 // /layout/admin.vue \u0026lt;template\u0026gt; \u0026lt;el-container\u0026gt; \u0026lt;el-header\u0026gt; \u0026lt;f-header\u0026gt;\u0026lt;/f-header\u0026gt; \u0026lt;/el-header\u0026gt; \u0026lt;el-container\u0026gt; \u0026lt;el-aside width=\u0026#34;200px\u0026#34;\u0026gt; \u0026lt;f-menu\u0026gt;\u0026lt;/f-menu\u0026gt; \u0026lt;/el-aside\u0026gt; \u0026lt;el-main\u0026gt; \u0026lt;f-tag-list\u0026gt;\u0026lt;/f-tag-list\u0026gt; \u0026lt;router-view\u0026gt;\u0026lt;/router-view\u0026gt; \u0026lt;/el-main\u0026gt; \u0026lt;/el-container\u0026gt; \u0026lt;el-footer\u0026gt;Footer\u0026lt;/el-footer\u0026gt; \u0026lt;/el-container\u0026gt; \u0026lt;/template\u0026gt; import FHeader from \u0026#39;./components/FHeader.vue\u0026#39;; import FMenu from \u0026#39;./components/FMenu.vue\u0026#39;; import FTagList from \u0026#39;./components/FTagList.vue\u0026#39;; 头部代码 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;f-header\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;logo\u0026#34;\u0026gt; \u0026lt;el-icon class=\u0026#34;mr-1\u0026#34;\u0026gt;\u0026lt;eleme-filled /\u0026gt;\u0026lt;/el-icon\u0026gt; 帝莎编程 \u0026lt;/span\u0026gt; \u0026lt;el-icon class=\u0026#34;icon-btn\u0026#34;\u0026gt; \u0026lt;fold /\u0026gt; \u0026lt;/el-icon\u0026gt; \u0026lt;el-icon class=\u0026#34;icon-btn\u0026#34;\u0026gt; \u0026lt;refresh /\u0026gt; \u0026lt;/el-icon\u0026gt; \u0026lt;div class=\u0026#34;ml-auto flex items-center\u0026#34;\u0026gt; \u0026lt;el-icon class=\u0026#34;icon-btn\u0026#34;\u0026gt;\u0026lt;full-screen /\u0026gt;\u0026lt;/el-icon\u0026gt; \u0026lt;el-dropdown class=\u0026#34;dropdown\u0026#34; @command=\u0026#34;handleCommand\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;flex items-center text-light-50\u0026#34;\u0026gt; \u0026lt;el-avatar class=\u0026#34;mr-2\u0026#34; :size=\u0026#34;25\u0026#34; :src=\u0026#34;$store.state.user.avatar\u0026#34; /\u0026gt; {{ $store.state.user.username }} \u0026lt;el-icon class=\u0026#34;el-icon--right\u0026#34;\u0026gt; \u0026lt;arrow-down /\u0026gt; \u0026lt;/el-icon\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;template #dropdown\u0026gt; \u0026lt;el-dropdown-menu\u0026gt; \u0026lt;el-dropdown-item command=\u0026#34;rePwd\u0026#34;\u0026gt;修改密码\u0026lt;/el-dropdown-item\u0026gt; \u0026lt;el-dropdown-item command=\u0026#34;logout\u0026#34;\u0026gt;退出登录\u0026lt;/el-dropdown-item\u0026gt; \u0026lt;/el-dropdown-menu\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/el-dropdown\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;style\u0026gt; .f-header { @apply flex items-center bg-indigo-700 text-light-50 fixed top-0 left-0 right-0; height: 64px; } .logo { width: 250px; @apply flex justify-center items-center text-xl font-thin; } .icon-btn { @apply flex justify-center items-center; width: 42px; height: 64px; cursor: pointer; } .icon-btn:hover { @apply bg-indigo-600; } .f-header .dropdown { height: 64px; cursor: pointer; @apply flex justify-center items-center mx-5; } \u0026lt;/style\u0026gt; 下拉菜单事件绑定 \u0026lt;el-dropdown class=\u0026#34;dropdown\u0026#34; @command=\u0026#34;handleCommand\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;flex items-center text-light-50\u0026#34;\u0026gt; \u0026lt;el-avatar class=\u0026#34;mr-2\u0026#34; :size=\u0026#34;25\u0026#34; :src=\u0026#34;$store.state.user.avatar\u0026#34; /\u0026gt; {{ $store.state.user.username }} \u0026lt;el-icon class=\u0026#34;el-icon--right\u0026#34;\u0026gt; \u0026lt;arrow-down /\u0026gt; \u0026lt;/el-icon\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;template #dropdown\u0026gt; \u0026lt;el-dropdown-menu\u0026gt; \u0026lt;el-dropdown-item command=\u0026#34;rePwd\u0026#34;\u0026gt;修改密码\u0026lt;/el-dropdown-item\u0026gt; \u0026lt;el-dropdown-item command=\u0026#34;logout\u0026#34;\u0026gt;退出登录\u0026lt;/el-dropdown-item\u0026gt; \u0026lt;/el-dropdown-menu\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/el-dropdown\u0026gt; \u0026lt;script setup\u0026gt; const handleCommand = (command)=\u0026gt;{ console.log(command); } \u0026lt;/script\u0026gt; 页面刷新和全屏 https://vueuse.org/core/useFullscreen/#usefullscreen\nnpm i @vueuse/core \u0026lt;el-tooltip effect=\u0026#34;dark\u0026#34; content=\u0026#34;刷新\u0026#34; placement=\u0026#34;bottom\u0026#34;\u0026gt; \u0026lt;el-icon class=\u0026#34;icon-btn\u0026#34; @click=\u0026#34;handleRefresh\u0026#34;\u0026gt; \u0026lt;refresh /\u0026gt; \u0026lt;/el-icon\u0026gt; \u0026lt;/el-tooltip\u0026gt; \u0026lt;el-tooltip effect=\u0026#34;dark\u0026#34; content=\u0026#34;全屏\u0026#34; placement=\u0026#34;bottom\u0026#34;\u0026gt; \u0026lt;el-icon class=\u0026#34;icon-btn\u0026#34; @click=\u0026#34;toggle\u0026#34;\u0026gt; \u0026lt;full-screen v-if=\u0026#34;!isFullscreen\u0026#34; /\u0026gt; \u0026lt;aim v-else /\u0026gt; \u0026lt;/el-icon\u0026gt; \u0026lt;/el-tooltip\u0026gt; // full-screen v-if=\u0026#34;!isFullscreen\u0026#34;和aim v-else是两个自定义的组件，它们 // 分别代表全屏和非全屏状态下的图标。其中，v-if=\u0026#34;!isFullscreen\u0026#34;表示当 // isFullscreen为false时，显示full-screen组件，否则显示aim组件。 \u0026lt;script setup\u0026gt; import { useFullscreen } from \u0026#39;@vueuse/core\u0026#39; const handleRefresh = ()=\u0026gt;{ // router.go(0); location.reload(); } // const toggle = ()=\u0026gt;{ // if (document.fullscreenElement) { // document.exitFullscreen(); // } else { // document.documentElement.requestFullscreen(); // } // } const { isFullscreen, toggle } = useFullscreen() // isFullscreen 是否全屏 // toggle 切换全屏 \u0026lt;/script\u0026gt; 通用抽屉组件封装 defineExpose 使用 的组件是默认关闭的——即通过模板引用或者 $parent 链获取到的组件的公开实例，不会暴露任何在 中声明的绑定。\n可以通过 defineExpose 编译器宏来显式指定在 组件中要暴露出去的属性：\n\u0026lt;script setup\u0026gt; import { ref } from \u0026#39;vue\u0026#39; const a = 1 const b = ref(2) defineExpose({ a, b }) \u0026lt;/script\u0026gt; 当父组件通过模板引用的方式获取到当前组件的实例，获取到的实例会像这样 { a: number, b: number } (ref 会和在普通实例中一样被自动解包)\n\u0026lt;template\u0026gt; \u0026lt;el-drawer v-model=\u0026#34;showDrawer\u0026#34; title=\u0026#34;修改密码\u0026#34; size=\u0026#34;45%\u0026#34; :close-on-click-modal=\u0026#34;false\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;formDrawer\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;body\u0026#34;\u0026gt; \u0026lt;slot\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;actions\u0026#34;\u0026gt; \u0026lt;el-button type=\u0026#34;primary\u0026#34;\u0026gt;提交\u0026lt;/el-button\u0026gt; \u0026lt;el-button type=\u0026#34;default\u0026#34; @click=\u0026#34;close\u0026#34;\u0026gt;取消\u0026lt;/el-button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/el-drawer\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup\u0026gt; import { ref } from \u0026#34;vue\u0026#34; const showDrawer = ref(false) // 打开 const open = ()=\u0026gt; showDrawer.value = true // 关闭 const close = ()=\u0026gt;showDrawer.value = false // 向父组件暴露以下方法 defineExpose({ open, close }) \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .formDrawer{ width: 100%; height: 100%; position: relative; @apply flex flex-col; } .formDrawer .body{ flex: 1; position: absolute; top: 0; left: 0; right: 0; bottom: 50px; overflow-y: auto; } .formDrawer .actions{ height: 50px; @apply mt-auto flex items-center; } \u0026lt;/style\u0026gt; defineProps() 和 defineEmits() 为了在声明 props 和 emits 选项时获得完整的类型推导支持，我们可以使用 defineProps 和 defineEmits API，它们将自动地在 中可用：\n\u0026lt;script setup\u0026gt; const props = defineProps({ foo: String }) const emit = defineEmits([\u0026#39;change\u0026#39;, \u0026#39;delete\u0026#39;]) // setup 代码 \u0026lt;/script\u0026gt; \u0026lt;template\u0026gt; \u0026lt;el-drawer v-model=\u0026#34;showDrawer\u0026#34; :title=\u0026#34;title\u0026#34; :size=\u0026#34;size\u0026#34; :close-on-click-modal=\u0026#34;false\u0026#34; :destroy-on-close=\u0026#34;destroyOnClose\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;formDrawer\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;body\u0026#34;\u0026gt; \u0026lt;slot\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;actions\u0026#34;\u0026gt; \u0026lt;el-button type=\u0026#34;primary\u0026#34; @click=\u0026#34;submit\u0026#34; :loading=\u0026#34;loading\u0026#34;\u0026gt;{{ submitText }}\u0026lt;/el-button\u0026gt; \u0026lt;el-button type=\u0026#34;default\u0026#34; @click=\u0026#34;close\u0026#34;\u0026gt;取消\u0026lt;/el-button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/el-drawer\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup\u0026gt; // defineProps() 接收父组件传递的参数 const props = defineProps({ title: String, size: { type: String, default: \u0026#39;45%\u0026#39; }, // 控制是否在关闭 Drawer 之后将子元素全部销毁 destroyOnClose: { type: Boolean, default: true }, // 提交按钮的文字 submitText: { type: String, default: \u0026#39;提交\u0026#39; }, }) // 这段代码使用了 Vue 3 中的 defineEmits 函数来声明了一个名为 submit 的事件。然后在 submit 函数中，调用了 emit 函数并传入了 // 事件名称 \u0026#39;submit\u0026#39;，从而触发了名为 submit 的事件。这样做的好处是可以在组件的模板中使用 v-on:submit 或 @submit 来监听该事件 // 从而实现组件与父组件之间的通信。 const emit = defineEmits([\u0026#39;submit\u0026#39;]) const submit = () =\u0026gt; emit(\u0026#39;submit\u0026#39;) \u0026lt;script\u0026gt; \u0026lt;form-drawer ref=\u0026#34;formDrawerRef\u0026#34; title=\u0026#34;修改密码\u0026#34; size=\u0026#34;30%\u0026#34; destroy-on-close @submit=\u0026#34;onSubmit\u0026#34; /\u0026gt; 菜单栏 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;f-menu\u0026#34; :style=\u0026#34;{ width: $store.state.asideWidth }\u0026#34;\u0026gt; \u0026lt;el-menu :default-active=\u0026#34;defaultActive\u0026#34; unique-opened default-active=\u0026#34;2\u0026#34; class=\u0026#34;border-0\u0026#34; @select=\u0026#34;handleSelect\u0026#34; :collapse=\u0026#34;isCollapse\u0026#34; :collapse-transition=\u0026#34;false\u0026#34;\u0026gt; \u0026lt;template v-for=\u0026#34;(item, index) in asideMenus\u0026#34; :key=\u0026#34;index\u0026#34;\u0026gt; \u0026lt;el-sub-menu v-if=\u0026#34;item.child \u0026amp;\u0026amp; item.child.length \u0026gt; 0\u0026#34; :index=\u0026#34;item.name\u0026#34;\u0026gt; \u0026lt;template #title\u0026gt; \u0026lt;el-icon\u0026gt; \u0026lt;component :is=\u0026#34;item.icon\u0026#34;\u0026gt;\u0026lt;/component\u0026gt; \u0026lt;/el-icon\u0026gt; \u0026lt;span\u0026gt;{{ item.name }}\u0026lt;/span\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;el-menu-item v-for=\u0026#34;(item2, index2) in item.child\u0026#34; :key=\u0026#34;index2\u0026#34; :index=\u0026#34;item2.frontpath\u0026#34;\u0026gt; \u0026lt;el-icon\u0026gt; \u0026lt;component :is=\u0026#34;item2.icon\u0026#34;\u0026gt;\u0026lt;/component\u0026gt; \u0026lt;/el-icon\u0026gt; \u0026lt;span\u0026gt;{{ item2.name }}\u0026lt;/span\u0026gt; \u0026lt;/el-menu-item\u0026gt; \u0026lt;/el-sub-menu\u0026gt; \u0026lt;el-menu-item v-else :index=\u0026#34;item.frontpath\u0026#34;\u0026gt; \u0026lt;el-icon\u0026gt; \u0026lt;component :is=\u0026#34;item.icon\u0026#34;\u0026gt;\u0026lt;/component\u0026gt; \u0026lt;/el-icon\u0026gt; \u0026lt;span\u0026gt;{{ item.name }}\u0026lt;/span\u0026gt; \u0026lt;/el-menu-item\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/el-menu\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup\u0026gt; import { useRouter, useRoute } from \u0026#39;vue-router\u0026#39;; import { computed, ref } from \u0026#39;vue\u0026#39;; import { useStore } from \u0026#39;vuex\u0026#39;; const store = useStore() const isCollapse = computed(() =\u0026gt; store.state.asideWidth != \u0026#34;250px\u0026#34;) // 默认选中当前路由路径 const route = useRoute() const defaultActive = ref(route.path) const router = useRouter() const asideMenus = [ { \u0026#34;name\u0026#34;: \u0026#34;后台面板\u0026#34;, \u0026#34;icon\u0026#34;: \u0026#34;help\u0026#34;, \u0026#34;child\u0026#34;: [{ \u0026#34;name\u0026#34;: \u0026#34;主控台\u0026#34;, \u0026#34;icon\u0026#34;: \u0026#34;home-filled\u0026#34;, \u0026#34;frontpath\u0026#34;: \u0026#34;/\u0026#34;, }] }, { \u0026#34;name\u0026#34;: \u0026#34;商城管理\u0026#34;, \u0026#34;icon\u0026#34;: \u0026#34;shopping-bag\u0026#34;, \u0026#34;child\u0026#34;: [{ \u0026#34;name\u0026#34;: \u0026#34;商品管理\u0026#34;, \u0026#34;icon\u0026#34;: \u0026#34;shopping-cart-full\u0026#34;, \u0026#34;frontpath\u0026#34;: \u0026#34;/goods/list\u0026#34;, }], }, { \u0026#34;name\u0026#34;: \u0026#34;用户管理\u0026#34;, \u0026#34;icon\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;frontpath\u0026#34;: \u0026#34;/user/list\u0026#34; } ] const handleSelect = (e) =\u0026gt; { router.push(e) } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .f-menu { transition: all 0.2s; top: 64px; bottom: 0; left: 0; overflow-y: auto; overflow-x: hidden; @apply shadow-md fixed bg-light-50; } .f-menu::-webkit-scrollbar { width: 0px; } \u0026lt;/style\u0026gt; const store = createStore({ state() { return { // 用户信息 user: {}, // 侧边栏宽度 asideWidth: \u0026#34;250px\u0026#34;, } }, mutations: { // 设置用户信息 SET_USER_INFO(state, user) { state.user = user }, // 侧边栏展开 ASIDE_OPEN(state) { state.asideWidth = state.asideWidth == \u0026#34;250px\u0026#34; ? \u0026#34;64px\u0026#34; : \u0026#34;250px\u0026#34; } } }); Menu 属性名 说明 unique-opened 是否只保持一个子菜单的展开 default-active 页面加载时默认激活菜单的 index 根据菜单添加路由 check 路由 https://router.vuejs.org/zh/guide/advanced/dynamic-routing.html#%E6%9F%A5%E7%9C%8B%E7%8E%B0%E6%9C%89%E8%B7%AF%E7%94%B1\nVue Router 提供了两个功能来查看现有的路由：\nrouter.hasRoute()：检查路由是否存在。 router.getRoutes()：获取一个包含所有路由记录的数组。 hasRoute(name): boolean Checks if a route with a given name exists import { createRouter, // 函数用来创建一个路由实例 createWebHashHistory // 用来创建一个基于哈希路由的历史对象 } from \u0026#39;vue-router\u0026#39; import Index from \u0026#39;~/pages/index.vue\u0026#39; import NotFound from \u0026#39;~/pages/404.vue\u0026#39; import Admin from \u0026#39;~/layouts/admin.vue\u0026#39; import GoodList from \u0026#39;~/pages/goods/list.vue\u0026#39; import CategoryList from \u0026#39;~/pages/category/list.vue\u0026#39; import Login from \u0026#39;~/pages/login/login.vue\u0026#39; // 默认路由, 所有用户都可以访问 const routes = [ { path: \u0026#39;/\u0026#39;, name: \u0026#39;Admin\u0026#39;, component: Admin, meta: { title: \u0026#39;后台首页\u0026#39; } }, { path: \u0026#39;/:pathMatch(.*)*\u0026#39;, name: \u0026#39;NotFound\u0026#39;, component: NotFound, meta: { title: \u0026#39;404\u0026#39; } }, { path: \u0026#39;/login\u0026#39;, name: \u0026#39;Login\u0026#39;, component: Login, meta: { title: \u0026#39;登录\u0026#39; } } ] // 动态路由, 用于匹配用户权限添加的路由 const asyncRoutes = [{ path: \u0026#34;/\u0026#34;, name: \u0026#34;/\u0026#34;, component: Index, meta: { title: \u0026#34;后台首页\u0026#34; } }, { path: \u0026#34;/goods/list\u0026#34;, name: \u0026#34;/goods/list\u0026#34;, component: GoodList, meta: { title: \u0026#34;商品管理\u0026#34; } }, { path: \u0026#34;/category/list\u0026#34;, name: \u0026#34;/category/list\u0026#34;, component: CategoryList, meta: { title: \u0026#34;分类列表\u0026#34; } }] // 这段代码定义了一个路由器，该路由器使用createWebHashHistory()创建的历史记录对象和给定的路由（routes）来定义路由。 // createWebHashHistory()创建的历史记录对象会把URL的片段存储在window.location.hash中，以支持前进和后退按钮和书签。 export const router = createRouter({ history: createWebHashHistory(), routes }) // 用于添加动态路由 export function addRoutes(menus) { // 是否有新的路由 let hasNewRoutes = false const findAndAddRoutesByMenu = (menuList) =\u0026gt; { menuList.forEach(menu =\u0026gt; { let item = asyncRoutes.find(item =\u0026gt; item.path == menu.frontpath) // 判断是否已经添加过路由 if (item \u0026amp;\u0026amp; !router.hasRoute(item.path)) { router.addRoute(\u0026#39;Admin\u0026#39;, item) hasNewRoutes = true } if (menu.child \u0026amp;\u0026amp; menu.child.length \u0026gt; 0) { findAndAddRoutesByMenu(menu.child) } }) } findAndAddRoutesByMenu(menus) return hasNewRoutes } 动态路由主要通过两个函数实现。router.addRoute() 和 router.removeRoute()。它们只注册一个新的路由，也就是说，如果新增加的路由与当前位置相匹配，就需要你用 router.push() 或 router.replace() 来手动导航\n// 全局前置守卫 router.beforeEach(async (to, from, next) =\u0026gt; { // 如果用户登录了，自动获取用户信息，并存储在vuex当中 let hasNewRoutes = false if (token) { let { menus } = await store.dispatch(\u0026#34;getinfo\u0026#34;) // 动态添加路由 hasNewRoutes = addRoutes(menus); } // 设置页面标题 document.title = to.meta.title; hasNewRoutes ? next(to.fullPath) : next(); }) 标签导航方法 const tabList = ref([ { title: \u0026#39;后台首页\u0026#39;, path: \u0026#34;/\u0026#34; } ]) // 添加标签导航 const addTab = (tab) =\u0026gt; { // 判断是否存在 let notab = tabList.value.findIndex(item =\u0026gt; item.path == tab.path) == -1; if (notab) { tabList.value.push(tab); } cookies.set(\u0026#34;tabList\u0026#34;, tabList.value); } // 初始化标签导航列表 function initTabList() { let tbs = cookies.get(\u0026#34;tabList\u0026#34;); if (tbs) { tabList.value = tbs; } } initTabList() // onBeforeRouteUpdate 监听路由变化 onBeforeRouteUpdate((to, from) =\u0026gt; { activeTab.value = to.path; addTab({ title: to.meta.title, path: to.path }); }) // 页面切换 const changeTab = (t) =\u0026gt; { activeTab.value = t; router.push(t); } // 移除标签导航 const removeTab = (t) =\u0026gt; { let tabs = tabList.value let a = activeTab.value if (a == t) { tabs.forEach((tab, index) =\u0026gt; { if (tab.path == t) { const nextTab = tabs[index + 1] || tabs[index - 1] if (nextTab) { a = nextTab.path } } }) } activeTab.value = a; tabList.value = tabList.value.filter(tab =\u0026gt; tab.path != t); cookies.set(\u0026#34;tabList\u0026#34;, tabList.value); } Keep-alive 页面缓存 https://cn.vuejs.org/guide/built-ins/keep-alive.html#keepalive\n默认情况下，一个组件实例在被替换掉后会被销毁。这会导致它丢失其中所有已变化的状态——当这个组件再一次被显示时，会创建一个只带有初始状态的新实例。\n在切换时创建新的组件实例通常是有意义的，但在这个例子中，我们的确想要组件能在被“切走”的时候保留它们的状态。要解决这个问题，我们可以用 内置组件将这些动态组件包装起来：\n\u0026lt;!-- 非活跃的组件将会被缓存！ --\u0026gt; \u0026lt;KeepAlive\u0026gt; \u0026lt;component :is=\u0026#34;activeComponent\u0026#34; /\u0026gt; \u0026lt;/KeepAlive\u0026gt; transition全局过渡动画 https://cn.vuejs.org/guide/built-ins/transition.html\n每个子页面只能有一个 根结点\nhttps://animate.style/ 动画效果！\nhttps://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.css\n权限控制 V-permission 自定义指令 // directives\\permission.js import store from \u0026#34;~/store\u0026#34; function hasPermission(value, el = false) { if (!Array.isArray(value)) { throw new Error(`需要配置权限，例如 v-permission=\u0026#34;[\u0026#39;getStatistics3,GET\u0026#39;]\u0026#34;`) } const hasAuth = value.findIndex(v =\u0026gt; store.state.ruleNames.includes(v)) != -1 if (el \u0026amp;\u0026amp; !hasAuth) { // 拿到当前元素的父元素，然后删除当前元素 el.parentNode \u0026amp;\u0026amp; el.parentNode.removeChild(el) } return hasAuth } export default { install(app) { app.directive(\u0026#34;permission\u0026#34;, { // el: 指令所绑定的元素，可以用来直接操作 DOM 。 // binding: 传递给指令的值，例如：v-my-directive=\u0026#34;1 + 1\u0026#34; 中，参数为 2。 mounted(el, binding) { hasPermission(binding.value, el) } }) } } // main.js import permission from \u0026#39;~/directives/permission\u0026#39; const app = createApp(App) app.use(permission) app.mount(\u0026#39;#app\u0026#39;) 运用\n// 直接调用 directives\\permission.js 中方法判断 不存在删除元素 \u0026lt;el-col v-permission=\u0026#34;[\u0026#39;getStatistics3,GET\u0026#39;]\u0026#34; :span=\u0026#34;12\u0026#34; :offset=\u0026#34;0\u0026#34;\u0026gt; \u0026lt;IndexChart /\u0026gt; \u0026lt;/el-col\u0026gt; 统计面板 Element Plus 提示插件： Element Plus Snippets\nLayout 布局\n卡片\ntag 标签\n骨架屏组件 在需要等待加载内容的位置设置一个骨架屏，某些场景下比 Loading 的视觉效果更好。\n数字滚动动画 gsap\n封装组件 /components/CountTo.vue \u0026lt;template\u0026gt; \u0026lt;!-- toFix 保留两位 限制加载小数点过多 --\u0026gt; {{ d.num.toFixed(2) }} \u0026lt;/template\u0026gt; \u0026lt;script setup\u0026gt; import { reactive, watch } from \u0026#39;vue\u0026#39;; import gsap from \u0026#39;gsap\u0026#39; const props = defineProps({ value: { type: Number, default: 0 } }) const d = reactive({ num: 0 }) function AnimateToValue() { gsap.to(d, { duration: 0.5, num: props.value }) } AnimateToValue() // watch 是 Vue.js 3 中的一个 API，用于监听变量或者对象的变化，并在变化时执行回调函数。 watch(() =\u0026gt; props.value, () =\u0026gt; AnimateToValue() ) \u0026lt;/script\u0026gt; 应用以及使用 import CountTo from \u0026#34;~/components/CountTo.vue\u0026#34;; \u0026lt;span class=\u0026#34;text-3xl font-bold text-gray-500\u0026#34;\u0026gt; \u0026lt;CountTo :value=\u0026#34;item.value\u0026#34; /\u0026gt; \u0026lt;/span\u0026gt; Echarts 初步实现 \u0026lt;template\u0026gt; \u0026lt;el-card shadow=\u0026#34;never\u0026#34; class=\u0026#34;mt-5\u0026#34;\u0026gt; \u0026lt;template #header\u0026gt; \u0026lt;div class=\u0026#34;flex justify-between\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;text-sm\u0026#34;\u0026gt;订单统计\u0026lt;/span\u0026gt; \u0026lt;div\u0026gt; \u0026lt;el-check-tag v-for=\u0026#34;(item, index) in options\u0026#34; :key=\u0026#34;index\u0026#34; :checked=\u0026#34;current == item.value\u0026#34; style=\u0026#34;margin-right: 8px\u0026#34; @click=\u0026#34;handleChoose(item.value)\u0026#34;\u0026gt;{{ item.text }}\u0026lt;/el-check-tag\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;div id=\u0026#34;chart\u0026#34; style=\u0026#34;width: 100%;height: 300px;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/el-card\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup\u0026gt; import { ref, onMounted } from \u0026#39;vue\u0026#39;; import * as echarts from \u0026#39;echarts\u0026#39;; import { getStatistics3 } from \u0026#34;~/api/index.js\u0026#34; const current = ref(\u0026#34;week\u0026#34;) const options = [{ text: \u0026#34;近1个月\u0026#34;, value: \u0026#34;month\u0026#34; }, { text: \u0026#34;近1周\u0026#34;, value: \u0026#34;week\u0026#34; }, { text: \u0026#34;近24小时\u0026#34;, value: \u0026#34;hour\u0026#34; }] const handleChoose = (type) =\u0026gt; { current.value = type; getData(); } var myChart = null onMounted(() =\u0026gt; { var chartDom = document.getElementById(\u0026#39;chart\u0026#39;); myChart = echarts.init(chartDom); getData() }) function getData() { var option; option = { xAxis: { type: \u0026#39;category\u0026#39;, data: [] }, yAxis: { type: \u0026#39;value\u0026#39; }, series: [ { data: [], type: \u0026#39;bar\u0026#39;, showBackground: true, backgroundStyle: { color: \u0026#39;rgba(180, 180, 180, 0.2)\u0026#39; } } ] }; // option \u0026amp;\u0026amp; myChart.setOption(option); myChart.showLoading() getStatistics3(current.value).then(res=\u0026gt;{ option.xAxis.data = res.x option.series[0].data = res.y myChart.setOption(option) }).finally(()=\u0026gt;{ myChart.hideLoading() }) } \u0026lt;/script\u0026gt; loading 动画\nmyChart.showLoading() myChart.hideLoading() 在页面销毁之前释放图表 不然可能出现白屏现象\nhttps://echarts.apache.org/handbook/zh/concepts/chart-size/#%E5%AE%B9%E5%99%A8%E8%8A%82%E7%82%B9%E8%A2%AB%E9%94%80%E6%AF%81%E4%BB%A5%E5%8F%8A%E8%A2%AB%E9%87%8D%E5%BB%BA%E6%97%B6\n假设页面中存在多个标签页，每个标签页都包含一些图表。当选中一个标签页的时候，其他标签页的内容在 DOM 中被移除了。这样，当用户再选中这些标签页的时候，就会发现图表“不见”了。 本质上，这是由于图表的容器节点被移除导致的。即使之后该节点被重新添加，图表所在的节点也已经不存在了。 正确的做法是，在图表容器被销毁之后，调用 echartsInstance.dispose 销毁实例，在图表容器重新被添加后再次调用 echarts.init 初始化。 import { ref, onMounted, onBeforeUnmount } from \u0026#39;vue\u0026#39;; onBeforeUnmount(()=\u0026gt;{ if(myChart) echarts.dispose(myChart) }) 图表跟随画面变化 https://vueuse.org/core/useResizeObserver/#useresizeobserver https://echarts.apache.org/handbook/zh/concepts/chart-size/#%E4%B8%BA%E5%9B%BE%E8%A1%A8%E8%AE%BE%E7%BD%AE%E7%89%B9%E5%AE%9A%E7%9A%84%E5%A4%A7%E5%B0%8F \u0026lt;div ref=\u0026#34;el\u0026#34; id=\u0026#34;chart\u0026#34; style=\u0026#34;width: 100%;height: 300px;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script setup\u0026gt; import { useResizeObserver } from \u0026#39;@vueuse/core\u0026#39;; const el = ref(null); useResizeObserver(el, (entries) =\u0026gt; { const entry = entries[0]; const { width, height } = entry.contentRect; myChart.resize({ width, height }); }); \u0026lt;/script\u0026gt; 页面变化监听 //使用防抖 (setTimeout定时器) const getWindowInfo = () =\u0026gt; { const windowInfo = { width: window.innerWidth, hight: window.innerHeight } }; const debounce = (fn, delay) =\u0026gt; { let timer; return function() { if (timer) { clearTimeout(timer); } timer = setTimeout(() =\u0026gt; { fn(); }, delay); } }; //触发事件 触发时间（指定时间内执行事件） const cancalDebounce = debounce(getWindowInfo, 500); window.addEventListener(\u0026#39;resize\u0026#39;, cancalDebounce); // vue3 使用生命周期销毁钩子 onUnmounted(() =\u0026gt; { console.log(\u0026#39;onUnmounted\u0026#39;,\u0026#39;打印是否生效\u0026#39;); //移除监听事件 window.removeEventListener(\u0026#39;resize\u0026#39;, cancalDebounce); }) 样例\n\u0026lt;template\u0026gt; \u0026lt;div ref=\u0026#34;el\u0026#34;\u0026gt; \u0026lt;el-container class=\u0026#34;bg-white rounded\u0026#34; :style=\u0026#34;{ height: h + \u0026#39;px\u0026#39; }\u0026#34;\u0026gt; \u0026lt;el-header\u0026gt;Header\u0026lt;/el-header\u0026gt; \u0026lt;el-container\u0026gt; \u0026lt;el-aside width=\u0026#34;200px\u0026#34;\u0026gt;Aside\u0026lt;/el-aside\u0026gt; \u0026lt;el-main\u0026gt;Main\u0026lt;/el-main\u0026gt; \u0026lt;/el-container\u0026gt; \u0026lt;/el-container\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup\u0026gt; import { watch, ref, onUnmounted } from \u0026#39;vue\u0026#39;; import { useResizeObserver } from \u0026#39;@vueuse/core\u0026#39;; // 获取屏幕高度 let windowHeight = window.innerHeight || document.documentElement.clientHeight // 计算表格高度: 屏幕高度 - 头部高度 - 页签高度 - padding const h = ref(windowHeight - 60 - 44 - 40); //使用防抖 (setTimeout定时器) const getWindowInfo = () =\u0026gt; { const windowInfo = { width: window.innerWidth, hight: window.innerHeight } // 改变 h 的值 h.value = windowInfo.hight - 60 - 44 - 40; }; const debounce = (fn, delay) =\u0026gt; { let timer; return function () { if (timer) { clearTimeout(timer); } timer = setTimeout(() =\u0026gt; { fn(); }, delay); } }; // 触发事件 触发时间（指定时间内执行事件） const cancalDebounce = debounce(getWindowInfo, 500); window.addEventListener(\u0026#39;resize\u0026#39;, cancalDebounce); // 销毁监听 onUnmounted(() =\u0026gt; { //移除监听事件 window.removeEventListener(\u0026#39;resize\u0026#39;, cancalDebounce); }); \u0026lt;/script\u0026gt; ","permalink":"https://waite.wang/posts/project/vite-shopmall-project-begin/","summary":"\u003ch2 id=\"创建vite项目并安装vscode插件\"\u003e创建vite项目并安装vscode插件\u003c/h2\u003e\n\u003ch3 id=\"vite\"\u003eVite\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003eVite 是一个 web 开发构建工具，由于其原生 ES 模块导入方式，可以实现闪电般的冷服务器启动.通过在终端中运行以下命令，可以使用 Vite 快速构建 Vue 项目\u003c/strong\u003e\u003c/p\u003e","title":"Vite B端后台管理起始项"},{"content":"一、API V2 接口说明 接口基准地址：http://www.tangxiaoyang.vip:8888/api/v2/\n服务端已开启 CORS 跨域支持\nAPI V2 认证统一使用 Token 认证\n需要授权的 API ，必须在请求头中使用 Authorization 字段提供 token 令牌\n使用 HTTP Status Code 标识状态\n数据返回格式统一使用 JSON\n1. 支持的请求方法 GET（SELECT）：从服务器取出资源（一项或多项）。\nPOST（CREATE）：在服务器新建一个资源。\nPUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。\nPATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。\nDELETE（DELETE）：从服务器删除资源。\nHEAD：获取资源的元数据。\nOPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的。\n2. 通用返回状态说明 状态码 含义 说明 200 OK 请求成功 201 CREATED 创建成功 204 DELETED 删除成功 400 BAD REQUEST 请求的地址不存在或者包含不支持的参数 401 UNAUTHORIZED 未授权 403 FORBIDDEN 被禁止访问 404 NOT FOUND 请求的资源不存在 422 Unprocesable entity [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误 500 INTERNAL SERVER ERROR 内部错误 二、登录 1. 登录验证接口 请求路径：login\n请求方法：post\n请求参数\n参数名 参数说明 备注 username 用户名 不能为空 password 密码 不能为空 响应参数 参数名 参数说明 备注 id 用户 ID rid 用户角色 ID username 用户名 mobile 手机号 email 邮箱 token 令牌 基于 jwt 的令牌 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;id\u0026#34;: 500, \u0026#34;rid\u0026#34;: 0, \u0026#34;username\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;mobile\u0026#34;: \u0026#34;123\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;123@qq.com\u0026#34;, \u0026#34;token\u0026#34;: \u0026#34;Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOjUwMCwicmlkIjowLCJpYXQiOjE1MTI1NDQyOTksImV4cCI6MTUxMjYzMDY5OX0.eGrsrvwHm-tPsO9r_pxHIQ5i5L1kX9RX444uwnRGaIM\u0026#34; }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;登录成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 三、用户管理 1. 用户数据列表 请求路径：users\n请求方法：get\n请求参数\n参数名 参数说明 备注 query 查询参数 可以为空 pagenum 当前页码 不能为空 pagesize 每页显示条数 不能为空 响应参数 参数名 参数说明 备注 total 总记录数 pagenum 当前页码 users 用户数据集合 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;total\u0026#34;: 5, \u0026#34;pagenum\u0026#34;: 1, \u0026#34;users\u0026#34;: [ { \u0026#34;id\u0026#34;: 25, \u0026#34;username\u0026#34;: \u0026#34;tom\u0026#34;, \u0026#34;mobile\u0026#34;: \u0026#34;13951783475\u0026#34;, \u0026#34;type\u0026#34;: 1, \u0026#34;email\u0026#34;: \u0026#34;1049901079@qq.com\u0026#34;, \u0026#34;create_time\u0026#34;: \u0026#34;2020-11-09T20:36:26.000Z\u0026#34;, \u0026#34;mg_state\u0026#34;: true, // 当前用户的状态 \u0026#34;role_name\u0026#34;: \u0026#34;超级管理员\u0026#34; } ] }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 2. 添加用户 请求路径：users\n请求方法：post\n请求参数\n参数名 参数说明 备注 username 用户名称 不能为空 password 用户密码 不能为空 email 邮箱 可以为空 mobile 手机号 可以为空 响应参数 参数名 参数说明 备注 id 用户 ID rid 用户角色 ID username 用户名 mobile 手机号 email 邮箱 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;id\u0026#34;: 28, \u0026#34;username\u0026#34;: \u0026#34;tom\u0026#34;, \u0026#34;mobile\u0026#34;: \u0026#34;test\u0026#34;, \u0026#34;type\u0026#34;: 1, \u0026#34;openid\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;test@test.com\u0026#34;, \u0026#34;create_time\u0026#34;: \u0026#34;2020-11-10T03:47:13.533Z\u0026#34;, \u0026#34;modify_time\u0026#34;: null, \u0026#34;is_delete\u0026#34;: false, \u0026#34;is_active\u0026#34;: false }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;用户创建成功\u0026#34;, \u0026#34;status\u0026#34;: 201 } } 3. 修改用户状态 请求路径：users/:uId/state/:type\n请求方法：put\n请求参数\n参数名 参数说明 备注 uId 用户 ID 不能为空携带在url中 type 用户状态 不能为空携带在url中，值为 true 或者 false 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;id\u0026#34;: 566, \u0026#34;rid\u0026#34;: 30, \u0026#34;username\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;mobile\u0026#34;: \u0026#34;123456\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;bb@itany.com\u0026#34;, \u0026#34;mg_state\u0026#34;: 0 }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;设置状态成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 4. 根据 ID 查询用户信息 请求路径：users/:id\n请求方法：get\n请求参数\n参数名 参数说明 备注 id 用户 ID 不能为空携带在url中 响应参数 参数名 参数说明 备注 id 用户 ID role_id 角色 ID mobile 手机号 email 邮箱 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;id\u0026#34;: 503, \u0026#34;username\u0026#34;: \u0026#34;admin3\u0026#34;, \u0026#34;role_id\u0026#34;: 0, \u0026#34;mobile\u0026#34;: \u0026#34;00000\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;new@new.com\u0026#34; }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;查询成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 5. 编辑提交用户 请求路径：users/:id\n请求方法：put\n请求参数\n参数名 参数说明 备注 id 用户 id 不能为空 参数是url参数:id email 邮箱 可以为空 mobile 手机号 可以为空 响应参数 参数名 参数说明 备注 id 用户 ID role_id 角色 ID mobile 手机号 email 邮箱 响应数据 /* 200表示成功，500表示失败 */ { \u0026#34;data\u0026#34;: { \u0026#34;id\u0026#34;: 503, \u0026#34;username\u0026#34;: \u0026#34;admin3\u0026#34;, \u0026#34;role_id\u0026#34;: 0, \u0026#34;mobile\u0026#34;: \u0026#34;111\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;123@123.com\u0026#34; }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;更新成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 6. 删除单个用户 请求路径：users/:id\n请求方法：delete\n请求参数\n参数名 参数说明 备注 id 用户 id 不能为空参数是url参数:id 响应参数\n响应数据\n{ \u0026#34;data\u0026#34;: null, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;删除成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 7. 分配用户角色 请求路径：users/:id/role\n请求方法：put\n请求参数\n参数名 参数说明 备注 id 用户 ID 不能为空参数是url参数:id rid 角色 id 不能为空参数body参数 响应参数 参数名 参数说明 备注 id 用户 ID role_id 角色 ID mobile 手机号 email 邮箱 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;id\u0026#34;: 508, \u0026#34;rid\u0026#34;: \u0026#34;30\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;asdf1\u0026#34;, \u0026#34;mobile\u0026#34;: \u0026#34;123123\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;adfsa@qq.com\u0026#34; }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;设置角色成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 四、权限管理 1. 所有权限列表 请求路径：rights/:type\n请求方法：get\n请求参数\n参数名 参数说明 备注 type 类型 值 list 或 tree , list 列表显示权限, tree 树状显示权限,参数是url参数:type 响应参数 参数名 参数说明 备注 id 权限 ID authName 权限说明 level 权限层级 pid 权限父 ID path 对应访问路径 响应数据 type=list { \u0026#34;data\u0026#34;: [ { \u0026#34;id\u0026#34;: 101, \u0026#34;authName\u0026#34;: \u0026#34;商品管理\u0026#34;, \u0026#34;level\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;pid\u0026#34;: 0, \u0026#34;path\u0026#34;: null }, { \u0026#34;id\u0026#34;: 102, \u0026#34;authName\u0026#34;: \u0026#34;订单管理\u0026#34;, \u0026#34;level\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;pid\u0026#34;: 0, \u0026#34;path\u0026#34;: null } ], \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取权限列表成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } type=tree\n{ data: [ { id: 101, authName: \u0026#39;商品管理\u0026#39;, path: null, pid: 0, children: [ { id: 104, authName: \u0026#39;商品列表\u0026#39;, path: null, pid: 101, children: [ { id: 105, authName: \u0026#39;添加商品\u0026#39;, path: null, pid: \u0026#39;104,101\u0026#39; } ] } ] } ], meta: { msg: \u0026#39;获取权限列表成功\u0026#39;, status: 200 } } 2. 左侧菜单权限 请求路径：menus\n请求方法：get\n响应数据\n{ \u0026#34;data\u0026#34;: { \u0026#34;id\u0026#34;: 101, \u0026#34;authName\u0026#34;: \u0026#34;商品管理\u0026#34;, \u0026#34;path\u0026#34;: null, \u0026#34;children\u0026#34;: [ { \u0026#34;id\u0026#34;: 104, \u0026#34;authName\u0026#34;: \u0026#34;商品列表\u0026#34;, \u0026#34;path\u0026#34;: null, \u0026#34;children\u0026#34;: [] } ] } \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取菜单列表成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 五、角色管理 1. 角色列表 请求路径：roles\n请求方法：get\n响应数据说明\n第一层为角色信息\n第二层开始为权限说明，权限一共有 3 层权限\n最后一层权限，不包含 children 属性\n响应数据\n{ \u0026#34;data\u0026#34;: [ { \u0026#34;id\u0026#34;: 30, \u0026#34;roleName\u0026#34;: \u0026#34;主管\u0026#34;, \u0026#34;roleDesc\u0026#34;: \u0026#34;技术负责人\u0026#34;, \u0026#34;children\u0026#34;: [ { \u0026#34;id\u0026#34;: 101, \u0026#34;authName\u0026#34;: \u0026#34;商品管理\u0026#34;, \u0026#34;path\u0026#34;: null, \u0026#34;children\u0026#34;: [ { \u0026#34;id\u0026#34;: 104, \u0026#34;authName\u0026#34;: \u0026#34;商品列表\u0026#34;, \u0026#34;path\u0026#34;: null, \u0026#34;children\u0026#34;: [ { \u0026#34;id\u0026#34;: 105, \u0026#34;authName\u0026#34;: \u0026#34;添加商品\u0026#34;, \u0026#34;path\u0026#34;: null } ] } ] } ] } ], \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 2. 添加角色 请求路径：roles\n请求方法：post\n请求参数\n参数名 参数说明 备注 roleName 角色名称 不能为空 roleDesc 角色描述 可以为空 响应参数 参数名 参数说明 备注 roleId 角色 ID roleName 角色名称 roleDesc 角色描述 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;roleId\u0026#34;: 40, \u0026#34;roleName\u0026#34;: \u0026#34;admin2\u0026#34;, \u0026#34;roleDesc\u0026#34;: \u0026#34;admin2Desc\u0026#34; }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;创建成功\u0026#34;, \u0026#34;status\u0026#34;: 201 } } 3. 根据 ID 查询角色 请求路径：roles/:id\n请求方法：get\n请求参数\n参数名 参数说明 备注 :id 角色 ID 不能为空携带在url中 响应参数 参数名 参数说明 备注 roleId 角色 ID roleName 角色名称 roleDesc 角色描述 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;roleId\u0026#34;: 31, \u0026#34;roleName\u0026#34;: \u0026#34;测试角色\u0026#34;, \u0026#34;roleDesc\u0026#34;: \u0026#34;测试负责人\u0026#34; }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 4. 编辑提交角色 请求路径：roles/:id\n请求方法：put\n请求参数\n参数名 参数说明 备注 :id 角色 ID 不能为空携带在url中 roleName 角色名称 不能为空 roleDesc 角色描述 可以为空 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;roleId\u0026#34;: 31, \u0026#34;roleName\u0026#34;: \u0026#34;测试角色\u0026#34;, \u0026#34;roleDesc\u0026#34;: \u0026#34;测试角色描述\u0026#34; }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 5. 删除角色 请求路径：roles/:id\n请求方法：delete\n请求参数\n参数名 参数说明 备注 :id 角色 ID 不能为空携带在url中 响应数据 { \u0026#34;data\u0026#34;: null, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;删除成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 6. 角色授权 请求路径：roles/:roleId/rights\n请求方法：post\n请求参数：通过 请求体 发送给后端\n参数名 参数说明 备注 :roleId 角色 ID 不能为空携带在url中 rids 权限 ID 列表（字符串） 以 , 分割的权限 ID 列表（获取所有被选中、叶子节点的key和半选中节点的key, 包括 1，2，3级节点） 响应数据 { \u0026#34;data\u0026#34;: null, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;更新成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 7. 删除角色指定权限 请求路径：roles/:roleId/rights/:rightId\n请求方法：delete\n请求参数 参数名 参数说明 备注 :roleId 角色 ID 不能为空携带在url中 :rightId 权限 ID 不能为空携带在url中\n响应数据说明\n返回的data, 是当前角色下最新的权限数据 响应数据\n{ \u0026#34;data\u0026#34;: [ { \u0026#34;id\u0026#34;: 101, \u0026#34;authName\u0026#34;: \u0026#34;商品管理\u0026#34;, \u0026#34;path\u0026#34;: null, \u0026#34;children\u0026#34;: [ { \u0026#34;id\u0026#34;: 104, \u0026#34;authName\u0026#34;: \u0026#34;商品列表\u0026#34;, \u0026#34;path\u0026#34;: null, \u0026#34;children\u0026#34;: [ { \u0026#34;id\u0026#34;: 105, \u0026#34;authName\u0026#34;: \u0026#34;添加商品\u0026#34;, \u0026#34;path\u0026#34;: null }, { \u0026#34;id\u0026#34;: 116, \u0026#34;authName\u0026#34;: \u0026#34;修改\u0026#34;, \u0026#34;path\u0026#34;: null } ] } ] } ], \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;取消权限成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 六、商品分类管理 1. 商品分类数据列表 请求路径：categories\n请求方法：get\n请求参数\n参数名 参数说明 备注 type [1,2,3] 值：1，2，3 分别表示显示一层二层三层分类列表 【可选参数】如果不传递，则默认获取所有级别的分类 pagenum 当前页码值 【可选参数】如果不传递，则默认获取所有分类 pagesize 每页显示多少条数据 【可选参数】如果不传递，则默认获取所有分类 响应参数 参数名 参数说明 备注 cat_id 分类 ID cat_name 分类名称 cat_pid 分类父 ID cat_level 分类当前层级 响应数据 { \u0026#34;data\u0026#34;: [ { \u0026#34;cat_id\u0026#34;: 1, \u0026#34;cat_name\u0026#34;: \u0026#34;大家电\u0026#34;, \u0026#34;cat_pid\u0026#34;: 0, \u0026#34;cat_level\u0026#34;: 0, \u0026#34;cat_deleted\u0026#34;: false, \u0026#34;children\u0026#34;: [ { \u0026#34;cat_id\u0026#34;: 3, \u0026#34;cat_name\u0026#34;: \u0026#34;电视\u0026#34;, \u0026#34;cat_pid\u0026#34;: 1, \u0026#34;cat_level\u0026#34;: 1, \u0026#34;cat_deleted\u0026#34;: false, \u0026#34;children\u0026#34;: [ { \u0026#34;cat_id\u0026#34;: 6, \u0026#34;cat_name\u0026#34;: \u0026#34;曲面电视\u0026#34;, \u0026#34;cat_pid\u0026#34;: 3, \u0026#34;cat_level\u0026#34;: 2, \u0026#34;cat_deleted\u0026#34;: false }, { \u0026#34;cat_id\u0026#34;: 7, \u0026#34;cat_name\u0026#34;: \u0026#34;海信\u0026#34;, \u0026#34;cat_pid\u0026#34;: 3, \u0026#34;cat_level\u0026#34;: 2, \u0026#34;cat_deleted\u0026#34;: false } ] } ] } ], \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 2. 添加分类 请求路径：categories\n请求方法：post\n请求参数\n参数名 参数说明 备注 cat_pid 分类父 ID 不能为空，如果要添加一级分类，则父分类Id应该设置为 0 cat_name 分类名称 不能为空 cat_level 分类层级 不能为空，0表示一级分类；1表示二级分类；2表示三级分类 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;cat_id\u0026#34;: 62, \u0026#34;cat_name\u0026#34;: \u0026#34;相框\u0026#34;, \u0026#34;cat_pid\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;cat_level\u0026#34;: \u0026#34;1\u0026#34; }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;创建成功\u0026#34;, \u0026#34;status\u0026#34;: 201 } } 3. 根据 id 查询分类 请求路径：categories/:id\n请求方法：get\n请求参数\n参数名 参数说明 备注 :id 分类 ID 不能为空携带在url中 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;cat_id\u0026#34;: 3, \u0026#34;cat_name\u0026#34;: \u0026#34;厨卫电器\u0026#34;, \u0026#34;cat_pid\u0026#34;: 0, \u0026#34;cat_level\u0026#34;: 0 }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 4. 编辑提交分类 请求路径：categories/:id\n请求方法：put\n请求参数\n参数名 参数说明 备注 :id 分类 ID 不能为空携带在url中 cat_name 分类名称 不能为空【此参数，放到请求体中】 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;cat_id\u0026#34;: 22, \u0026#34;cat_name\u0026#34;: \u0026#34;自拍杆\u0026#34;, \u0026#34;cat_pid\u0026#34;: 7, \u0026#34;cat_level\u0026#34;: 2 }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;更新成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 5. 删除分类 请求路径：categories/:id\n请求方法：delete\n请求参数\n参数名 参数说明 备注 :id 分类 ID 不能为空携带在url中 响应数据 { \u0026#34;data\u0026#34;: null, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;删除成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 七、分类参数管理 1. 参数列表 请求路径：categories/:id/attributes\n请求方法：get\n请求参数\n参数名 参数说明 备注 :id 分类 ID 不能为空携带在url中 sel many或only 不能为空，many表示动态参数，only表示静态参数（也称为静态属性） 响应参数 参数名 参数说明 备注 attr_id 分类参数 ID attr_name 分类参数名称 cat_id 分类参数所属分类 attr_sel 分类参数的类型，many表示动态参数，only表示静态属性 attr_write list表示从列表选择（动态参数），manual表示手工录入（静态属性） attr_vals 分类参数的明细，如果是动态参数，则该值是以空格分隔的字符串 响应数据 { \u0026#34;data\u0026#34;: [ { \u0026#34;attr_id\u0026#34;: 1, \u0026#34;attr_name\u0026#34;: \u0026#34;cpu\u0026#34;, \u0026#34;cat_id\u0026#34;: 22, \u0026#34;attr_sel\u0026#34;: \u0026#34;many\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;4K高清 5K高清 6K高清\u0026#34; } ], \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 2. 添加动态参数或静态属性 请求路径：categories/:id/attributes\n请求方法：post\n请求参数\n参数名 参数说明 备注 :id 分类 ID 不能为空携带在url中 attr_name 参数名称 不能为空 attr_sel many或only 不能为空 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;attr_id\u0026#34;: 44, \u0026#34;attr_name\u0026#34;: \u0026#34;测试参数\u0026#34;, \u0026#34;cat_id\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;attr_sel\u0026#34;: \u0026#34;many\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;a,b,c\u0026#34; }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;创建成功\u0026#34;, \u0026#34;status\u0026#34;: 201 } } 3. 根据 ID 查询参数 请求路径：categories/:id/attributes/:attrId\n请求方法：get\n请求参数\n参数名 参数说明 备注 :id 分类 ID 不能为空携带在url中 :attrId 属性 ID 不能为空携带在url中 attr_sel many或only 不能为空 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;attr_id\u0026#34;: 1, \u0026#34;attr_name\u0026#34;: \u0026#34;cpu\u0026#34;, \u0026#34;cat_id\u0026#34;: 22, \u0026#34;attr_sel\u0026#34;: \u0026#34;only\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;manual\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;ffff\u0026#34; }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 4. 更新参数及明细 请求路径：categories/:id/attributes/:attrId\n请求方法：put\n请求参数\n参数名 参数说明 备注 :id 分类 ID 不能为空携带在url中 :attrId 参数 ID 不能为空携带在url中 attr_name 参数名称 不能为空，携带在请求体中 attr_sel many或only 不能为空，携带在请求体中 attr_vals 参数的明细 可选参数，携带在请求体中 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;attr_id\u0026#34;: 9, \u0026#34;attr_name\u0026#34;: \u0026#34;测试更新\u0026#34;, \u0026#34;cat_id\u0026#34;: \u0026#34;43\u0026#34;, \u0026#34;attr_sel\u0026#34;: \u0026#34;only\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;manual\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;abc\u0026#34; }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;更新成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 5. 删除参数 请求路径： categories/:id/attributes/:attrid\n请求方法：delete\n请求参数\n参数名 参数说明 备注 :id 分类 ID 不能为空携带在url中 :attrid 参数 ID 不能为空携带在url中 响应数据 { \u0026#34;data\u0026#34;: null, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;删除成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 八、商品管理 1. 商品列表数据 请求路径：goods\n请求方法：get\n请求参数\n参数名 参数说明 备注 query 查询参数 可以为空 pagenum 当前页码 不能为空 pagesize 每页显示条数 不能为空 响应参数 参数名 参数说明 备注 total 总共商品条数 pagenum 当前商品页数 goods_id 商品 ID goods_name 商品名称 goods_price 价格 goods_number 数量 goods_weight 重量 不能为空 goods_state 商品状态 商品状态 0: 未通过 1: 审核中 2: 已审核 add_time 添加时间 upd_time 更新时间 hot_mumber 热销品数量 is_promote 是否是热销品 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;total\u0026#34;: 50, \u0026#34;pagenum\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;goods\u0026#34;: [ { \u0026#34;goods_id\u0026#34;: 144, \u0026#34;goods_name\u0026#34;: \u0026#34;iphone\u0026#34;, \u0026#34;goods_price\u0026#34;: 1, \u0026#34;goods_number\u0026#34;: 1, \u0026#34;goods_weight\u0026#34;: 1, \u0026#34;goods_state\u0026#34;: null, \u0026#34;add_time\u0026#34;: 1512954923, \u0026#34;upd_time\u0026#34;: 1512954923, \u0026#34;hot_mumber\u0026#34;: 0, \u0026#34;is_promote\u0026#34;: false } ] }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 2. 添加商品 请求路径：goods\n请求方法：post\n请求参数\n参数名 参数说明 备注 goods_name 商品名称 不能为空 goods_cat 以,逗号分割的分类列表 不能为空 goods_price 价格 不能为空 goods_number 数量 不能为空 goods_weight 重量 不能为空 goods_introduce 介绍 可以为空 pics 上传的图片临时路径（对象） 可以为空 attrs 商品的参数（数组），包含 动态参数 和 静态属性 可以为空 请求数据 { \u0026#34;goods_name\u0026#34;:\u0026#34;test_goods_name2\u0026#34;, \u0026#34;goods_cat\u0026#34;: \u0026#34;1,2,3\u0026#34;, \u0026#34;goods_price\u0026#34;:20, \u0026#34;goods_number\u0026#34;:30, \u0026#34;goods_weight\u0026#34;:40, \u0026#34;goods_introduce\u0026#34;:\u0026#34;abc\u0026#34;, \u0026#34;pics\u0026#34;:[ {\u0026#34;pic\u0026#34;:\u0026#34;/tmp_uploads/30f08d52c551ecb447277eae232304b8\u0026#34;} ], \u0026#34;attrs\u0026#34;:[ { \u0026#34;attr_id\u0026#34;:15, \u0026#34;attr_value\u0026#34;:\u0026#34;ddd\u0026#34; }, { \u0026#34;attr_id\u0026#34;:15, \u0026#34;attr_value\u0026#34;:\u0026#34;eee\u0026#34; } ] } 响应参数 参数名 参数说明 备注 total 总共商品条数 pagenum 当前商品页数 goods_id 商品 ID goods_cat 以为\u0026rsquo;,\u0026lsquo;分割的分类列表 goods_name 商品名称 goods_price 价格 goods_number 数量 goods_weight 重量 不能为空 goods_state 商品状态 商品状态 0: 未通过 1: 审核中 2: 已审核 add_time 添加时间 upd_time 更新时间 hot_mumber 热销品数量 is_promote 是否是热销品 pics 上传的图片临时路径（对象） pics_id:图片 ID,goods_id:商品 ID,pics_big:大图,pics_mid:中图,pics_sma:小图 attrs 商品的参数（数组） goods_id:商品 ID,attr_value:当前商品的参数值,add_price:浮动价格,attr_vals:预定义的参数值,attr_sel:手动输入，还是单选 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;goods_id\u0026#34;: 145, \u0026#34;goods_name\u0026#34;: \u0026#34;test_goods_name2\u0026#34;, \u0026#34;goods_price\u0026#34;: 20, \u0026#34;cat_id\u0026#34;: 1, \u0026#34;goods_number\u0026#34;: 30, \u0026#34;goods_weight\u0026#34;: 40, \u0026#34;goods_introduce\u0026#34;: \u0026#34;abc\u0026#34;, \u0026#34;goods_big_logo\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;goods_small_logo\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;goods_state\u0026#34;: 1, \u0026#34;add_time\u0026#34;: 1512962370, \u0026#34;upd_time\u0026#34;: 1512962370, \u0026#34;hot_mumber\u0026#34;: 0, \u0026#34;is_promote\u0026#34;: false, \u0026#34;pics\u0026#34;: [ { \u0026#34;pics_id\u0026#34;: 397, \u0026#34;goods_id\u0026#34;: 145, \u0026#34;pics_big\u0026#34;: \u0026#34;uploads/goodspics/big_30f08d52c551ecb447277eae232304b8\u0026#34;, \u0026#34;pics_mid\u0026#34;: \u0026#34;uploads/goodspics/mid_30f08d52c551ecb447277eae232304b8\u0026#34;, \u0026#34;pics_sma\u0026#34;: \u0026#34;uploads/goodspics/sma_30f08d52c551ecb447277eae232304b8\u0026#34; } ], \u0026#34;attrs\u0026#34;: [ { \u0026#34;goods_id\u0026#34;: 145, \u0026#34;attr_id\u0026#34;: 15, \u0026#34;attr_value\u0026#34;: \u0026#34;ddd\u0026#34;, \u0026#34;add_price\u0026#34;: null, \u0026#34;attr_name\u0026#34;: \u0026#34;fffffff\u0026#34;, \u0026#34;attr_sel\u0026#34;: \u0026#34;many\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;\u0026#34; }, { \u0026#34;goods_id\u0026#34;: 145, \u0026#34;attr_id\u0026#34;: 15, \u0026#34;attr_value\u0026#34;: \u0026#34;eee\u0026#34;, \u0026#34;add_price\u0026#34;: null, \u0026#34;attr_name\u0026#34;: \u0026#34;fffffff\u0026#34;, \u0026#34;attr_sel\u0026#34;: \u0026#34;many\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;\u0026#34; } ] }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;创建商品成功\u0026#34;, \u0026#34;status\u0026#34;: 201 } } 3. 根据 ID 查询商品 请求路径：goods/:id\n请求方法：get\n请求参数\n参数名 参数说明 备注 id 商品 ID 不能为空携带在url中 响应参数 参数名 参数说明 备注 goods_id 商品 ID goods_name 商品名称 goods_price 价格 goods_number 数量 goods_weight 重量 不能为空 goods_state 商品状态 商品状态 0: 未通过 1: 审核中 2: 已审核 goods_introduce 介绍 goods_cat 以为\u0026rsquo;,\u0026lsquo;分割的分类列表 add_time 添加时间 upd_time 更新时间 hot_mumber 热销品数量 is_promote 是否是热销品 pics 上传的图片临时路径（对象） pics_id:图片 ID,goods_id:商品 ID,pics_big:大图,pics_mid:中图,pics_sma:小图 attrs 商品的参数（数组） goods_id:商品 ID,attr_value:当前商品的参数值,add_price:浮动价格,attr_vals:预定义的参数值,attr_sel:手动输入，还是单选 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;goods_id\u0026#34;: 145, \u0026#34;goods_name\u0026#34;: \u0026#34;test_goods_name2\u0026#34;, \u0026#34;goods_price\u0026#34;: 20, \u0026#34;goods_number\u0026#34;: 30, \u0026#34;goods_weight\u0026#34;: 40, \u0026#34;goods_introduce\u0026#34;: \u0026#34;abc\u0026#34;, \u0026#34;goods_big_logo\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;goods_small_logo\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;goods_state\u0026#34;: 1, \u0026#34;add_time\u0026#34;: 1512962370, \u0026#34;upd_time\u0026#34;: 1512962370, \u0026#34;hot_mumber\u0026#34;: 0, \u0026#34;is_promote\u0026#34;: false, \u0026#34;pics\u0026#34;: [ { \u0026#34;pics_id\u0026#34;: 397, \u0026#34;goods_id\u0026#34;: 145, \u0026#34;pics_big\u0026#34;: \u0026#34;uploads/goodspics/big_30f08d52c551ecb447277eae232304b8\u0026#34;, \u0026#34;pics_mid\u0026#34;: \u0026#34;uploads/goodspics/mid_30f08d52c551ecb447277eae232304b8\u0026#34;, \u0026#34;pics_sma\u0026#34;: \u0026#34;uploads/goodspics/sma_30f08d52c551ecb447277eae232304b8\u0026#34; } ], \u0026#34;attrs\u0026#34;: [ { \u0026#34;goods_id\u0026#34;: 145, \u0026#34;attr_id\u0026#34;: 15, \u0026#34;attr_value\u0026#34;: \u0026#34;ddd\u0026#34;, \u0026#34;add_price\u0026#34;: null, \u0026#34;attr_name\u0026#34;: \u0026#34;fffffff\u0026#34;, \u0026#34;attr_sel\u0026#34;: \u0026#34;many\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;\u0026#34; }, { \u0026#34;goods_id\u0026#34;: 145, \u0026#34;attr_id\u0026#34;: 15, \u0026#34;attr_value\u0026#34;: \u0026#34;eee\u0026#34;, \u0026#34;add_price\u0026#34;: null, \u0026#34;attr_name\u0026#34;: \u0026#34;fffffff\u0026#34;, \u0026#34;attr_sel\u0026#34;: \u0026#34;many\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;\u0026#34; } ] }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 4. 编辑提交商品 请求路径：goods/:id\n请求方法：put\n请求参数\n参数名 参数说明 备注 id 商品 ID 不能为空携带在url中 goods_name 商品名称 不能为空 goods_cat 以为\u0026rsquo;,\u0026lsquo;分割的分类列表 不能为空 goods_price 价格 不能为空 goods_number 数量 不能为空 goods_weight 重量 不能为空 goods_introduce 介绍 可以为空 pics 上传的图片临时路径（对象） 可以为空 attrs 商品的参数（数组） 可以为空 请求数据 { \u0026#34;goods_name\u0026#34;:\u0026#34;test_goods_name2\u0026#34;, \u0026#34;goods_price\u0026#34;:20, \u0026#34;goods_number\u0026#34;:30, \u0026#34;goods_weight\u0026#34;:40, \u0026#34;goods_introduce\u0026#34;:\u0026#34;abc\u0026#34;, \u0026#34;pics\u0026#34;:[ {\u0026#34;pic\u0026#34;:\u0026#34;/tmp_uploads/30f08d52c551ecb447277eae232304b8\u0026#34;} ], \u0026#34;attrs\u0026#34;:[ { \u0026#34;attr_id\u0026#34;:15, \u0026#34;attr_value\u0026#34;:\u0026#34;ddd\u0026#34; }, { \u0026#34;attr_id\u0026#34;:15, \u0026#34;attr_value\u0026#34;:\u0026#34;eee\u0026#34; } ] } 响应参数 参数名 参数说明 备注 total 总共商品条数 pagenum 当前商品页数 goods_id 商品 ID goods_name 商品名称 goods_price 价格 goods_number 数量 goods_weight 重量 不能为空 goods_state 商品状态 商品状态 0: 未通过 1: 审核中 2: 已审核 add_time 添加时间 upd_time 更新时间 hot_mumber 热销品数量 is_promote 是否是热销品 pics 上传的图片临时路径（对象） pics_id:图片 ID,goods_id:商品 ID,pics_big:大图,pics_mid:中图,pics_sma:小图 attrs 商品的参数（数组） goods_id:商品 ID,attr_value:当前商品的参数值,add_price:浮动价格,attr_vals:预定义的参数值,attr_sel:手动输入，还是单选, 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;goods_id\u0026#34;: 145, \u0026#34;goods_name\u0026#34;: \u0026#34;test_goods_name2\u0026#34;, \u0026#34;goods_price\u0026#34;: 20, \u0026#34;goods_number\u0026#34;: 30, \u0026#34;goods_weight\u0026#34;: 40, \u0026#34;goods_introduce\u0026#34;: \u0026#34;abc\u0026#34;, \u0026#34;goods_big_logo\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;goods_small_logo\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;goods_state\u0026#34;: 1, \u0026#34;add_time\u0026#34;: 1512962370, \u0026#34;upd_time\u0026#34;: 1512962370, \u0026#34;hot_mumber\u0026#34;: 0, \u0026#34;is_promote\u0026#34;: false, \u0026#34;pics\u0026#34;: [ { \u0026#34;pics_id\u0026#34;: 397, \u0026#34;goods_id\u0026#34;: 145, \u0026#34;pics_big\u0026#34;: \u0026#34;uploads/goodspics/big_30f08d52c551ecb447277eae232304b8\u0026#34;, \u0026#34;pics_mid\u0026#34;: \u0026#34;uploads/goodspics/mid_30f08d52c551ecb447277eae232304b8\u0026#34;, \u0026#34;pics_sma\u0026#34;: \u0026#34;uploads/goodspics/sma_30f08d52c551ecb447277eae232304b8\u0026#34; } ], \u0026#34;attrs\u0026#34;: [ { \u0026#34;goods_id\u0026#34;: 145, \u0026#34;attr_id\u0026#34;: 15, \u0026#34;attr_value\u0026#34;: \u0026#34;ddd\u0026#34;, \u0026#34;add_price\u0026#34;: null, \u0026#34;attr_name\u0026#34;: \u0026#34;fffffff\u0026#34;, \u0026#34;attr_sel\u0026#34;: \u0026#34;many\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;\u0026#34; }, { \u0026#34;goods_id\u0026#34;: 145, \u0026#34;attr_id\u0026#34;: 15, \u0026#34;attr_value\u0026#34;: \u0026#34;eee\u0026#34;, \u0026#34;add_price\u0026#34;: null, \u0026#34;attr_name\u0026#34;: \u0026#34;fffffff\u0026#34;, \u0026#34;attr_sel\u0026#34;: \u0026#34;many\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;\u0026#34; } ] }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;更新商品成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 5. 删除商品 请求路径：goods/:id\n请求方法：delete\n请求参数\n参数名 参数说明 备注 id 商品 ID 不能为空携带在url中 响应数据 { \u0026#34;data\u0026#34;: null, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;删除成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } ###同步商品图片\n请求路径：goods/:id/pics\n请求方法：put\n请求参数\n参数名 参数说明 备注 id 商品 ID 不能为空携带在url中 pics 商品图片集合 如果有 pics_id 字段会保留该图片，如果没有 pics_id 但是有 pic 字段就会新生成图片数据 请求数据 ;[ { pic: \u0026#39;tmp_uploads/db28f6316835836e97653b5c75e418be.png\u0026#39; }, { pics_id: 397, goods_id: 145, pics_big: \u0026#39;uploads/goodspics/big_30f08d52c551ecb447277eae232304b8\u0026#39;, pics_mid: \u0026#39;uploads/goodspics/mid_30f08d52c551ecb447277eae232304b8\u0026#39;, pics_sma: \u0026#39;uploads/goodspics/sma_30f08d52c551ecb447277eae232304b8\u0026#39; } ] 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;goods_id\u0026#34;: 96, \u0026#34;goods_name\u0026#34;: \u0026#34;iphoneXX\u0026#34;, \u0026#34;goods_price\u0026#34;: 2, \u0026#34;goods_number\u0026#34;: 22, \u0026#34;goods_weight\u0026#34;: 22, \u0026#34;goods_introduce\u0026#34;: null, \u0026#34;goods_big_logo\u0026#34;: \u0026#34;./uploads/goods/20201113/483a3b8e99e534ec3e4312dbbaee7c9d.jpg\u0026#34;, \u0026#34;goods_small_logo\u0026#34;: \u0026#34;./uploads/goods/20201113/small_483a3b8e99e534ec3e4312dbbaee7c9d.jpg\u0026#34;, \u0026#34;goods_state\u0026#34;: 0, \u0026#34;is_del\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;add_time\u0026#34;: 1510045904, \u0026#34;upd_time\u0026#34;: 1512635159, \u0026#34;delete_time\u0026#34;: 1512635159, \u0026#34;hot_mumber\u0026#34;: 0, \u0026#34;is_promote\u0026#34;: false, \u0026#34;pics\u0026#34;: [ { \u0026#34;pics_id\u0026#34;: 383, \u0026#34;goods_id\u0026#34;: 96, \u0026#34;pics_big\u0026#34;: \u0026#34;uploads/goodspics/big_6f5750132abd3f5b2b93dd722fcde653.jpg\u0026#34;, \u0026#34;pics_mid\u0026#34;: \u0026#34;uploads/goodspics/mid_6f5750132abd3f5b2b93dd722fcde653.jpg\u0026#34;, \u0026#34;pics_sma\u0026#34;: \u0026#34;uploads/goodspics/sma_6f5750132abd3f5b2b93dd722fcde653.jpg\u0026#34; } ], \u0026#34;attrs\u0026#34;: [ { \u0026#34;goods_id\u0026#34;: 96, \u0026#34;attr_id\u0026#34;: 15, \u0026#34;attr_value\u0026#34;: \u0026#34;eee\u0026#34;, \u0026#34;add_price\u0026#34;: null, \u0026#34;attr_name\u0026#34;: \u0026#34;fffffff\u0026#34;, \u0026#34;attr_sel\u0026#34;: \u0026#34;many\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;\u0026#34; }, { \u0026#34;goods_id\u0026#34;: 96, \u0026#34;attr_id\u0026#34;: 15, \u0026#34;attr_value\u0026#34;: \u0026#34;ddd\u0026#34;, \u0026#34;add_price\u0026#34;: null, \u0026#34;attr_name\u0026#34;: \u0026#34;fffffff\u0026#34;, \u0026#34;attr_sel\u0026#34;: \u0026#34;many\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;\u0026#34; } ] }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;更新成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } ###同步商品属性\n请求路径：goods/:id/attributes\n请求方法：put\n请求参数\n参数名 参数说明 备注 id 商品 ID 不能为空携带在url中 请求数据 ;[ { attr_id: 15, attr_value: \u0026#39;ddd\u0026#39; }, { attr_id: 15, attr_value: \u0026#39;eee\u0026#39; } ] 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;goods_id\u0026#34;: 96, \u0026#34;goods_name\u0026#34;: \u0026#34;iphoneXX\u0026#34;, \u0026#34;goods_price\u0026#34;: 2, \u0026#34;goods_number\u0026#34;: 22, \u0026#34;goods_weight\u0026#34;: 22, \u0026#34;goods_introduce\u0026#34;: null, \u0026#34;goods_big_logo\u0026#34;: \u0026#34;./uploads/goods/20201113/483a3b8e99e534ec3e4312dbbaee7c9d.jpg\u0026#34;, \u0026#34;goods_small_logo\u0026#34;: \u0026#34;./uploads/goods/20201113/small_483a3b8e99e534ec3e4312dbbaee7c9d.jpg\u0026#34;, \u0026#34;goods_state\u0026#34;: 0, \u0026#34;is_del\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;add_time\u0026#34;: 1510045904, \u0026#34;upd_time\u0026#34;: 1512635159, \u0026#34;delete_time\u0026#34;: 1512635159, \u0026#34;hot_mumber\u0026#34;: 0, \u0026#34;is_promote\u0026#34;: false, \u0026#34;pics\u0026#34;: [ { \u0026#34;pics_id\u0026#34;: 383, \u0026#34;goods_id\u0026#34;: 96, \u0026#34;pics_big\u0026#34;: \u0026#34;uploads/goodspics/big_6f5750132abd3f5b2b93dd722fcde653.jpg\u0026#34;, \u0026#34;pics_mid\u0026#34;: \u0026#34;uploads/goodspics/mid_6f5750132abd3f5b2b93dd722fcde653.jpg\u0026#34;, \u0026#34;pics_sma\u0026#34;: \u0026#34;uploads/goodspics/sma_6f5750132abd3f5b2b93dd722fcde653.jpg\u0026#34; } ], \u0026#34;attrs\u0026#34;: [ { \u0026#34;goods_id\u0026#34;: 96, \u0026#34;attr_id\u0026#34;: 15, \u0026#34;attr_value\u0026#34;: \u0026#34;eee\u0026#34;, \u0026#34;add_price\u0026#34;: null, \u0026#34;attr_name\u0026#34;: \u0026#34;fffffff\u0026#34;, \u0026#34;attr_sel\u0026#34;: \u0026#34;many\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;\u0026#34; }, { \u0026#34;goods_id\u0026#34;: 96, \u0026#34;attr_id\u0026#34;: 15, \u0026#34;attr_value\u0026#34;: \u0026#34;ddd\u0026#34;, \u0026#34;add_price\u0026#34;: null, \u0026#34;attr_name\u0026#34;: \u0026#34;fffffff\u0026#34;, \u0026#34;attr_sel\u0026#34;: \u0026#34;many\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;\u0026#34; } ] }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;更新成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } ###商品图片处理必须安装 GraphicsMagick\nlinux apt-get install GraphicsMagick Mac OS X brew install GraphicsMagick Windows 点击下载 6. 图片上传 请求路径：upload\n请求方法：post\n请求参数\n参数名 参数说明 备注 file 上传文件 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;tmp_path\u0026#34;: \u0026#34;tmp_uploads/ccfc5179a914e94506bcbb7377e8985f.png\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;http://127.0.0.1:8888tmp_uploads/ccfc5179a914e94506bcbb7377e8985f.png\u0026#34; }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;上传成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 九、订单管理 1. 订单数据列表 请求路径：orders\n请求方法：get\n请求参数\n参数名 参数说明 备注 query 查询参数 可以为空 pagenum 当前页码 可以为空，默认为1 pagesize 每页显示条数 可以为空，省略时返回所有订单 user_id 用户 ID 可以为空 pay_status 支付状态 可以为空 is_send 是否发货 可以为空 order_fapiao_title [\u0026lsquo;个人\u0026rsquo;,\u0026lsquo;公司\u0026rsquo;] 可以为空 order_fapiao_company 公司名称 可以为空 order_fapiao_content 发票内容 可以为空 consignee_addr 收货地址 可以为空 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;total\u0026#34;: 1, \u0026#34;pagenum\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;goods\u0026#34;: [ { \u0026#34;order_id\u0026#34;: 47, \u0026#34;user_id\u0026#34;: 133, \u0026#34;order_number\u0026#34;: \u0026#34;59e7502d7993d\u0026#34;, \u0026#34;order_price\u0026#34;: 322, \u0026#34;order_pay\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;is_send\u0026#34;: \u0026#34;是\u0026#34;, \u0026#34;trade_no\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;order_fapiao_title\u0026#34;: \u0026#34;个人\u0026#34;, \u0026#34;order_fapiao_company\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;order_fapiao_content\u0026#34;: \u0026#34;办公用品\u0026#34;, \u0026#34;consignee_addr\u0026#34;: \u0026#34;江苏省南京市秦淮区龙蟠中路666号\u0026#34;, \u0026#34;pay_status\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;create_time\u0026#34;: 1508331565, \u0026#34;update_time\u0026#34;: 1508331565 } ] }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 2. 修改订单状态 请求路径：orders/:id\n请求方法：put\n请求参数\n参数名 参数说明 备注 id 订单 ID 不能为空携带在url中 is_send 订单是否发货 1:已经发货，0:未发货 order_pay 订单支付 支付方式 0 未支付 1 支付宝 2 微信 3 银行卡 order_price 订单价格 order_number 订单数量 pay_status 支付状态 订单状态： 0 未付款、1 已付款 请求数据说明\n所有请求数据都是增量更新，如果参数不填写，就不会更新该字段 响应数据\n{ \u0026#34;data\u0026#34;: { \u0026#34;order_id\u0026#34;: 67, \u0026#34;user_id\u0026#34;: 1, \u0026#34;order_number\u0026#34;: \u0026#34;itany-g7kmck71vjaujfgoi\u0026#34;, \u0026#34;order_price\u0026#34;: 20, \u0026#34;order_pay\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;is_send\u0026#34;: \u0026#34;否\u0026#34;, \u0026#34;trade_no\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;order_fapiao_title\u0026#34;: \u0026#34;个人\u0026#34;, \u0026#34;order_fapiao_company\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;order_fapiao_content\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;consignee_addr\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;pay_status\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;create_time\u0026#34;: 1512533560, \u0026#34;update_time\u0026#34;: 1512533560, \u0026#34;goods\u0026#34;: [ { \u0026#34;id\u0026#34;: 82, \u0026#34;order_id\u0026#34;: 67, \u0026#34;goods_id\u0026#34;: 96, \u0026#34;goods_price\u0026#34;: 333, \u0026#34;goods_number\u0026#34;: 2, \u0026#34;goods_total_price\u0026#34;: 999 }, { \u0026#34;id\u0026#34;: 83, \u0026#34;order_id\u0026#34;: 67, \u0026#34;goods_id\u0026#34;: 95, \u0026#34;goods_price\u0026#34;: 666, \u0026#34;goods_number\u0026#34;: 5, \u0026#34;goods_total_price\u0026#34;: 999 } ] }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 3. 查看订单详情 请求路径：orders/:id\n请求方法：get\n请求参数\n参数名 参数说明 备注 id 订单 ID 不能为空携带在url中 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;order_id\u0026#34;: 67, \u0026#34;user_id\u0026#34;: 1, \u0026#34;order_number\u0026#34;: \u0026#34;itany-g7kmck71vjaujfgoi\u0026#34;, \u0026#34;order_price\u0026#34;: 20, \u0026#34;order_pay\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;is_send\u0026#34;: \u0026#34;否\u0026#34;, \u0026#34;trade_no\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;order_fapiao_title\u0026#34;: \u0026#34;个人\u0026#34;, \u0026#34;order_fapiao_company\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;order_fapiao_content\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;consignee_addr\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;pay_status\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;create_time\u0026#34;: 1512533560, \u0026#34;update_time\u0026#34;: 1512533560, \u0026#34;goods\u0026#34;: [ { \u0026#34;id\u0026#34;: 82, \u0026#34;order_id\u0026#34;: 67, \u0026#34;goods_id\u0026#34;: 96, \u0026#34;goods_price\u0026#34;: 333, \u0026#34;goods_number\u0026#34;: 2, \u0026#34;goods_total_price\u0026#34;: 999 }, { \u0026#34;id\u0026#34;: 83, \u0026#34;order_id\u0026#34;: 67, \u0026#34;goods_id\u0026#34;: 95, \u0026#34;goods_price\u0026#34;: 666, \u0026#34;goods_number\u0026#34;: 5, \u0026#34;goods_total_price\u0026#34;: 999 } ] }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 4. 修改地址 请求路径：orders/:id/address\n请求方法：put\n请求参数\n参数名 参数说明 备注 id 订单 ID 不能为空携带在url中 consignee_addr 收货地址 可以为空 响应数据 { \u0026#34;data\u0026#34;: {}, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;修改地址成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 5. 查看物流信息 请求路径：/kuaidi/:id\n请求方法：get\n物流单号：815294206237577\n响应数据：\n{ \u0026#34;meta\u0026#34;:{ \u0026#34;status\u0026#34;:200, \u0026#34;message\u0026#34;:\u0026#34;获取物流信息成功！\u0026#34; }, \u0026#34;data\u0026#34;:[ { \u0026#34;time\u0026#34;:\u0026#34;2020-11-15 12:39:56\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-15 12:39:56\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;已签收,签收人是 汤小洋 先生/女士，如有疑问请联系派件员阿奇(13805148888)，如您未收到此快递，请拨打投诉电话：15294207777，感谢使用申通快递，期待再次为您服务\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-15 08:46:54\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-15 08:46:54\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;上海浦东寒亭营业厅-寒亭阿奇(13805148888)-派件中\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-15 08:38:57\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-15 08:38:57\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;已到达-上海浦东寒亭营业厅\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-15 06:38:13\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-15 06:38:13\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;已到达-上海浦东寒亭营业厅\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-14 20:56:45\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-14 20:56:45\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;上海浦东转运中心-已发往-上海浦东寒亭公司\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-14 20:52:44\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-14 20:52:44\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;已到达-上海浦东转运中心\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-14 17:43:48\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-14 17:43:48\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;已到达-上海浦东转运中心\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-14 10:53:46\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-14 10:53:46\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;上海浦东转运中心-已发往-上海浦东转运中心\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-14 10:43:31\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-14 10:43:31\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;已到达-上海浦东转运中心\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-14 02:43:20\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-14 02:43:20\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;江苏苏州转运中心-已发往-上海浦东转运中心\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-14 02:41:40\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-14 02:41:40\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;已到达-江苏苏州转运中心\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-13 16:28:13\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-13 16:28:13\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;江苏南京转运中心-已发往-江苏苏州转运中心\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-13 15:03:30\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-13 15:03:30\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;南京IT教育公司-已发往-江苏南京转运中心\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-13 14:47:56\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-13 14:47:56\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;南京IT教育公司-已发往-江苏南京转运中心\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-13 14:37:06\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-13 14:37:06\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;南京IT教育公司-城东汪小主宠物店-已收件\u0026#34;, \u0026#34;location\u0026#34;:null } ] } 一、API V2 接口说明 接口基准地址：http://www.tangxiaoyang.vip:8888/api/v2/\n服务端已开启 CORS 跨域支持\nAPI V2 认证统一使用 Token 认证\n需要授权的 API ，必须在请求头中使用 Authorization 字段提供 token 令牌\n使用 HTTP Status Code 标识状态\n数据返回格式统一使用 JSON\n1. 支持的请求方法 GET（SELECT）：从服务器取出资源（一项或多项）。\nPOST（CREATE）：在服务器新建一个资源。\nPUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。\nPATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。\nDELETE（DELETE）：从服务器删除资源。\nHEAD：获取资源的元数据。\nOPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的。\n2. 通用返回状态说明 状态码 含义 说明 200 OK 请求成功 201 CREATED 创建成功 204 DELETED 删除成功 400 BAD REQUEST 请求的地址不存在或者包含不支持的参数 401 UNAUTHORIZED 未授权 403 FORBIDDEN 被禁止访问 404 NOT FOUND 请求的资源不存在 422 Unprocesable entity [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误 500 INTERNAL SERVER ERROR 内部错误 二、登录 1. 登录验证接口 请求路径：login\n请求方法：post\n请求参数\n参数名 参数说明 备注 username 用户名 不能为空 password 密码 不能为空 响应参数 参数名 参数说明 备注 id 用户 ID rid 用户角色 ID username 用户名 mobile 手机号 email 邮箱 token 令牌 基于 jwt 的令牌 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;id\u0026#34;: 500, \u0026#34;rid\u0026#34;: 0, \u0026#34;username\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;mobile\u0026#34;: \u0026#34;123\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;123@qq.com\u0026#34;, \u0026#34;token\u0026#34;: \u0026#34;Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOjUwMCwicmlkIjowLCJpYXQiOjE1MTI1NDQyOTksImV4cCI6MTUxMjYzMDY5OX0.eGrsrvwHm-tPsO9r_pxHIQ5i5L1kX9RX444uwnRGaIM\u0026#34; }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;登录成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 三、用户管理 1. 用户数据列表 请求路径：users\n请求方法：get\n请求参数\n参数名 参数说明 备注 query 查询参数 可以为空 pagenum 当前页码 不能为空 pagesize 每页显示条数 不能为空 响应参数 参数名 参数说明 备注 total 总记录数 pagenum 当前页码 users 用户数据集合 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;total\u0026#34;: 5, \u0026#34;pagenum\u0026#34;: 1, \u0026#34;users\u0026#34;: [ { \u0026#34;id\u0026#34;: 25, \u0026#34;username\u0026#34;: \u0026#34;tom\u0026#34;, \u0026#34;mobile\u0026#34;: \u0026#34;13951783475\u0026#34;, \u0026#34;type\u0026#34;: 1, \u0026#34;email\u0026#34;: \u0026#34;1049901079@qq.com\u0026#34;, \u0026#34;create_time\u0026#34;: \u0026#34;2020-11-09T20:36:26.000Z\u0026#34;, \u0026#34;mg_state\u0026#34;: true, // 当前用户的状态 \u0026#34;role_name\u0026#34;: \u0026#34;超级管理员\u0026#34; } ] }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 2. 添加用户 请求路径：users\n请求方法：post\n请求参数\n参数名 参数说明 备注 username 用户名称 不能为空 password 用户密码 不能为空 email 邮箱 可以为空 mobile 手机号 可以为空 响应参数 参数名 参数说明 备注 id 用户 ID rid 用户角色 ID username 用户名 mobile 手机号 email 邮箱 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;id\u0026#34;: 28, \u0026#34;username\u0026#34;: \u0026#34;tom\u0026#34;, \u0026#34;mobile\u0026#34;: \u0026#34;test\u0026#34;, \u0026#34;type\u0026#34;: 1, \u0026#34;openid\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;test@test.com\u0026#34;, \u0026#34;create_time\u0026#34;: \u0026#34;2020-11-10T03:47:13.533Z\u0026#34;, \u0026#34;modify_time\u0026#34;: null, \u0026#34;is_delete\u0026#34;: false, \u0026#34;is_active\u0026#34;: false }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;用户创建成功\u0026#34;, \u0026#34;status\u0026#34;: 201 } } 3. 修改用户状态 请求路径：users/:uId/state/:type\n请求方法：put\n请求参数\n参数名 参数说明 备注 uId 用户 ID 不能为空携带在url中 type 用户状态 不能为空携带在url中，值为 true 或者 false 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;id\u0026#34;: 566, \u0026#34;rid\u0026#34;: 30, \u0026#34;username\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;mobile\u0026#34;: \u0026#34;123456\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;bb@itany.com\u0026#34;, \u0026#34;mg_state\u0026#34;: 0 }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;设置状态成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 4. 根据 ID 查询用户信息 请求路径：users/:id\n请求方法：get\n请求参数\n参数名 参数说明 备注 id 用户 ID 不能为空携带在url中 响应参数 参数名 参数说明 备注 id 用户 ID role_id 角色 ID mobile 手机号 email 邮箱 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;id\u0026#34;: 503, \u0026#34;username\u0026#34;: \u0026#34;admin3\u0026#34;, \u0026#34;role_id\u0026#34;: 0, \u0026#34;mobile\u0026#34;: \u0026#34;00000\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;new@new.com\u0026#34; }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;查询成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 5. 编辑提交用户 请求路径：users/:id\n请求方法：put\n请求参数\n参数名 参数说明 备注 id 用户 id 不能为空 参数是url参数:id email 邮箱 可以为空 mobile 手机号 可以为空 响应参数 参数名 参数说明 备注 id 用户 ID role_id 角色 ID mobile 手机号 email 邮箱 响应数据 /* 200表示成功，500表示失败 */ { \u0026#34;data\u0026#34;: { \u0026#34;id\u0026#34;: 503, \u0026#34;username\u0026#34;: \u0026#34;admin3\u0026#34;, \u0026#34;role_id\u0026#34;: 0, \u0026#34;mobile\u0026#34;: \u0026#34;111\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;123@123.com\u0026#34; }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;更新成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 6. 删除单个用户 请求路径：users/:id\n请求方法：delete\n请求参数\n参数名 参数说明 备注 id 用户 id 不能为空参数是url参数:id 响应参数\n响应数据\n{ \u0026#34;data\u0026#34;: null, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;删除成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 7. 分配用户角色 请求路径：users/:id/role\n请求方法：put\n请求参数\n参数名 参数说明 备注 id 用户 ID 不能为空参数是url参数:id rid 角色 id 不能为空参数body参数 响应参数 参数名 参数说明 备注 id 用户 ID role_id 角色 ID mobile 手机号 email 邮箱 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;id\u0026#34;: 508, \u0026#34;rid\u0026#34;: \u0026#34;30\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;asdf1\u0026#34;, \u0026#34;mobile\u0026#34;: \u0026#34;123123\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;adfsa@qq.com\u0026#34; }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;设置角色成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 四、权限管理 1. 所有权限列表 请求路径：rights/:type\n请求方法：get\n请求参数\n参数名 参数说明 备注 type 类型 值 list 或 tree , list 列表显示权限, tree 树状显示权限,参数是url参数:type 响应参数 参数名 参数说明 备注 id 权限 ID authName 权限说明 level 权限层级 pid 权限父 ID path 对应访问路径 响应数据 type=list { \u0026#34;data\u0026#34;: [ { \u0026#34;id\u0026#34;: 101, \u0026#34;authName\u0026#34;: \u0026#34;商品管理\u0026#34;, \u0026#34;level\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;pid\u0026#34;: 0, \u0026#34;path\u0026#34;: null }, { \u0026#34;id\u0026#34;: 102, \u0026#34;authName\u0026#34;: \u0026#34;订单管理\u0026#34;, \u0026#34;level\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;pid\u0026#34;: 0, \u0026#34;path\u0026#34;: null } ], \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取权限列表成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } type=tree\n{ data: [ { id: 101, authName: \u0026#39;商品管理\u0026#39;, path: null, pid: 0, children: [ { id: 104, authName: \u0026#39;商品列表\u0026#39;, path: null, pid: 101, children: [ { id: 105, authName: \u0026#39;添加商品\u0026#39;, path: null, pid: \u0026#39;104,101\u0026#39; } ] } ] } ], meta: { msg: \u0026#39;获取权限列表成功\u0026#39;, status: 200 } } 2. 左侧菜单权限 请求路径：menus\n请求方法：get\n响应数据\n{ \u0026#34;data\u0026#34;: { \u0026#34;id\u0026#34;: 101, \u0026#34;authName\u0026#34;: \u0026#34;商品管理\u0026#34;, \u0026#34;path\u0026#34;: null, \u0026#34;children\u0026#34;: [ { \u0026#34;id\u0026#34;: 104, \u0026#34;authName\u0026#34;: \u0026#34;商品列表\u0026#34;, \u0026#34;path\u0026#34;: null, \u0026#34;children\u0026#34;: [] } ] } \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取菜单列表成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 五、角色管理 1. 角色列表 请求路径：roles\n请求方法：get\n响应数据说明\n第一层为角色信息\n第二层开始为权限说明，权限一共有 3 层权限\n最后一层权限，不包含 children 属性\n响应数据\n{ \u0026#34;data\u0026#34;: [ { \u0026#34;id\u0026#34;: 30, \u0026#34;roleName\u0026#34;: \u0026#34;主管\u0026#34;, \u0026#34;roleDesc\u0026#34;: \u0026#34;技术负责人\u0026#34;, \u0026#34;children\u0026#34;: [ { \u0026#34;id\u0026#34;: 101, \u0026#34;authName\u0026#34;: \u0026#34;商品管理\u0026#34;, \u0026#34;path\u0026#34;: null, \u0026#34;children\u0026#34;: [ { \u0026#34;id\u0026#34;: 104, \u0026#34;authName\u0026#34;: \u0026#34;商品列表\u0026#34;, \u0026#34;path\u0026#34;: null, \u0026#34;children\u0026#34;: [ { \u0026#34;id\u0026#34;: 105, \u0026#34;authName\u0026#34;: \u0026#34;添加商品\u0026#34;, \u0026#34;path\u0026#34;: null } ] } ] } ] } ], \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 2. 添加角色 请求路径：roles\n请求方法：post\n请求参数\n参数名 参数说明 备注 roleName 角色名称 不能为空 roleDesc 角色描述 可以为空 响应参数 参数名 参数说明 备注 roleId 角色 ID roleName 角色名称 roleDesc 角色描述 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;roleId\u0026#34;: 40, \u0026#34;roleName\u0026#34;: \u0026#34;admin2\u0026#34;, \u0026#34;roleDesc\u0026#34;: \u0026#34;admin2Desc\u0026#34; }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;创建成功\u0026#34;, \u0026#34;status\u0026#34;: 201 } } 3. 根据 ID 查询角色 请求路径：roles/:id\n请求方法：get\n请求参数\n参数名 参数说明 备注 :id 角色 ID 不能为空携带在url中 响应参数 参数名 参数说明 备注 roleId 角色 ID roleName 角色名称 roleDesc 角色描述 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;roleId\u0026#34;: 31, \u0026#34;roleName\u0026#34;: \u0026#34;测试角色\u0026#34;, \u0026#34;roleDesc\u0026#34;: \u0026#34;测试负责人\u0026#34; }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 4. 编辑提交角色 请求路径：roles/:id\n请求方法：put\n请求参数\n参数名 参数说明 备注 :id 角色 ID 不能为空携带在url中 roleName 角色名称 不能为空 roleDesc 角色描述 可以为空 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;roleId\u0026#34;: 31, \u0026#34;roleName\u0026#34;: \u0026#34;测试角色\u0026#34;, \u0026#34;roleDesc\u0026#34;: \u0026#34;测试角色描述\u0026#34; }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 5. 删除角色 请求路径：roles/:id\n请求方法：delete\n请求参数\n参数名 参数说明 备注 :id 角色 ID 不能为空携带在url中 响应数据 { \u0026#34;data\u0026#34;: null, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;删除成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 6. 角色授权 请求路径：roles/:roleId/rights\n请求方法：post\n请求参数：通过 请求体 发送给后端\n参数名 参数说明 备注 :roleId 角色 ID 不能为空携带在url中 rids 权限 ID 列表（字符串） 以 , 分割的权限 ID 列表（获取所有被选中、叶子节点的key和半选中节点的key, 包括 1，2，3级节点） 响应数据 { \u0026#34;data\u0026#34;: null, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;更新成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 7. 删除角色指定权限 请求路径：roles/:roleId/rights/:rightId\n请求方法：delete\n请求参数 参数名 参数说明 备注 :roleId 角色 ID 不能为空携带在url中 :rightId 权限 ID 不能为空携带在url中\n响应数据说明\n返回的data, 是当前角色下最新的权限数据 响应数据\n{ \u0026#34;data\u0026#34;: [ { \u0026#34;id\u0026#34;: 101, \u0026#34;authName\u0026#34;: \u0026#34;商品管理\u0026#34;, \u0026#34;path\u0026#34;: null, \u0026#34;children\u0026#34;: [ { \u0026#34;id\u0026#34;: 104, \u0026#34;authName\u0026#34;: \u0026#34;商品列表\u0026#34;, \u0026#34;path\u0026#34;: null, \u0026#34;children\u0026#34;: [ { \u0026#34;id\u0026#34;: 105, \u0026#34;authName\u0026#34;: \u0026#34;添加商品\u0026#34;, \u0026#34;path\u0026#34;: null }, { \u0026#34;id\u0026#34;: 116, \u0026#34;authName\u0026#34;: \u0026#34;修改\u0026#34;, \u0026#34;path\u0026#34;: null } ] } ] } ], \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;取消权限成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 六、商品分类管理 1. 商品分类数据列表 请求路径：categories\n请求方法：get\n请求参数\n参数名 参数说明 备注 type [1,2,3] 值：1，2，3 分别表示显示一层二层三层分类列表 【可选参数】如果不传递，则默认获取所有级别的分类 pagenum 当前页码值 【可选参数】如果不传递，则默认获取所有分类 pagesize 每页显示多少条数据 【可选参数】如果不传递，则默认获取所有分类 响应参数 参数名 参数说明 备注 cat_id 分类 ID cat_name 分类名称 cat_pid 分类父 ID cat_level 分类当前层级 响应数据 { \u0026#34;data\u0026#34;: [ { \u0026#34;cat_id\u0026#34;: 1, \u0026#34;cat_name\u0026#34;: \u0026#34;大家电\u0026#34;, \u0026#34;cat_pid\u0026#34;: 0, \u0026#34;cat_level\u0026#34;: 0, \u0026#34;cat_deleted\u0026#34;: false, \u0026#34;children\u0026#34;: [ { \u0026#34;cat_id\u0026#34;: 3, \u0026#34;cat_name\u0026#34;: \u0026#34;电视\u0026#34;, \u0026#34;cat_pid\u0026#34;: 1, \u0026#34;cat_level\u0026#34;: 1, \u0026#34;cat_deleted\u0026#34;: false, \u0026#34;children\u0026#34;: [ { \u0026#34;cat_id\u0026#34;: 6, \u0026#34;cat_name\u0026#34;: \u0026#34;曲面电视\u0026#34;, \u0026#34;cat_pid\u0026#34;: 3, \u0026#34;cat_level\u0026#34;: 2, \u0026#34;cat_deleted\u0026#34;: false }, { \u0026#34;cat_id\u0026#34;: 7, \u0026#34;cat_name\u0026#34;: \u0026#34;海信\u0026#34;, \u0026#34;cat_pid\u0026#34;: 3, \u0026#34;cat_level\u0026#34;: 2, \u0026#34;cat_deleted\u0026#34;: false } ] } ] } ], \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 2. 添加分类 请求路径：categories\n请求方法：post\n请求参数\n参数名 参数说明 备注 cat_pid 分类父 ID 不能为空，如果要添加一级分类，则父分类Id应该设置为 0 cat_name 分类名称 不能为空 cat_level 分类层级 不能为空，0表示一级分类；1表示二级分类；2表示三级分类 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;cat_id\u0026#34;: 62, \u0026#34;cat_name\u0026#34;: \u0026#34;相框\u0026#34;, \u0026#34;cat_pid\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;cat_level\u0026#34;: \u0026#34;1\u0026#34; }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;创建成功\u0026#34;, \u0026#34;status\u0026#34;: 201 } } 3. 根据 id 查询分类 请求路径：categories/:id\n请求方法：get\n请求参数\n参数名 参数说明 备注 :id 分类 ID 不能为空携带在url中 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;cat_id\u0026#34;: 3, \u0026#34;cat_name\u0026#34;: \u0026#34;厨卫电器\u0026#34;, \u0026#34;cat_pid\u0026#34;: 0, \u0026#34;cat_level\u0026#34;: 0 }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 4. 编辑提交分类 请求路径：categories/:id\n请求方法：put\n请求参数\n参数名 参数说明 备注 :id 分类 ID 不能为空携带在url中 cat_name 分类名称 不能为空【此参数，放到请求体中】 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;cat_id\u0026#34;: 22, \u0026#34;cat_name\u0026#34;: \u0026#34;自拍杆\u0026#34;, \u0026#34;cat_pid\u0026#34;: 7, \u0026#34;cat_level\u0026#34;: 2 }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;更新成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 5. 删除分类 请求路径：categories/:id\n请求方法：delete\n请求参数\n参数名 参数说明 备注 :id 分类 ID 不能为空携带在url中 响应数据 { \u0026#34;data\u0026#34;: null, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;删除成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 七、分类参数管理 1. 参数列表 请求路径：categories/:id/attributes\n请求方法：get\n请求参数\n参数名 参数说明 备注 :id 分类 ID 不能为空携带在url中 sel many或only 不能为空，many表示动态参数，only表示静态参数（也称为静态属性） 响应参数 参数名 参数说明 备注 attr_id 分类参数 ID attr_name 分类参数名称 cat_id 分类参数所属分类 attr_sel 分类参数的类型，many表示动态参数，only表示静态属性 attr_write list表示从列表选择（动态参数），manual表示手工录入（静态属性） attr_vals 分类参数的明细，如果是动态参数，则该值是以空格分隔的字符串 响应数据 { \u0026#34;data\u0026#34;: [ { \u0026#34;attr_id\u0026#34;: 1, \u0026#34;attr_name\u0026#34;: \u0026#34;cpu\u0026#34;, \u0026#34;cat_id\u0026#34;: 22, \u0026#34;attr_sel\u0026#34;: \u0026#34;many\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;4K高清 5K高清 6K高清\u0026#34; } ], \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 2. 添加动态参数或静态属性 请求路径：categories/:id/attributes\n请求方法：post\n请求参数\n参数名 参数说明 备注 :id 分类 ID 不能为空携带在url中 attr_name 参数名称 不能为空 attr_sel many或only 不能为空 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;attr_id\u0026#34;: 44, \u0026#34;attr_name\u0026#34;: \u0026#34;测试参数\u0026#34;, \u0026#34;cat_id\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;attr_sel\u0026#34;: \u0026#34;many\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;a,b,c\u0026#34; }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;创建成功\u0026#34;, \u0026#34;status\u0026#34;: 201 } } 3. 根据 ID 查询参数 请求路径：categories/:id/attributes/:attrId\n请求方法：get\n请求参数\n参数名 参数说明 备注 :id 分类 ID 不能为空携带在url中 :attrId 属性 ID 不能为空携带在url中 attr_sel many或only 不能为空 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;attr_id\u0026#34;: 1, \u0026#34;attr_name\u0026#34;: \u0026#34;cpu\u0026#34;, \u0026#34;cat_id\u0026#34;: 22, \u0026#34;attr_sel\u0026#34;: \u0026#34;only\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;manual\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;ffff\u0026#34; }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 4. 更新参数及明细 请求路径：categories/:id/attributes/:attrId\n请求方法：put\n请求参数\n参数名 参数说明 备注 :id 分类 ID 不能为空携带在url中 :attrId 参数 ID 不能为空携带在url中 attr_name 参数名称 不能为空，携带在请求体中 attr_sel many或only 不能为空，携带在请求体中 attr_vals 参数的明细 可选参数，携带在请求体中 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;attr_id\u0026#34;: 9, \u0026#34;attr_name\u0026#34;: \u0026#34;测试更新\u0026#34;, \u0026#34;cat_id\u0026#34;: \u0026#34;43\u0026#34;, \u0026#34;attr_sel\u0026#34;: \u0026#34;only\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;manual\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;abc\u0026#34; }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;更新成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 5. 删除参数 请求路径： categories/:id/attributes/:attrid\n请求方法：delete\n请求参数\n参数名 参数说明 备注 :id 分类 ID 不能为空携带在url中 :attrid 参数 ID 不能为空携带在url中 响应数据 { \u0026#34;data\u0026#34;: null, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;删除成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 八、商品管理 1. 商品列表数据 请求路径：goods\n请求方法：get\n请求参数\n参数名 参数说明 备注 query 查询参数 可以为空 pagenum 当前页码 不能为空 pagesize 每页显示条数 不能为空 响应参数 参数名 参数说明 备注 total 总共商品条数 pagenum 当前商品页数 goods_id 商品 ID goods_name 商品名称 goods_price 价格 goods_number 数量 goods_weight 重量 不能为空 goods_state 商品状态 商品状态 0: 未通过 1: 审核中 2: 已审核 add_time 添加时间 upd_time 更新时间 hot_mumber 热销品数量 is_promote 是否是热销品 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;total\u0026#34;: 50, \u0026#34;pagenum\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;goods\u0026#34;: [ { \u0026#34;goods_id\u0026#34;: 144, \u0026#34;goods_name\u0026#34;: \u0026#34;iphone\u0026#34;, \u0026#34;goods_price\u0026#34;: 1, \u0026#34;goods_number\u0026#34;: 1, \u0026#34;goods_weight\u0026#34;: 1, \u0026#34;goods_state\u0026#34;: null, \u0026#34;add_time\u0026#34;: 1512954923, \u0026#34;upd_time\u0026#34;: 1512954923, \u0026#34;hot_mumber\u0026#34;: 0, \u0026#34;is_promote\u0026#34;: false } ] }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 2. 添加商品 请求路径：goods\n请求方法：post\n请求参数\n参数名 参数说明 备注 goods_name 商品名称 不能为空 goods_cat 以,逗号分割的分类列表 不能为空 goods_price 价格 不能为空 goods_number 数量 不能为空 goods_weight 重量 不能为空 goods_introduce 介绍 可以为空 pics 上传的图片临时路径（对象） 可以为空 attrs 商品的参数（数组），包含 动态参数 和 静态属性 可以为空 请求数据 { \u0026#34;goods_name\u0026#34;:\u0026#34;test_goods_name2\u0026#34;, \u0026#34;goods_cat\u0026#34;: \u0026#34;1,2,3\u0026#34;, \u0026#34;goods_price\u0026#34;:20, \u0026#34;goods_number\u0026#34;:30, \u0026#34;goods_weight\u0026#34;:40, \u0026#34;goods_introduce\u0026#34;:\u0026#34;abc\u0026#34;, \u0026#34;pics\u0026#34;:[ {\u0026#34;pic\u0026#34;:\u0026#34;/tmp_uploads/30f08d52c551ecb447277eae232304b8\u0026#34;} ], \u0026#34;attrs\u0026#34;:[ { \u0026#34;attr_id\u0026#34;:15, \u0026#34;attr_value\u0026#34;:\u0026#34;ddd\u0026#34; }, { \u0026#34;attr_id\u0026#34;:15, \u0026#34;attr_value\u0026#34;:\u0026#34;eee\u0026#34; } ] } 响应参数 参数名 参数说明 备注 total 总共商品条数 pagenum 当前商品页数 goods_id 商品 ID goods_cat 以为\u0026rsquo;,\u0026lsquo;分割的分类列表 goods_name 商品名称 goods_price 价格 goods_number 数量 goods_weight 重量 不能为空 goods_state 商品状态 商品状态 0: 未通过 1: 审核中 2: 已审核 add_time 添加时间 upd_time 更新时间 hot_mumber 热销品数量 is_promote 是否是热销品 pics 上传的图片临时路径（对象） pics_id:图片 ID,goods_id:商品 ID,pics_big:大图,pics_mid:中图,pics_sma:小图 attrs 商品的参数（数组） goods_id:商品 ID,attr_value:当前商品的参数值,add_price:浮动价格,attr_vals:预定义的参数值,attr_sel:手动输入，还是单选 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;goods_id\u0026#34;: 145, \u0026#34;goods_name\u0026#34;: \u0026#34;test_goods_name2\u0026#34;, \u0026#34;goods_price\u0026#34;: 20, \u0026#34;cat_id\u0026#34;: 1, \u0026#34;goods_number\u0026#34;: 30, \u0026#34;goods_weight\u0026#34;: 40, \u0026#34;goods_introduce\u0026#34;: \u0026#34;abc\u0026#34;, \u0026#34;goods_big_logo\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;goods_small_logo\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;goods_state\u0026#34;: 1, \u0026#34;add_time\u0026#34;: 1512962370, \u0026#34;upd_time\u0026#34;: 1512962370, \u0026#34;hot_mumber\u0026#34;: 0, \u0026#34;is_promote\u0026#34;: false, \u0026#34;pics\u0026#34;: [ { \u0026#34;pics_id\u0026#34;: 397, \u0026#34;goods_id\u0026#34;: 145, \u0026#34;pics_big\u0026#34;: \u0026#34;uploads/goodspics/big_30f08d52c551ecb447277eae232304b8\u0026#34;, \u0026#34;pics_mid\u0026#34;: \u0026#34;uploads/goodspics/mid_30f08d52c551ecb447277eae232304b8\u0026#34;, \u0026#34;pics_sma\u0026#34;: \u0026#34;uploads/goodspics/sma_30f08d52c551ecb447277eae232304b8\u0026#34; } ], \u0026#34;attrs\u0026#34;: [ { \u0026#34;goods_id\u0026#34;: 145, \u0026#34;attr_id\u0026#34;: 15, \u0026#34;attr_value\u0026#34;: \u0026#34;ddd\u0026#34;, \u0026#34;add_price\u0026#34;: null, \u0026#34;attr_name\u0026#34;: \u0026#34;fffffff\u0026#34;, \u0026#34;attr_sel\u0026#34;: \u0026#34;many\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;\u0026#34; }, { \u0026#34;goods_id\u0026#34;: 145, \u0026#34;attr_id\u0026#34;: 15, \u0026#34;attr_value\u0026#34;: \u0026#34;eee\u0026#34;, \u0026#34;add_price\u0026#34;: null, \u0026#34;attr_name\u0026#34;: \u0026#34;fffffff\u0026#34;, \u0026#34;attr_sel\u0026#34;: \u0026#34;many\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;\u0026#34; } ] }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;创建商品成功\u0026#34;, \u0026#34;status\u0026#34;: 201 } } 3. 根据 ID 查询商品 请求路径：goods/:id\n请求方法：get\n请求参数\n参数名 参数说明 备注 id 商品 ID 不能为空携带在url中 响应参数 参数名 参数说明 备注 goods_id 商品 ID goods_name 商品名称 goods_price 价格 goods_number 数量 goods_weight 重量 不能为空 goods_state 商品状态 商品状态 0: 未通过 1: 审核中 2: 已审核 goods_introduce 介绍 goods_cat 以为\u0026rsquo;,\u0026lsquo;分割的分类列表 add_time 添加时间 upd_time 更新时间 hot_mumber 热销品数量 is_promote 是否是热销品 pics 上传的图片临时路径（对象） pics_id:图片 ID,goods_id:商品 ID,pics_big:大图,pics_mid:中图,pics_sma:小图 attrs 商品的参数（数组） goods_id:商品 ID,attr_value:当前商品的参数值,add_price:浮动价格,attr_vals:预定义的参数值,attr_sel:手动输入，还是单选 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;goods_id\u0026#34;: 145, \u0026#34;goods_name\u0026#34;: \u0026#34;test_goods_name2\u0026#34;, \u0026#34;goods_price\u0026#34;: 20, \u0026#34;goods_number\u0026#34;: 30, \u0026#34;goods_weight\u0026#34;: 40, \u0026#34;goods_introduce\u0026#34;: \u0026#34;abc\u0026#34;, \u0026#34;goods_big_logo\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;goods_small_logo\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;goods_state\u0026#34;: 1, \u0026#34;add_time\u0026#34;: 1512962370, \u0026#34;upd_time\u0026#34;: 1512962370, \u0026#34;hot_mumber\u0026#34;: 0, \u0026#34;is_promote\u0026#34;: false, \u0026#34;pics\u0026#34;: [ { \u0026#34;pics_id\u0026#34;: 397, \u0026#34;goods_id\u0026#34;: 145, \u0026#34;pics_big\u0026#34;: \u0026#34;uploads/goodspics/big_30f08d52c551ecb447277eae232304b8\u0026#34;, \u0026#34;pics_mid\u0026#34;: \u0026#34;uploads/goodspics/mid_30f08d52c551ecb447277eae232304b8\u0026#34;, \u0026#34;pics_sma\u0026#34;: \u0026#34;uploads/goodspics/sma_30f08d52c551ecb447277eae232304b8\u0026#34; } ], \u0026#34;attrs\u0026#34;: [ { \u0026#34;goods_id\u0026#34;: 145, \u0026#34;attr_id\u0026#34;: 15, \u0026#34;attr_value\u0026#34;: \u0026#34;ddd\u0026#34;, \u0026#34;add_price\u0026#34;: null, \u0026#34;attr_name\u0026#34;: \u0026#34;fffffff\u0026#34;, \u0026#34;attr_sel\u0026#34;: \u0026#34;many\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;\u0026#34; }, { \u0026#34;goods_id\u0026#34;: 145, \u0026#34;attr_id\u0026#34;: 15, \u0026#34;attr_value\u0026#34;: \u0026#34;eee\u0026#34;, \u0026#34;add_price\u0026#34;: null, \u0026#34;attr_name\u0026#34;: \u0026#34;fffffff\u0026#34;, \u0026#34;attr_sel\u0026#34;: \u0026#34;many\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;\u0026#34; } ] }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 4. 编辑提交商品 请求路径：goods/:id\n请求方法：put\n请求参数\n参数名 参数说明 备注 id 商品 ID 不能为空携带在url中 goods_name 商品名称 不能为空 goods_cat 以为\u0026rsquo;,\u0026lsquo;分割的分类列表 不能为空 goods_price 价格 不能为空 goods_number 数量 不能为空 goods_weight 重量 不能为空 goods_introduce 介绍 可以为空 pics 上传的图片临时路径（对象） 可以为空 attrs 商品的参数（数组） 可以为空 请求数据 { \u0026#34;goods_name\u0026#34;:\u0026#34;test_goods_name2\u0026#34;, \u0026#34;goods_price\u0026#34;:20, \u0026#34;goods_number\u0026#34;:30, \u0026#34;goods_weight\u0026#34;:40, \u0026#34;goods_introduce\u0026#34;:\u0026#34;abc\u0026#34;, \u0026#34;pics\u0026#34;:[ {\u0026#34;pic\u0026#34;:\u0026#34;/tmp_uploads/30f08d52c551ecb447277eae232304b8\u0026#34;} ], \u0026#34;attrs\u0026#34;:[ { \u0026#34;attr_id\u0026#34;:15, \u0026#34;attr_value\u0026#34;:\u0026#34;ddd\u0026#34; }, { \u0026#34;attr_id\u0026#34;:15, \u0026#34;attr_value\u0026#34;:\u0026#34;eee\u0026#34; } ] } 响应参数 参数名 参数说明 备注 total 总共商品条数 pagenum 当前商品页数 goods_id 商品 ID goods_name 商品名称 goods_price 价格 goods_number 数量 goods_weight 重量 不能为空 goods_state 商品状态 商品状态 0: 未通过 1: 审核中 2: 已审核 add_time 添加时间 upd_time 更新时间 hot_mumber 热销品数量 is_promote 是否是热销品 pics 上传的图片临时路径（对象） pics_id:图片 ID,goods_id:商品 ID,pics_big:大图,pics_mid:中图,pics_sma:小图 attrs 商品的参数（数组） goods_id:商品 ID,attr_value:当前商品的参数值,add_price:浮动价格,attr_vals:预定义的参数值,attr_sel:手动输入，还是单选, 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;goods_id\u0026#34;: 145, \u0026#34;goods_name\u0026#34;: \u0026#34;test_goods_name2\u0026#34;, \u0026#34;goods_price\u0026#34;: 20, \u0026#34;goods_number\u0026#34;: 30, \u0026#34;goods_weight\u0026#34;: 40, \u0026#34;goods_introduce\u0026#34;: \u0026#34;abc\u0026#34;, \u0026#34;goods_big_logo\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;goods_small_logo\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;goods_state\u0026#34;: 1, \u0026#34;add_time\u0026#34;: 1512962370, \u0026#34;upd_time\u0026#34;: 1512962370, \u0026#34;hot_mumber\u0026#34;: 0, \u0026#34;is_promote\u0026#34;: false, \u0026#34;pics\u0026#34;: [ { \u0026#34;pics_id\u0026#34;: 397, \u0026#34;goods_id\u0026#34;: 145, \u0026#34;pics_big\u0026#34;: \u0026#34;uploads/goodspics/big_30f08d52c551ecb447277eae232304b8\u0026#34;, \u0026#34;pics_mid\u0026#34;: \u0026#34;uploads/goodspics/mid_30f08d52c551ecb447277eae232304b8\u0026#34;, \u0026#34;pics_sma\u0026#34;: \u0026#34;uploads/goodspics/sma_30f08d52c551ecb447277eae232304b8\u0026#34; } ], \u0026#34;attrs\u0026#34;: [ { \u0026#34;goods_id\u0026#34;: 145, \u0026#34;attr_id\u0026#34;: 15, \u0026#34;attr_value\u0026#34;: \u0026#34;ddd\u0026#34;, \u0026#34;add_price\u0026#34;: null, \u0026#34;attr_name\u0026#34;: \u0026#34;fffffff\u0026#34;, \u0026#34;attr_sel\u0026#34;: \u0026#34;many\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;\u0026#34; }, { \u0026#34;goods_id\u0026#34;: 145, \u0026#34;attr_id\u0026#34;: 15, \u0026#34;attr_value\u0026#34;: \u0026#34;eee\u0026#34;, \u0026#34;add_price\u0026#34;: null, \u0026#34;attr_name\u0026#34;: \u0026#34;fffffff\u0026#34;, \u0026#34;attr_sel\u0026#34;: \u0026#34;many\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;\u0026#34; } ] }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;更新商品成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 5. 删除商品 请求路径：goods/:id\n请求方法：delete\n请求参数\n参数名 参数说明 备注 id 商品 ID 不能为空携带在url中 响应数据 { \u0026#34;data\u0026#34;: null, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;删除成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } ###同步商品图片\n请求路径：goods/:id/pics\n请求方法：put\n请求参数\n参数名 参数说明 备注 id 商品 ID 不能为空携带在url中 pics 商品图片集合 如果有 pics_id 字段会保留该图片，如果没有 pics_id 但是有 pic 字段就会新生成图片数据 请求数据 ;[ { pic: \u0026#39;tmp_uploads/db28f6316835836e97653b5c75e418be.png\u0026#39; }, { pics_id: 397, goods_id: 145, pics_big: \u0026#39;uploads/goodspics/big_30f08d52c551ecb447277eae232304b8\u0026#39;, pics_mid: \u0026#39;uploads/goodspics/mid_30f08d52c551ecb447277eae232304b8\u0026#39;, pics_sma: \u0026#39;uploads/goodspics/sma_30f08d52c551ecb447277eae232304b8\u0026#39; } ] 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;goods_id\u0026#34;: 96, \u0026#34;goods_name\u0026#34;: \u0026#34;iphoneXX\u0026#34;, \u0026#34;goods_price\u0026#34;: 2, \u0026#34;goods_number\u0026#34;: 22, \u0026#34;goods_weight\u0026#34;: 22, \u0026#34;goods_introduce\u0026#34;: null, \u0026#34;goods_big_logo\u0026#34;: \u0026#34;./uploads/goods/20201113/483a3b8e99e534ec3e4312dbbaee7c9d.jpg\u0026#34;, \u0026#34;goods_small_logo\u0026#34;: \u0026#34;./uploads/goods/20201113/small_483a3b8e99e534ec3e4312dbbaee7c9d.jpg\u0026#34;, \u0026#34;goods_state\u0026#34;: 0, \u0026#34;is_del\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;add_time\u0026#34;: 1510045904, \u0026#34;upd_time\u0026#34;: 1512635159, \u0026#34;delete_time\u0026#34;: 1512635159, \u0026#34;hot_mumber\u0026#34;: 0, \u0026#34;is_promote\u0026#34;: false, \u0026#34;pics\u0026#34;: [ { \u0026#34;pics_id\u0026#34;: 383, \u0026#34;goods_id\u0026#34;: 96, \u0026#34;pics_big\u0026#34;: \u0026#34;uploads/goodspics/big_6f5750132abd3f5b2b93dd722fcde653.jpg\u0026#34;, \u0026#34;pics_mid\u0026#34;: \u0026#34;uploads/goodspics/mid_6f5750132abd3f5b2b93dd722fcde653.jpg\u0026#34;, \u0026#34;pics_sma\u0026#34;: \u0026#34;uploads/goodspics/sma_6f5750132abd3f5b2b93dd722fcde653.jpg\u0026#34; } ], \u0026#34;attrs\u0026#34;: [ { \u0026#34;goods_id\u0026#34;: 96, \u0026#34;attr_id\u0026#34;: 15, \u0026#34;attr_value\u0026#34;: \u0026#34;eee\u0026#34;, \u0026#34;add_price\u0026#34;: null, \u0026#34;attr_name\u0026#34;: \u0026#34;fffffff\u0026#34;, \u0026#34;attr_sel\u0026#34;: \u0026#34;many\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;\u0026#34; }, { \u0026#34;goods_id\u0026#34;: 96, \u0026#34;attr_id\u0026#34;: 15, \u0026#34;attr_value\u0026#34;: \u0026#34;ddd\u0026#34;, \u0026#34;add_price\u0026#34;: null, \u0026#34;attr_name\u0026#34;: \u0026#34;fffffff\u0026#34;, \u0026#34;attr_sel\u0026#34;: \u0026#34;many\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;\u0026#34; } ] }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;更新成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } ###同步商品属性\n请求路径：goods/:id/attributes\n请求方法：put\n请求参数\n参数名 参数说明 备注 id 商品 ID 不能为空携带在url中 请求数据 ;[ { attr_id: 15, attr_value: \u0026#39;ddd\u0026#39; }, { attr_id: 15, attr_value: \u0026#39;eee\u0026#39; } ] 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;goods_id\u0026#34;: 96, \u0026#34;goods_name\u0026#34;: \u0026#34;iphoneXX\u0026#34;, \u0026#34;goods_price\u0026#34;: 2, \u0026#34;goods_number\u0026#34;: 22, \u0026#34;goods_weight\u0026#34;: 22, \u0026#34;goods_introduce\u0026#34;: null, \u0026#34;goods_big_logo\u0026#34;: \u0026#34;./uploads/goods/20201113/483a3b8e99e534ec3e4312dbbaee7c9d.jpg\u0026#34;, \u0026#34;goods_small_logo\u0026#34;: \u0026#34;./uploads/goods/20201113/small_483a3b8e99e534ec3e4312dbbaee7c9d.jpg\u0026#34;, \u0026#34;goods_state\u0026#34;: 0, \u0026#34;is_del\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;add_time\u0026#34;: 1510045904, \u0026#34;upd_time\u0026#34;: 1512635159, \u0026#34;delete_time\u0026#34;: 1512635159, \u0026#34;hot_mumber\u0026#34;: 0, \u0026#34;is_promote\u0026#34;: false, \u0026#34;pics\u0026#34;: [ { \u0026#34;pics_id\u0026#34;: 383, \u0026#34;goods_id\u0026#34;: 96, \u0026#34;pics_big\u0026#34;: \u0026#34;uploads/goodspics/big_6f5750132abd3f5b2b93dd722fcde653.jpg\u0026#34;, \u0026#34;pics_mid\u0026#34;: \u0026#34;uploads/goodspics/mid_6f5750132abd3f5b2b93dd722fcde653.jpg\u0026#34;, \u0026#34;pics_sma\u0026#34;: \u0026#34;uploads/goodspics/sma_6f5750132abd3f5b2b93dd722fcde653.jpg\u0026#34; } ], \u0026#34;attrs\u0026#34;: [ { \u0026#34;goods_id\u0026#34;: 96, \u0026#34;attr_id\u0026#34;: 15, \u0026#34;attr_value\u0026#34;: \u0026#34;eee\u0026#34;, \u0026#34;add_price\u0026#34;: null, \u0026#34;attr_name\u0026#34;: \u0026#34;fffffff\u0026#34;, \u0026#34;attr_sel\u0026#34;: \u0026#34;many\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;\u0026#34; }, { \u0026#34;goods_id\u0026#34;: 96, \u0026#34;attr_id\u0026#34;: 15, \u0026#34;attr_value\u0026#34;: \u0026#34;ddd\u0026#34;, \u0026#34;add_price\u0026#34;: null, \u0026#34;attr_name\u0026#34;: \u0026#34;fffffff\u0026#34;, \u0026#34;attr_sel\u0026#34;: \u0026#34;many\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;\u0026#34; } ] }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;更新成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } ###商品图片处理必须安装 GraphicsMagick\nlinux apt-get install GraphicsMagick Mac OS X brew install GraphicsMagick Windows 点击下载 6. 图片上传 请求路径：upload\n请求方法：post\n请求参数\n参数名 参数说明 备注 file 上传文件 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;tmp_path\u0026#34;: \u0026#34;tmp_uploads/ccfc5179a914e94506bcbb7377e8985f.png\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;http://127.0.0.1:8888tmp_uploads/ccfc5179a914e94506bcbb7377e8985f.png\u0026#34; }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;上传成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 九、订单管理 1. 订单数据列表 请求路径：orders\n请求方法：get\n请求参数\n参数名 参数说明 备注 query 查询参数 可以为空 pagenum 当前页码 可以为空，默认为1 pagesize 每页显示条数 可以为空，省略时返回所有订单 user_id 用户 ID 可以为空 pay_status 支付状态 可以为空 is_send 是否发货 可以为空 order_fapiao_title [\u0026lsquo;个人\u0026rsquo;,\u0026lsquo;公司\u0026rsquo;] 可以为空 order_fapiao_company 公司名称 可以为空 order_fapiao_content 发票内容 可以为空 consignee_addr 收货地址 可以为空 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;total\u0026#34;: 1, \u0026#34;pagenum\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;goods\u0026#34;: [ { \u0026#34;order_id\u0026#34;: 47, \u0026#34;user_id\u0026#34;: 133, \u0026#34;order_number\u0026#34;: \u0026#34;59e7502d7993d\u0026#34;, \u0026#34;order_price\u0026#34;: 322, \u0026#34;order_pay\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;is_send\u0026#34;: \u0026#34;是\u0026#34;, \u0026#34;trade_no\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;order_fapiao_title\u0026#34;: \u0026#34;个人\u0026#34;, \u0026#34;order_fapiao_company\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;order_fapiao_content\u0026#34;: \u0026#34;办公用品\u0026#34;, \u0026#34;consignee_addr\u0026#34;: \u0026#34;江苏省南京市秦淮区龙蟠中路666号\u0026#34;, \u0026#34;pay_status\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;create_time\u0026#34;: 1508331565, \u0026#34;update_time\u0026#34;: 1508331565 } ] }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 2. 修改订单状态 请求路径：orders/:id\n请求方法：put\n请求参数\n参数名 参数说明 备注 id 订单 ID 不能为空携带在url中 is_send 订单是否发货 1:已经发货，0:未发货 order_pay 订单支付 支付方式 0 未支付 1 支付宝 2 微信 3 银行卡 order_price 订单价格 order_number 订单数量 pay_status 支付状态 订单状态： 0 未付款、1 已付款 请求数据说明\n所有请求数据都是增量更新，如果参数不填写，就不会更新该字段 响应数据\n{ \u0026#34;data\u0026#34;: { \u0026#34;order_id\u0026#34;: 67, \u0026#34;user_id\u0026#34;: 1, \u0026#34;order_number\u0026#34;: \u0026#34;itany-g7kmck71vjaujfgoi\u0026#34;, \u0026#34;order_price\u0026#34;: 20, \u0026#34;order_pay\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;is_send\u0026#34;: \u0026#34;否\u0026#34;, \u0026#34;trade_no\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;order_fapiao_title\u0026#34;: \u0026#34;个人\u0026#34;, \u0026#34;order_fapiao_company\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;order_fapiao_content\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;consignee_addr\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;pay_status\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;create_time\u0026#34;: 1512533560, \u0026#34;update_time\u0026#34;: 1512533560, \u0026#34;goods\u0026#34;: [ { \u0026#34;id\u0026#34;: 82, \u0026#34;order_id\u0026#34;: 67, \u0026#34;goods_id\u0026#34;: 96, \u0026#34;goods_price\u0026#34;: 333, \u0026#34;goods_number\u0026#34;: 2, \u0026#34;goods_total_price\u0026#34;: 999 }, { \u0026#34;id\u0026#34;: 83, \u0026#34;order_id\u0026#34;: 67, \u0026#34;goods_id\u0026#34;: 95, \u0026#34;goods_price\u0026#34;: 666, \u0026#34;goods_number\u0026#34;: 5, \u0026#34;goods_total_price\u0026#34;: 999 } ] }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 3. 查看订单详情 请求路径：orders/:id\n请求方法：get\n请求参数\n参数名 参数说明 备注 id 订单 ID 不能为空携带在url中 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;order_id\u0026#34;: 67, \u0026#34;user_id\u0026#34;: 1, \u0026#34;order_number\u0026#34;: \u0026#34;itany-g7kmck71vjaujfgoi\u0026#34;, \u0026#34;order_price\u0026#34;: 20, \u0026#34;order_pay\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;is_send\u0026#34;: \u0026#34;否\u0026#34;, \u0026#34;trade_no\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;order_fapiao_title\u0026#34;: \u0026#34;个人\u0026#34;, \u0026#34;order_fapiao_company\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;order_fapiao_content\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;consignee_addr\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;pay_status\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;create_time\u0026#34;: 1512533560, \u0026#34;update_time\u0026#34;: 1512533560, \u0026#34;goods\u0026#34;: [ { \u0026#34;id\u0026#34;: 82, \u0026#34;order_id\u0026#34;: 67, \u0026#34;goods_id\u0026#34;: 96, \u0026#34;goods_price\u0026#34;: 333, \u0026#34;goods_number\u0026#34;: 2, \u0026#34;goods_total_price\u0026#34;: 999 }, { \u0026#34;id\u0026#34;: 83, \u0026#34;order_id\u0026#34;: 67, \u0026#34;goods_id\u0026#34;: 95, \u0026#34;goods_price\u0026#34;: 666, \u0026#34;goods_number\u0026#34;: 5, \u0026#34;goods_total_price\u0026#34;: 999 } ] }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 4. 修改地址 请求路径：orders/:id/address\n请求方法：put\n请求参数\n参数名 参数说明 备注 id 订单 ID 不能为空携带在url中 consignee_addr 收货地址 可以为空 响应数据 { \u0026#34;data\u0026#34;: {}, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;修改地址成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 5. 查看物流信息 请求路径：/kuaidi/:id\n请求方法：get\n物流单号：815294206237577\n响应数据：\n{ \u0026#34;meta\u0026#34;:{ \u0026#34;status\u0026#34;:200, \u0026#34;message\u0026#34;:\u0026#34;获取物流信息成功！\u0026#34; }, \u0026#34;data\u0026#34;:[ { \u0026#34;time\u0026#34;:\u0026#34;2020-11-15 12:39:56\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-15 12:39:56\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;已签收,签收人是 汤小洋 先生/女士，如有疑问请联系派件员阿奇(13805148888)，如您未收到此快递，请拨打投诉电话：15294207777，感谢使用申通快递，期待再次为您服务\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-15 08:46:54\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-15 08:46:54\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;上海浦东寒亭营业厅-寒亭阿奇(13805148888)-派件中\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-15 08:38:57\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-15 08:38:57\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;已到达-上海浦东寒亭营业厅\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-15 06:38:13\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-15 06:38:13\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;已到达-上海浦东寒亭营业厅\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-14 20:56:45\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-14 20:56:45\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;上海浦东转运中心-已发往-上海浦东寒亭公司\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-14 20:52:44\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-14 20:52:44\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;已到达-上海浦东转运中心\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-14 17:43:48\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-14 17:43:48\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;已到达-上海浦东转运中心\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-14 10:53:46\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-14 10:53:46\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;上海浦东转运中心-已发往-上海浦东转运中心\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-14 10:43:31\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-14 10:43:31\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;已到达-上海浦东转运中心\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-14 02:43:20\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-14 02:43:20\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;江苏苏州转运中心-已发往-上海浦东转运中心\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-14 02:41:40\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-14 02:41:40\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;已到达-江苏苏州转运中心\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-13 16:28:13\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-13 16:28:13\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;江苏南京转运中心-已发往-江苏苏州转运中心\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-13 15:03:30\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-13 15:03:30\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;南京IT教育公司-已发往-江苏南京转运中心\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-13 14:47:56\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-13 14:47:56\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;南京IT教育公司-已发往-江苏南京转运中心\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-13 14:37:06\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-13 14:37:06\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;南京IT教育公司-城东汪小主宠物店-已收件\u0026#34;, \u0026#34;location\u0026#34;:null } ] } 一、API V2 接口说明 接口基准地址：http://www.tangxiaoyang.vip:8888/api/v2/\n服务端已开启 CORS 跨域支持\nAPI V2 认证统一使用 Token 认证\n需要授权的 API ，必须在请求头中使用 Authorization 字段提供 token 令牌\n使用 HTTP Status Code 标识状态\n数据返回格式统一使用 JSON\n1. 支持的请求方法 GET（SELECT）：从服务器取出资源（一项或多项）。\nPOST（CREATE）：在服务器新建一个资源。\nPUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。\nPATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。\nDELETE（DELETE）：从服务器删除资源。\nHEAD：获取资源的元数据。\nOPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的。\n2. 通用返回状态说明 状态码 含义 说明 200 OK 请求成功 201 CREATED 创建成功 204 DELETED 删除成功 400 BAD REQUEST 请求的地址不存在或者包含不支持的参数 401 UNAUTHORIZED 未授权 403 FORBIDDEN 被禁止访问 404 NOT FOUND 请求的资源不存在 422 Unprocesable entity [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误 500 INTERNAL SERVER ERROR 内部错误 二、登录 1. 登录验证接口 请求路径：login\n请求方法：post\n请求参数\n参数名 参数说明 备注 username 用户名 不能为空 password 密码 不能为空 响应参数 参数名 参数说明 备注 id 用户 ID rid 用户角色 ID username 用户名 mobile 手机号 email 邮箱 token 令牌 基于 jwt 的令牌 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;id\u0026#34;: 500, \u0026#34;rid\u0026#34;: 0, \u0026#34;username\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;mobile\u0026#34;: \u0026#34;123\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;123@qq.com\u0026#34;, \u0026#34;token\u0026#34;: \u0026#34;Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOjUwMCwicmlkIjowLCJpYXQiOjE1MTI1NDQyOTksImV4cCI6MTUxMjYzMDY5OX0.eGrsrvwHm-tPsO9r_pxHIQ5i5L1kX9RX444uwnRGaIM\u0026#34; }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;登录成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 三、用户管理 1. 用户数据列表 请求路径：users\n请求方法：get\n请求参数\n参数名 参数说明 备注 query 查询参数 可以为空 pagenum 当前页码 不能为空 pagesize 每页显示条数 不能为空 响应参数 参数名 参数说明 备注 total 总记录数 pagenum 当前页码 users 用户数据集合 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;total\u0026#34;: 5, \u0026#34;pagenum\u0026#34;: 1, \u0026#34;users\u0026#34;: [ { \u0026#34;id\u0026#34;: 25, \u0026#34;username\u0026#34;: \u0026#34;tom\u0026#34;, \u0026#34;mobile\u0026#34;: \u0026#34;13951783475\u0026#34;, \u0026#34;type\u0026#34;: 1, \u0026#34;email\u0026#34;: \u0026#34;1049901079@qq.com\u0026#34;, \u0026#34;create_time\u0026#34;: \u0026#34;2020-11-09T20:36:26.000Z\u0026#34;, \u0026#34;mg_state\u0026#34;: true, // 当前用户的状态 \u0026#34;role_name\u0026#34;: \u0026#34;超级管理员\u0026#34; } ] }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 2. 添加用户 请求路径：users\n请求方法：post\n请求参数\n参数名 参数说明 备注 username 用户名称 不能为空 password 用户密码 不能为空 email 邮箱 可以为空 mobile 手机号 可以为空 响应参数 参数名 参数说明 备注 id 用户 ID rid 用户角色 ID username 用户名 mobile 手机号 email 邮箱 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;id\u0026#34;: 28, \u0026#34;username\u0026#34;: \u0026#34;tom\u0026#34;, \u0026#34;mobile\u0026#34;: \u0026#34;test\u0026#34;, \u0026#34;type\u0026#34;: 1, \u0026#34;openid\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;test@test.com\u0026#34;, \u0026#34;create_time\u0026#34;: \u0026#34;2020-11-10T03:47:13.533Z\u0026#34;, \u0026#34;modify_time\u0026#34;: null, \u0026#34;is_delete\u0026#34;: false, \u0026#34;is_active\u0026#34;: false }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;用户创建成功\u0026#34;, \u0026#34;status\u0026#34;: 201 } } 3. 修改用户状态 请求路径：users/:uId/state/:type\n请求方法：put\n请求参数\n参数名 参数说明 备注 uId 用户 ID 不能为空携带在url中 type 用户状态 不能为空携带在url中，值为 true 或者 false 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;id\u0026#34;: 566, \u0026#34;rid\u0026#34;: 30, \u0026#34;username\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;mobile\u0026#34;: \u0026#34;123456\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;bb@itany.com\u0026#34;, \u0026#34;mg_state\u0026#34;: 0 }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;设置状态成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 4. 根据 ID 查询用户信息 请求路径：users/:id\n请求方法：get\n请求参数\n参数名 参数说明 备注 id 用户 ID 不能为空携带在url中 响应参数 参数名 参数说明 备注 id 用户 ID role_id 角色 ID mobile 手机号 email 邮箱 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;id\u0026#34;: 503, \u0026#34;username\u0026#34;: \u0026#34;admin3\u0026#34;, \u0026#34;role_id\u0026#34;: 0, \u0026#34;mobile\u0026#34;: \u0026#34;00000\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;new@new.com\u0026#34; }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;查询成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 5. 编辑提交用户 请求路径：users/:id\n请求方法：put\n请求参数\n参数名 参数说明 备注 id 用户 id 不能为空 参数是url参数:id email 邮箱 可以为空 mobile 手机号 可以为空 响应参数 参数名 参数说明 备注 id 用户 ID role_id 角色 ID mobile 手机号 email 邮箱 响应数据 /* 200表示成功，500表示失败 */ { \u0026#34;data\u0026#34;: { \u0026#34;id\u0026#34;: 503, \u0026#34;username\u0026#34;: \u0026#34;admin3\u0026#34;, \u0026#34;role_id\u0026#34;: 0, \u0026#34;mobile\u0026#34;: \u0026#34;111\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;123@123.com\u0026#34; }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;更新成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 6. 删除单个用户 请求路径：users/:id\n请求方法：delete\n请求参数\n参数名 参数说明 备注 id 用户 id 不能为空参数是url参数:id 响应参数\n响应数据\n{ \u0026#34;data\u0026#34;: null, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;删除成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 7. 分配用户角色 请求路径：users/:id/role\n请求方法：put\n请求参数\n参数名 参数说明 备注 id 用户 ID 不能为空参数是url参数:id rid 角色 id 不能为空参数body参数 响应参数 参数名 参数说明 备注 id 用户 ID role_id 角色 ID mobile 手机号 email 邮箱 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;id\u0026#34;: 508, \u0026#34;rid\u0026#34;: \u0026#34;30\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;asdf1\u0026#34;, \u0026#34;mobile\u0026#34;: \u0026#34;123123\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;adfsa@qq.com\u0026#34; }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;设置角色成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 四、权限管理 1. 所有权限列表 请求路径：rights/:type\n请求方法：get\n请求参数\n参数名 参数说明 备注 type 类型 值 list 或 tree , list 列表显示权限, tree 树状显示权限,参数是url参数:type 响应参数 参数名 参数说明 备注 id 权限 ID authName 权限说明 level 权限层级 pid 权限父 ID path 对应访问路径 响应数据 type=list { \u0026#34;data\u0026#34;: [ { \u0026#34;id\u0026#34;: 101, \u0026#34;authName\u0026#34;: \u0026#34;商品管理\u0026#34;, \u0026#34;level\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;pid\u0026#34;: 0, \u0026#34;path\u0026#34;: null }, { \u0026#34;id\u0026#34;: 102, \u0026#34;authName\u0026#34;: \u0026#34;订单管理\u0026#34;, \u0026#34;level\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;pid\u0026#34;: 0, \u0026#34;path\u0026#34;: null } ], \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取权限列表成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } type=tree\n{ data: [ { id: 101, authName: \u0026#39;商品管理\u0026#39;, path: null, pid: 0, children: [ { id: 104, authName: \u0026#39;商品列表\u0026#39;, path: null, pid: 101, children: [ { id: 105, authName: \u0026#39;添加商品\u0026#39;, path: null, pid: \u0026#39;104,101\u0026#39; } ] } ] } ], meta: { msg: \u0026#39;获取权限列表成功\u0026#39;, status: 200 } } 2. 左侧菜单权限 请求路径：menus\n请求方法：get\n响应数据\n{ \u0026#34;data\u0026#34;: { \u0026#34;id\u0026#34;: 101, \u0026#34;authName\u0026#34;: \u0026#34;商品管理\u0026#34;, \u0026#34;path\u0026#34;: null, \u0026#34;children\u0026#34;: [ { \u0026#34;id\u0026#34;: 104, \u0026#34;authName\u0026#34;: \u0026#34;商品列表\u0026#34;, \u0026#34;path\u0026#34;: null, \u0026#34;children\u0026#34;: [] } ] } \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取菜单列表成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 五、角色管理 1. 角色列表 请求路径：roles\n请求方法：get\n响应数据说明\n第一层为角色信息\n第二层开始为权限说明，权限一共有 3 层权限\n最后一层权限，不包含 children 属性\n响应数据\n{ \u0026#34;data\u0026#34;: [ { \u0026#34;id\u0026#34;: 30, \u0026#34;roleName\u0026#34;: \u0026#34;主管\u0026#34;, \u0026#34;roleDesc\u0026#34;: \u0026#34;技术负责人\u0026#34;, \u0026#34;children\u0026#34;: [ { \u0026#34;id\u0026#34;: 101, \u0026#34;authName\u0026#34;: \u0026#34;商品管理\u0026#34;, \u0026#34;path\u0026#34;: null, \u0026#34;children\u0026#34;: [ { \u0026#34;id\u0026#34;: 104, \u0026#34;authName\u0026#34;: \u0026#34;商品列表\u0026#34;, \u0026#34;path\u0026#34;: null, \u0026#34;children\u0026#34;: [ { \u0026#34;id\u0026#34;: 105, \u0026#34;authName\u0026#34;: \u0026#34;添加商品\u0026#34;, \u0026#34;path\u0026#34;: null } ] } ] } ] } ], \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 2. 添加角色 请求路径：roles\n请求方法：post\n请求参数\n参数名 参数说明 备注 roleName 角色名称 不能为空 roleDesc 角色描述 可以为空 响应参数 参数名 参数说明 备注 roleId 角色 ID roleName 角色名称 roleDesc 角色描述 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;roleId\u0026#34;: 40, \u0026#34;roleName\u0026#34;: \u0026#34;admin2\u0026#34;, \u0026#34;roleDesc\u0026#34;: \u0026#34;admin2Desc\u0026#34; }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;创建成功\u0026#34;, \u0026#34;status\u0026#34;: 201 } } 3. 根据 ID 查询角色 请求路径：roles/:id\n请求方法：get\n请求参数\n参数名 参数说明 备注 :id 角色 ID 不能为空携带在url中 响应参数 参数名 参数说明 备注 roleId 角色 ID roleName 角色名称 roleDesc 角色描述 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;roleId\u0026#34;: 31, \u0026#34;roleName\u0026#34;: \u0026#34;测试角色\u0026#34;, \u0026#34;roleDesc\u0026#34;: \u0026#34;测试负责人\u0026#34; }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 4. 编辑提交角色 请求路径：roles/:id\n请求方法：put\n请求参数\n参数名 参数说明 备注 :id 角色 ID 不能为空携带在url中 roleName 角色名称 不能为空 roleDesc 角色描述 可以为空 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;roleId\u0026#34;: 31, \u0026#34;roleName\u0026#34;: \u0026#34;测试角色\u0026#34;, \u0026#34;roleDesc\u0026#34;: \u0026#34;测试角色描述\u0026#34; }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 5. 删除角色 请求路径：roles/:id\n请求方法：delete\n请求参数\n参数名 参数说明 备注 :id 角色 ID 不能为空携带在url中 响应数据 { \u0026#34;data\u0026#34;: null, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;删除成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 6. 角色授权 请求路径：roles/:roleId/rights\n请求方法：post\n请求参数：通过 请求体 发送给后端\n参数名 参数说明 备注 :roleId 角色 ID 不能为空携带在url中 rids 权限 ID 列表（字符串） 以 , 分割的权限 ID 列表（获取所有被选中、叶子节点的key和半选中节点的key, 包括 1，2，3级节点） 响应数据 { \u0026#34;data\u0026#34;: null, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;更新成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 7. 删除角色指定权限 请求路径：roles/:roleId/rights/:rightId\n请求方法：delete\n请求参数 参数名 参数说明 备注 :roleId 角色 ID 不能为空携带在url中 :rightId 权限 ID 不能为空携带在url中\n响应数据说明\n返回的data, 是当前角色下最新的权限数据 响应数据\n{ \u0026#34;data\u0026#34;: [ { \u0026#34;id\u0026#34;: 101, \u0026#34;authName\u0026#34;: \u0026#34;商品管理\u0026#34;, \u0026#34;path\u0026#34;: null, \u0026#34;children\u0026#34;: [ { \u0026#34;id\u0026#34;: 104, \u0026#34;authName\u0026#34;: \u0026#34;商品列表\u0026#34;, \u0026#34;path\u0026#34;: null, \u0026#34;children\u0026#34;: [ { \u0026#34;id\u0026#34;: 105, \u0026#34;authName\u0026#34;: \u0026#34;添加商品\u0026#34;, \u0026#34;path\u0026#34;: null }, { \u0026#34;id\u0026#34;: 116, \u0026#34;authName\u0026#34;: \u0026#34;修改\u0026#34;, \u0026#34;path\u0026#34;: null } ] } ] } ], \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;取消权限成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 六、商品分类管理 1. 商品分类数据列表 请求路径：categories\n请求方法：get\n请求参数\n参数名 参数说明 备注 type [1,2,3] 值：1，2，3 分别表示显示一层二层三层分类列表 【可选参数】如果不传递，则默认获取所有级别的分类 pagenum 当前页码值 【可选参数】如果不传递，则默认获取所有分类 pagesize 每页显示多少条数据 【可选参数】如果不传递，则默认获取所有分类 响应参数 参数名 参数说明 备注 cat_id 分类 ID cat_name 分类名称 cat_pid 分类父 ID cat_level 分类当前层级 响应数据 { \u0026#34;data\u0026#34;: [ { \u0026#34;cat_id\u0026#34;: 1, \u0026#34;cat_name\u0026#34;: \u0026#34;大家电\u0026#34;, \u0026#34;cat_pid\u0026#34;: 0, \u0026#34;cat_level\u0026#34;: 0, \u0026#34;cat_deleted\u0026#34;: false, \u0026#34;children\u0026#34;: [ { \u0026#34;cat_id\u0026#34;: 3, \u0026#34;cat_name\u0026#34;: \u0026#34;电视\u0026#34;, \u0026#34;cat_pid\u0026#34;: 1, \u0026#34;cat_level\u0026#34;: 1, \u0026#34;cat_deleted\u0026#34;: false, \u0026#34;children\u0026#34;: [ { \u0026#34;cat_id\u0026#34;: 6, \u0026#34;cat_name\u0026#34;: \u0026#34;曲面电视\u0026#34;, \u0026#34;cat_pid\u0026#34;: 3, \u0026#34;cat_level\u0026#34;: 2, \u0026#34;cat_deleted\u0026#34;: false }, { \u0026#34;cat_id\u0026#34;: 7, \u0026#34;cat_name\u0026#34;: \u0026#34;海信\u0026#34;, \u0026#34;cat_pid\u0026#34;: 3, \u0026#34;cat_level\u0026#34;: 2, \u0026#34;cat_deleted\u0026#34;: false } ] } ] } ], \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 2. 添加分类 请求路径：categories\n请求方法：post\n请求参数\n参数名 参数说明 备注 cat_pid 分类父 ID 不能为空，如果要添加一级分类，则父分类Id应该设置为 0 cat_name 分类名称 不能为空 cat_level 分类层级 不能为空，0表示一级分类；1表示二级分类；2表示三级分类 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;cat_id\u0026#34;: 62, \u0026#34;cat_name\u0026#34;: \u0026#34;相框\u0026#34;, \u0026#34;cat_pid\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;cat_level\u0026#34;: \u0026#34;1\u0026#34; }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;创建成功\u0026#34;, \u0026#34;status\u0026#34;: 201 } } 3. 根据 id 查询分类 请求路径：categories/:id\n请求方法：get\n请求参数\n参数名 参数说明 备注 :id 分类 ID 不能为空携带在url中 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;cat_id\u0026#34;: 3, \u0026#34;cat_name\u0026#34;: \u0026#34;厨卫电器\u0026#34;, \u0026#34;cat_pid\u0026#34;: 0, \u0026#34;cat_level\u0026#34;: 0 }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 4. 编辑提交分类 请求路径：categories/:id\n请求方法：put\n请求参数\n参数名 参数说明 备注 :id 分类 ID 不能为空携带在url中 cat_name 分类名称 不能为空【此参数，放到请求体中】 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;cat_id\u0026#34;: 22, \u0026#34;cat_name\u0026#34;: \u0026#34;自拍杆\u0026#34;, \u0026#34;cat_pid\u0026#34;: 7, \u0026#34;cat_level\u0026#34;: 2 }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;更新成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 5. 删除分类 请求路径：categories/:id\n请求方法：delete\n请求参数\n参数名 参数说明 备注 :id 分类 ID 不能为空携带在url中 响应数据 { \u0026#34;data\u0026#34;: null, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;删除成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 七、分类参数管理 1. 参数列表 请求路径：categories/:id/attributes\n请求方法：get\n请求参数\n参数名 参数说明 备注 :id 分类 ID 不能为空携带在url中 sel many或only 不能为空，many表示动态参数，only表示静态参数（也称为静态属性） 响应参数 参数名 参数说明 备注 attr_id 分类参数 ID attr_name 分类参数名称 cat_id 分类参数所属分类 attr_sel 分类参数的类型，many表示动态参数，only表示静态属性 attr_write list表示从列表选择（动态参数），manual表示手工录入（静态属性） attr_vals 分类参数的明细，如果是动态参数，则该值是以空格分隔的字符串 响应数据 { \u0026#34;data\u0026#34;: [ { \u0026#34;attr_id\u0026#34;: 1, \u0026#34;attr_name\u0026#34;: \u0026#34;cpu\u0026#34;, \u0026#34;cat_id\u0026#34;: 22, \u0026#34;attr_sel\u0026#34;: \u0026#34;many\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;4K高清 5K高清 6K高清\u0026#34; } ], \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 2. 添加动态参数或静态属性 请求路径：categories/:id/attributes\n请求方法：post\n请求参数\n参数名 参数说明 备注 :id 分类 ID 不能为空携带在url中 attr_name 参数名称 不能为空 attr_sel many或only 不能为空 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;attr_id\u0026#34;: 44, \u0026#34;attr_name\u0026#34;: \u0026#34;测试参数\u0026#34;, \u0026#34;cat_id\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;attr_sel\u0026#34;: \u0026#34;many\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;a,b,c\u0026#34; }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;创建成功\u0026#34;, \u0026#34;status\u0026#34;: 201 } } 3. 根据 ID 查询参数 请求路径：categories/:id/attributes/:attrId\n请求方法：get\n请求参数\n参数名 参数说明 备注 :id 分类 ID 不能为空携带在url中 :attrId 属性 ID 不能为空携带在url中 attr_sel many或only 不能为空 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;attr_id\u0026#34;: 1, \u0026#34;attr_name\u0026#34;: \u0026#34;cpu\u0026#34;, \u0026#34;cat_id\u0026#34;: 22, \u0026#34;attr_sel\u0026#34;: \u0026#34;only\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;manual\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;ffff\u0026#34; }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 4. 更新参数及明细 请求路径：categories/:id/attributes/:attrId\n请求方法：put\n请求参数\n参数名 参数说明 备注 :id 分类 ID 不能为空携带在url中 :attrId 参数 ID 不能为空携带在url中 attr_name 参数名称 不能为空，携带在请求体中 attr_sel many或only 不能为空，携带在请求体中 attr_vals 参数的明细 可选参数，携带在请求体中 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;attr_id\u0026#34;: 9, \u0026#34;attr_name\u0026#34;: \u0026#34;测试更新\u0026#34;, \u0026#34;cat_id\u0026#34;: \u0026#34;43\u0026#34;, \u0026#34;attr_sel\u0026#34;: \u0026#34;only\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;manual\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;abc\u0026#34; }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;更新成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 5. 删除参数 请求路径： categories/:id/attributes/:attrid\n请求方法：delete\n请求参数\n参数名 参数说明 备注 :id 分类 ID 不能为空携带在url中 :attrid 参数 ID 不能为空携带在url中 响应数据 { \u0026#34;data\u0026#34;: null, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;删除成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 八、商品管理 1. 商品列表数据 请求路径：goods\n请求方法：get\n请求参数\n参数名 参数说明 备注 query 查询参数 可以为空 pagenum 当前页码 不能为空 pagesize 每页显示条数 不能为空 响应参数 参数名 参数说明 备注 total 总共商品条数 pagenum 当前商品页数 goods_id 商品 ID goods_name 商品名称 goods_price 价格 goods_number 数量 goods_weight 重量 不能为空 goods_state 商品状态 商品状态 0: 未通过 1: 审核中 2: 已审核 add_time 添加时间 upd_time 更新时间 hot_mumber 热销品数量 is_promote 是否是热销品 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;total\u0026#34;: 50, \u0026#34;pagenum\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;goods\u0026#34;: [ { \u0026#34;goods_id\u0026#34;: 144, \u0026#34;goods_name\u0026#34;: \u0026#34;iphone\u0026#34;, \u0026#34;goods_price\u0026#34;: 1, \u0026#34;goods_number\u0026#34;: 1, \u0026#34;goods_weight\u0026#34;: 1, \u0026#34;goods_state\u0026#34;: null, \u0026#34;add_time\u0026#34;: 1512954923, \u0026#34;upd_time\u0026#34;: 1512954923, \u0026#34;hot_mumber\u0026#34;: 0, \u0026#34;is_promote\u0026#34;: false } ] }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 2. 添加商品 请求路径：goods\n请求方法：post\n请求参数\n参数名 参数说明 备注 goods_name 商品名称 不能为空 goods_cat 以,逗号分割的分类列表 不能为空 goods_price 价格 不能为空 goods_number 数量 不能为空 goods_weight 重量 不能为空 goods_introduce 介绍 可以为空 pics 上传的图片临时路径（对象） 可以为空 attrs 商品的参数（数组），包含 动态参数 和 静态属性 可以为空 请求数据 { \u0026#34;goods_name\u0026#34;:\u0026#34;test_goods_name2\u0026#34;, \u0026#34;goods_cat\u0026#34;: \u0026#34;1,2,3\u0026#34;, \u0026#34;goods_price\u0026#34;:20, \u0026#34;goods_number\u0026#34;:30, \u0026#34;goods_weight\u0026#34;:40, \u0026#34;goods_introduce\u0026#34;:\u0026#34;abc\u0026#34;, \u0026#34;pics\u0026#34;:[ {\u0026#34;pic\u0026#34;:\u0026#34;/tmp_uploads/30f08d52c551ecb447277eae232304b8\u0026#34;} ], \u0026#34;attrs\u0026#34;:[ { \u0026#34;attr_id\u0026#34;:15, \u0026#34;attr_value\u0026#34;:\u0026#34;ddd\u0026#34; }, { \u0026#34;attr_id\u0026#34;:15, \u0026#34;attr_value\u0026#34;:\u0026#34;eee\u0026#34; } ] } 响应参数 参数名 参数说明 备注 total 总共商品条数 pagenum 当前商品页数 goods_id 商品 ID goods_cat 以为\u0026rsquo;,\u0026lsquo;分割的分类列表 goods_name 商品名称 goods_price 价格 goods_number 数量 goods_weight 重量 不能为空 goods_state 商品状态 商品状态 0: 未通过 1: 审核中 2: 已审核 add_time 添加时间 upd_time 更新时间 hot_mumber 热销品数量 is_promote 是否是热销品 pics 上传的图片临时路径（对象） pics_id:图片 ID,goods_id:商品 ID,pics_big:大图,pics_mid:中图,pics_sma:小图 attrs 商品的参数（数组） goods_id:商品 ID,attr_value:当前商品的参数值,add_price:浮动价格,attr_vals:预定义的参数值,attr_sel:手动输入，还是单选 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;goods_id\u0026#34;: 145, \u0026#34;goods_name\u0026#34;: \u0026#34;test_goods_name2\u0026#34;, \u0026#34;goods_price\u0026#34;: 20, \u0026#34;cat_id\u0026#34;: 1, \u0026#34;goods_number\u0026#34;: 30, \u0026#34;goods_weight\u0026#34;: 40, \u0026#34;goods_introduce\u0026#34;: \u0026#34;abc\u0026#34;, \u0026#34;goods_big_logo\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;goods_small_logo\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;goods_state\u0026#34;: 1, \u0026#34;add_time\u0026#34;: 1512962370, \u0026#34;upd_time\u0026#34;: 1512962370, \u0026#34;hot_mumber\u0026#34;: 0, \u0026#34;is_promote\u0026#34;: false, \u0026#34;pics\u0026#34;: [ { \u0026#34;pics_id\u0026#34;: 397, \u0026#34;goods_id\u0026#34;: 145, \u0026#34;pics_big\u0026#34;: \u0026#34;uploads/goodspics/big_30f08d52c551ecb447277eae232304b8\u0026#34;, \u0026#34;pics_mid\u0026#34;: \u0026#34;uploads/goodspics/mid_30f08d52c551ecb447277eae232304b8\u0026#34;, \u0026#34;pics_sma\u0026#34;: \u0026#34;uploads/goodspics/sma_30f08d52c551ecb447277eae232304b8\u0026#34; } ], \u0026#34;attrs\u0026#34;: [ { \u0026#34;goods_id\u0026#34;: 145, \u0026#34;attr_id\u0026#34;: 15, \u0026#34;attr_value\u0026#34;: \u0026#34;ddd\u0026#34;, \u0026#34;add_price\u0026#34;: null, \u0026#34;attr_name\u0026#34;: \u0026#34;fffffff\u0026#34;, \u0026#34;attr_sel\u0026#34;: \u0026#34;many\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;\u0026#34; }, { \u0026#34;goods_id\u0026#34;: 145, \u0026#34;attr_id\u0026#34;: 15, \u0026#34;attr_value\u0026#34;: \u0026#34;eee\u0026#34;, \u0026#34;add_price\u0026#34;: null, \u0026#34;attr_name\u0026#34;: \u0026#34;fffffff\u0026#34;, \u0026#34;attr_sel\u0026#34;: \u0026#34;many\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;\u0026#34; } ] }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;创建商品成功\u0026#34;, \u0026#34;status\u0026#34;: 201 } } 3. 根据 ID 查询商品 请求路径：goods/:id\n请求方法：get\n请求参数\n参数名 参数说明 备注 id 商品 ID 不能为空携带在url中 响应参数 参数名 参数说明 备注 goods_id 商品 ID goods_name 商品名称 goods_price 价格 goods_number 数量 goods_weight 重量 不能为空 goods_state 商品状态 商品状态 0: 未通过 1: 审核中 2: 已审核 goods_introduce 介绍 goods_cat 以为\u0026rsquo;,\u0026lsquo;分割的分类列表 add_time 添加时间 upd_time 更新时间 hot_mumber 热销品数量 is_promote 是否是热销品 pics 上传的图片临时路径（对象） pics_id:图片 ID,goods_id:商品 ID,pics_big:大图,pics_mid:中图,pics_sma:小图 attrs 商品的参数（数组） goods_id:商品 ID,attr_value:当前商品的参数值,add_price:浮动价格,attr_vals:预定义的参数值,attr_sel:手动输入，还是单选 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;goods_id\u0026#34;: 145, \u0026#34;goods_name\u0026#34;: \u0026#34;test_goods_name2\u0026#34;, \u0026#34;goods_price\u0026#34;: 20, \u0026#34;goods_number\u0026#34;: 30, \u0026#34;goods_weight\u0026#34;: 40, \u0026#34;goods_introduce\u0026#34;: \u0026#34;abc\u0026#34;, \u0026#34;goods_big_logo\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;goods_small_logo\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;goods_state\u0026#34;: 1, \u0026#34;add_time\u0026#34;: 1512962370, \u0026#34;upd_time\u0026#34;: 1512962370, \u0026#34;hot_mumber\u0026#34;: 0, \u0026#34;is_promote\u0026#34;: false, \u0026#34;pics\u0026#34;: [ { \u0026#34;pics_id\u0026#34;: 397, \u0026#34;goods_id\u0026#34;: 145, \u0026#34;pics_big\u0026#34;: \u0026#34;uploads/goodspics/big_30f08d52c551ecb447277eae232304b8\u0026#34;, \u0026#34;pics_mid\u0026#34;: \u0026#34;uploads/goodspics/mid_30f08d52c551ecb447277eae232304b8\u0026#34;, \u0026#34;pics_sma\u0026#34;: \u0026#34;uploads/goodspics/sma_30f08d52c551ecb447277eae232304b8\u0026#34; } ], \u0026#34;attrs\u0026#34;: [ { \u0026#34;goods_id\u0026#34;: 145, \u0026#34;attr_id\u0026#34;: 15, \u0026#34;attr_value\u0026#34;: \u0026#34;ddd\u0026#34;, \u0026#34;add_price\u0026#34;: null, \u0026#34;attr_name\u0026#34;: \u0026#34;fffffff\u0026#34;, \u0026#34;attr_sel\u0026#34;: \u0026#34;many\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;\u0026#34; }, { \u0026#34;goods_id\u0026#34;: 145, \u0026#34;attr_id\u0026#34;: 15, \u0026#34;attr_value\u0026#34;: \u0026#34;eee\u0026#34;, \u0026#34;add_price\u0026#34;: null, \u0026#34;attr_name\u0026#34;: \u0026#34;fffffff\u0026#34;, \u0026#34;attr_sel\u0026#34;: \u0026#34;many\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;\u0026#34; } ] }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 4. 编辑提交商品 请求路径：goods/:id\n请求方法：put\n请求参数\n参数名 参数说明 备注 id 商品 ID 不能为空携带在url中 goods_name 商品名称 不能为空 goods_cat 以为\u0026rsquo;,\u0026lsquo;分割的分类列表 不能为空 goods_price 价格 不能为空 goods_number 数量 不能为空 goods_weight 重量 不能为空 goods_introduce 介绍 可以为空 pics 上传的图片临时路径（对象） 可以为空 attrs 商品的参数（数组） 可以为空 请求数据 { \u0026#34;goods_name\u0026#34;:\u0026#34;test_goods_name2\u0026#34;, \u0026#34;goods_price\u0026#34;:20, \u0026#34;goods_number\u0026#34;:30, \u0026#34;goods_weight\u0026#34;:40, \u0026#34;goods_introduce\u0026#34;:\u0026#34;abc\u0026#34;, \u0026#34;pics\u0026#34;:[ {\u0026#34;pic\u0026#34;:\u0026#34;/tmp_uploads/30f08d52c551ecb447277eae232304b8\u0026#34;} ], \u0026#34;attrs\u0026#34;:[ { \u0026#34;attr_id\u0026#34;:15, \u0026#34;attr_value\u0026#34;:\u0026#34;ddd\u0026#34; }, { \u0026#34;attr_id\u0026#34;:15, \u0026#34;attr_value\u0026#34;:\u0026#34;eee\u0026#34; } ] } 响应参数 参数名 参数说明 备注 total 总共商品条数 pagenum 当前商品页数 goods_id 商品 ID goods_name 商品名称 goods_price 价格 goods_number 数量 goods_weight 重量 不能为空 goods_state 商品状态 商品状态 0: 未通过 1: 审核中 2: 已审核 add_time 添加时间 upd_time 更新时间 hot_mumber 热销品数量 is_promote 是否是热销品 pics 上传的图片临时路径（对象） pics_id:图片 ID,goods_id:商品 ID,pics_big:大图,pics_mid:中图,pics_sma:小图 attrs 商品的参数（数组） goods_id:商品 ID,attr_value:当前商品的参数值,add_price:浮动价格,attr_vals:预定义的参数值,attr_sel:手动输入，还是单选, 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;goods_id\u0026#34;: 145, \u0026#34;goods_name\u0026#34;: \u0026#34;test_goods_name2\u0026#34;, \u0026#34;goods_price\u0026#34;: 20, \u0026#34;goods_number\u0026#34;: 30, \u0026#34;goods_weight\u0026#34;: 40, \u0026#34;goods_introduce\u0026#34;: \u0026#34;abc\u0026#34;, \u0026#34;goods_big_logo\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;goods_small_logo\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;goods_state\u0026#34;: 1, \u0026#34;add_time\u0026#34;: 1512962370, \u0026#34;upd_time\u0026#34;: 1512962370, \u0026#34;hot_mumber\u0026#34;: 0, \u0026#34;is_promote\u0026#34;: false, \u0026#34;pics\u0026#34;: [ { \u0026#34;pics_id\u0026#34;: 397, \u0026#34;goods_id\u0026#34;: 145, \u0026#34;pics_big\u0026#34;: \u0026#34;uploads/goodspics/big_30f08d52c551ecb447277eae232304b8\u0026#34;, \u0026#34;pics_mid\u0026#34;: \u0026#34;uploads/goodspics/mid_30f08d52c551ecb447277eae232304b8\u0026#34;, \u0026#34;pics_sma\u0026#34;: \u0026#34;uploads/goodspics/sma_30f08d52c551ecb447277eae232304b8\u0026#34; } ], \u0026#34;attrs\u0026#34;: [ { \u0026#34;goods_id\u0026#34;: 145, \u0026#34;attr_id\u0026#34;: 15, \u0026#34;attr_value\u0026#34;: \u0026#34;ddd\u0026#34;, \u0026#34;add_price\u0026#34;: null, \u0026#34;attr_name\u0026#34;: \u0026#34;fffffff\u0026#34;, \u0026#34;attr_sel\u0026#34;: \u0026#34;many\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;\u0026#34; }, { \u0026#34;goods_id\u0026#34;: 145, \u0026#34;attr_id\u0026#34;: 15, \u0026#34;attr_value\u0026#34;: \u0026#34;eee\u0026#34;, \u0026#34;add_price\u0026#34;: null, \u0026#34;attr_name\u0026#34;: \u0026#34;fffffff\u0026#34;, \u0026#34;attr_sel\u0026#34;: \u0026#34;many\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;\u0026#34; } ] }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;更新商品成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 5. 删除商品 请求路径：goods/:id\n请求方法：delete\n请求参数\n参数名 参数说明 备注 id 商品 ID 不能为空携带在url中 响应数据 { \u0026#34;data\u0026#34;: null, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;删除成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } ###同步商品图片\n请求路径：goods/:id/pics\n请求方法：put\n请求参数\n参数名 参数说明 备注 id 商品 ID 不能为空携带在url中 pics 商品图片集合 如果有 pics_id 字段会保留该图片，如果没有 pics_id 但是有 pic 字段就会新生成图片数据 请求数据 ;[ { pic: \u0026#39;tmp_uploads/db28f6316835836e97653b5c75e418be.png\u0026#39; }, { pics_id: 397, goods_id: 145, pics_big: \u0026#39;uploads/goodspics/big_30f08d52c551ecb447277eae232304b8\u0026#39;, pics_mid: \u0026#39;uploads/goodspics/mid_30f08d52c551ecb447277eae232304b8\u0026#39;, pics_sma: \u0026#39;uploads/goodspics/sma_30f08d52c551ecb447277eae232304b8\u0026#39; } ] 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;goods_id\u0026#34;: 96, \u0026#34;goods_name\u0026#34;: \u0026#34;iphoneXX\u0026#34;, \u0026#34;goods_price\u0026#34;: 2, \u0026#34;goods_number\u0026#34;: 22, \u0026#34;goods_weight\u0026#34;: 22, \u0026#34;goods_introduce\u0026#34;: null, \u0026#34;goods_big_logo\u0026#34;: \u0026#34;./uploads/goods/20201113/483a3b8e99e534ec3e4312dbbaee7c9d.jpg\u0026#34;, \u0026#34;goods_small_logo\u0026#34;: \u0026#34;./uploads/goods/20201113/small_483a3b8e99e534ec3e4312dbbaee7c9d.jpg\u0026#34;, \u0026#34;goods_state\u0026#34;: 0, \u0026#34;is_del\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;add_time\u0026#34;: 1510045904, \u0026#34;upd_time\u0026#34;: 1512635159, \u0026#34;delete_time\u0026#34;: 1512635159, \u0026#34;hot_mumber\u0026#34;: 0, \u0026#34;is_promote\u0026#34;: false, \u0026#34;pics\u0026#34;: [ { \u0026#34;pics_id\u0026#34;: 383, \u0026#34;goods_id\u0026#34;: 96, \u0026#34;pics_big\u0026#34;: \u0026#34;uploads/goodspics/big_6f5750132abd3f5b2b93dd722fcde653.jpg\u0026#34;, \u0026#34;pics_mid\u0026#34;: \u0026#34;uploads/goodspics/mid_6f5750132abd3f5b2b93dd722fcde653.jpg\u0026#34;, \u0026#34;pics_sma\u0026#34;: \u0026#34;uploads/goodspics/sma_6f5750132abd3f5b2b93dd722fcde653.jpg\u0026#34; } ], \u0026#34;attrs\u0026#34;: [ { \u0026#34;goods_id\u0026#34;: 96, \u0026#34;attr_id\u0026#34;: 15, \u0026#34;attr_value\u0026#34;: \u0026#34;eee\u0026#34;, \u0026#34;add_price\u0026#34;: null, \u0026#34;attr_name\u0026#34;: \u0026#34;fffffff\u0026#34;, \u0026#34;attr_sel\u0026#34;: \u0026#34;many\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;\u0026#34; }, { \u0026#34;goods_id\u0026#34;: 96, \u0026#34;attr_id\u0026#34;: 15, \u0026#34;attr_value\u0026#34;: \u0026#34;ddd\u0026#34;, \u0026#34;add_price\u0026#34;: null, \u0026#34;attr_name\u0026#34;: \u0026#34;fffffff\u0026#34;, \u0026#34;attr_sel\u0026#34;: \u0026#34;many\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;\u0026#34; } ] }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;更新成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } ###同步商品属性\n请求路径：goods/:id/attributes\n请求方法：put\n请求参数\n参数名 参数说明 备注 id 商品 ID 不能为空携带在url中 请求数据 ;[ { attr_id: 15, attr_value: \u0026#39;ddd\u0026#39; }, { attr_id: 15, attr_value: \u0026#39;eee\u0026#39; } ] 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;goods_id\u0026#34;: 96, \u0026#34;goods_name\u0026#34;: \u0026#34;iphoneXX\u0026#34;, \u0026#34;goods_price\u0026#34;: 2, \u0026#34;goods_number\u0026#34;: 22, \u0026#34;goods_weight\u0026#34;: 22, \u0026#34;goods_introduce\u0026#34;: null, \u0026#34;goods_big_logo\u0026#34;: \u0026#34;./uploads/goods/20201113/483a3b8e99e534ec3e4312dbbaee7c9d.jpg\u0026#34;, \u0026#34;goods_small_logo\u0026#34;: \u0026#34;./uploads/goods/20201113/small_483a3b8e99e534ec3e4312dbbaee7c9d.jpg\u0026#34;, \u0026#34;goods_state\u0026#34;: 0, \u0026#34;is_del\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;add_time\u0026#34;: 1510045904, \u0026#34;upd_time\u0026#34;: 1512635159, \u0026#34;delete_time\u0026#34;: 1512635159, \u0026#34;hot_mumber\u0026#34;: 0, \u0026#34;is_promote\u0026#34;: false, \u0026#34;pics\u0026#34;: [ { \u0026#34;pics_id\u0026#34;: 383, \u0026#34;goods_id\u0026#34;: 96, \u0026#34;pics_big\u0026#34;: \u0026#34;uploads/goodspics/big_6f5750132abd3f5b2b93dd722fcde653.jpg\u0026#34;, \u0026#34;pics_mid\u0026#34;: \u0026#34;uploads/goodspics/mid_6f5750132abd3f5b2b93dd722fcde653.jpg\u0026#34;, \u0026#34;pics_sma\u0026#34;: \u0026#34;uploads/goodspics/sma_6f5750132abd3f5b2b93dd722fcde653.jpg\u0026#34; } ], \u0026#34;attrs\u0026#34;: [ { \u0026#34;goods_id\u0026#34;: 96, \u0026#34;attr_id\u0026#34;: 15, \u0026#34;attr_value\u0026#34;: \u0026#34;eee\u0026#34;, \u0026#34;add_price\u0026#34;: null, \u0026#34;attr_name\u0026#34;: \u0026#34;fffffff\u0026#34;, \u0026#34;attr_sel\u0026#34;: \u0026#34;many\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;\u0026#34; }, { \u0026#34;goods_id\u0026#34;: 96, \u0026#34;attr_id\u0026#34;: 15, \u0026#34;attr_value\u0026#34;: \u0026#34;ddd\u0026#34;, \u0026#34;add_price\u0026#34;: null, \u0026#34;attr_name\u0026#34;: \u0026#34;fffffff\u0026#34;, \u0026#34;attr_sel\u0026#34;: \u0026#34;many\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;\u0026#34; } ] }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;更新成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } ###商品图片处理必须安装 GraphicsMagick\nlinux apt-get install GraphicsMagick Mac OS X brew install GraphicsMagick Windows 点击下载 6. 图片上传 请求路径：upload\n请求方法：post\n请求参数\n参数名 参数说明 备注 file 上传文件 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;tmp_path\u0026#34;: \u0026#34;tmp_uploads/ccfc5179a914e94506bcbb7377e8985f.png\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;http://127.0.0.1:8888tmp_uploads/ccfc5179a914e94506bcbb7377e8985f.png\u0026#34; }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;上传成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 九、订单管理 1. 订单数据列表 请求路径：orders\n请求方法：get\n请求参数\n参数名 参数说明 备注 query 查询参数 可以为空 pagenum 当前页码 可以为空，默认为1 pagesize 每页显示条数 可以为空，省略时返回所有订单 user_id 用户 ID 可以为空 pay_status 支付状态 可以为空 is_send 是否发货 可以为空 order_fapiao_title [\u0026lsquo;个人\u0026rsquo;,\u0026lsquo;公司\u0026rsquo;] 可以为空 order_fapiao_company 公司名称 可以为空 order_fapiao_content 发票内容 可以为空 consignee_addr 收货地址 可以为空 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;total\u0026#34;: 1, \u0026#34;pagenum\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;goods\u0026#34;: [ { \u0026#34;order_id\u0026#34;: 47, \u0026#34;user_id\u0026#34;: 133, \u0026#34;order_number\u0026#34;: \u0026#34;59e7502d7993d\u0026#34;, \u0026#34;order_price\u0026#34;: 322, \u0026#34;order_pay\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;is_send\u0026#34;: \u0026#34;是\u0026#34;, \u0026#34;trade_no\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;order_fapiao_title\u0026#34;: \u0026#34;个人\u0026#34;, \u0026#34;order_fapiao_company\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;order_fapiao_content\u0026#34;: \u0026#34;办公用品\u0026#34;, \u0026#34;consignee_addr\u0026#34;: \u0026#34;江苏省南京市秦淮区龙蟠中路666号\u0026#34;, \u0026#34;pay_status\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;create_time\u0026#34;: 1508331565, \u0026#34;update_time\u0026#34;: 1508331565 } ] }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 2. 修改订单状态 请求路径：orders/:id\n请求方法：put\n请求参数\n参数名 参数说明 备注 id 订单 ID 不能为空携带在url中 is_send 订单是否发货 1:已经发货，0:未发货 order_pay 订单支付 支付方式 0 未支付 1 支付宝 2 微信 3 银行卡 order_price 订单价格 order_number 订单数量 pay_status 支付状态 订单状态： 0 未付款、1 已付款 请求数据说明\n所有请求数据都是增量更新，如果参数不填写，就不会更新该字段 响应数据\n{ \u0026#34;data\u0026#34;: { \u0026#34;order_id\u0026#34;: 67, \u0026#34;user_id\u0026#34;: 1, \u0026#34;order_number\u0026#34;: \u0026#34;itany-g7kmck71vjaujfgoi\u0026#34;, \u0026#34;order_price\u0026#34;: 20, \u0026#34;order_pay\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;is_send\u0026#34;: \u0026#34;否\u0026#34;, \u0026#34;trade_no\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;order_fapiao_title\u0026#34;: \u0026#34;个人\u0026#34;, \u0026#34;order_fapiao_company\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;order_fapiao_content\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;consignee_addr\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;pay_status\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;create_time\u0026#34;: 1512533560, \u0026#34;update_time\u0026#34;: 1512533560, \u0026#34;goods\u0026#34;: [ { \u0026#34;id\u0026#34;: 82, \u0026#34;order_id\u0026#34;: 67, \u0026#34;goods_id\u0026#34;: 96, \u0026#34;goods_price\u0026#34;: 333, \u0026#34;goods_number\u0026#34;: 2, \u0026#34;goods_total_price\u0026#34;: 999 }, { \u0026#34;id\u0026#34;: 83, \u0026#34;order_id\u0026#34;: 67, \u0026#34;goods_id\u0026#34;: 95, \u0026#34;goods_price\u0026#34;: 666, \u0026#34;goods_number\u0026#34;: 5, \u0026#34;goods_total_price\u0026#34;: 999 } ] }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 3. 查看订单详情 请求路径：orders/:id\n请求方法：get\n请求参数\n参数名 参数说明 备注 id 订单 ID 不能为空携带在url中 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;order_id\u0026#34;: 67, \u0026#34;user_id\u0026#34;: 1, \u0026#34;order_number\u0026#34;: \u0026#34;itany-g7kmck71vjaujfgoi\u0026#34;, \u0026#34;order_price\u0026#34;: 20, \u0026#34;order_pay\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;is_send\u0026#34;: \u0026#34;否\u0026#34;, \u0026#34;trade_no\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;order_fapiao_title\u0026#34;: \u0026#34;个人\u0026#34;, \u0026#34;order_fapiao_company\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;order_fapiao_content\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;consignee_addr\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;pay_status\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;create_time\u0026#34;: 1512533560, \u0026#34;update_time\u0026#34;: 1512533560, \u0026#34;goods\u0026#34;: [ { \u0026#34;id\u0026#34;: 82, \u0026#34;order_id\u0026#34;: 67, \u0026#34;goods_id\u0026#34;: 96, \u0026#34;goods_price\u0026#34;: 333, \u0026#34;goods_number\u0026#34;: 2, \u0026#34;goods_total_price\u0026#34;: 999 }, { \u0026#34;id\u0026#34;: 83, \u0026#34;order_id\u0026#34;: 67, \u0026#34;goods_id\u0026#34;: 95, \u0026#34;goods_price\u0026#34;: 666, \u0026#34;goods_number\u0026#34;: 5, \u0026#34;goods_total_price\u0026#34;: 999 } ] }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 4. 修改地址 请求路径：orders/:id/address\n请求方法：put\n请求参数\n参数名 参数说明 备注 id 订单 ID 不能为空携带在url中 consignee_addr 收货地址 可以为空 响应数据 { \u0026#34;data\u0026#34;: {}, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;修改地址成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 5. 查看物流信息 请求路径：/kuaidi/:id\n请求方法：get\n物流单号：815294206237577\n响应数据：\n{ \u0026#34;meta\u0026#34;:{ \u0026#34;status\u0026#34;:200, \u0026#34;message\u0026#34;:\u0026#34;获取物流信息成功！\u0026#34; }, \u0026#34;data\u0026#34;:[ { \u0026#34;time\u0026#34;:\u0026#34;2020-11-15 12:39:56\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-15 12:39:56\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;已签收,签收人是 汤小洋 先生/女士，如有疑问请联系派件员阿奇(13805148888)，如您未收到此快递，请拨打投诉电话：15294207777，感谢使用申通快递，期待再次为您服务\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-15 08:46:54\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-15 08:46:54\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;上海浦东寒亭营业厅-寒亭阿奇(13805148888)-派件中\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-15 08:38:57\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-15 08:38:57\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;已到达-上海浦东寒亭营业厅\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-15 06:38:13\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-15 06:38:13\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;已到达-上海浦东寒亭营业厅\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-14 20:56:45\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-14 20:56:45\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;上海浦东转运中心-已发往-上海浦东寒亭公司\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-14 20:52:44\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-14 20:52:44\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;已到达-上海浦东转运中心\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-14 17:43:48\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-14 17:43:48\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;已到达-上海浦东转运中心\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-14 10:53:46\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-14 10:53:46\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;上海浦东转运中心-已发往-上海浦东转运中心\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-14 10:43:31\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-14 10:43:31\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;已到达-上海浦东转运中心\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-14 02:43:20\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-14 02:43:20\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;江苏苏州转运中心-已发往-上海浦东转运中心\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-14 02:41:40\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-14 02:41:40\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;已到达-江苏苏州转运中心\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-13 16:28:13\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-13 16:28:13\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;江苏南京转运中心-已发往-江苏苏州转运中心\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-13 15:03:30\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-13 15:03:30\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;南京IT教育公司-已发往-江苏南京转运中心\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-13 14:47:56\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-13 14:47:56\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;南京IT教育公司-已发往-江苏南京转运中心\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-13 14:37:06\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-13 14:37:06\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;南京IT教育公司-城东汪小主宠物店-已收件\u0026#34;, \u0026#34;location\u0026#34;:null } ] } 一、API V2 接口说明 接口基准地址：http://www.tangxiaoyang.vip:8888/api/v2/\n服务端已开启 CORS 跨域支持\nAPI V2 认证统一使用 Token 认证\n需要授权的 API ，必须在请求头中使用 Authorization 字段提供 token 令牌\n使用 HTTP Status Code 标识状态\n数据返回格式统一使用 JSON\n1. 支持的请求方法 GET（SELECT）：从服务器取出资源（一项或多项）。\nPOST（CREATE）：在服务器新建一个资源。\nPUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。\nPATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。\nDELETE（DELETE）：从服务器删除资源。\nHEAD：获取资源的元数据。\nOPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的。\n2. 通用返回状态说明 状态码 含义 说明 200 OK 请求成功 201 CREATED 创建成功 204 DELETED 删除成功 400 BAD REQUEST 请求的地址不存在或者包含不支持的参数 401 UNAUTHORIZED 未授权 403 FORBIDDEN 被禁止访问 404 NOT FOUND 请求的资源不存在 422 Unprocesable entity [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误 500 INTERNAL SERVER ERROR 内部错误 二、登录 1. 登录验证接口 请求路径：login\n请求方法：post\n请求参数\n参数名 参数说明 备注 username 用户名 不能为空 password 密码 不能为空 响应参数 参数名 参数说明 备注 id 用户 ID rid 用户角色 ID username 用户名 mobile 手机号 email 邮箱 token 令牌 基于 jwt 的令牌 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;id\u0026#34;: 500, \u0026#34;rid\u0026#34;: 0, \u0026#34;username\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;mobile\u0026#34;: \u0026#34;123\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;123@qq.com\u0026#34;, \u0026#34;token\u0026#34;: \u0026#34;Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOjUwMCwicmlkIjowLCJpYXQiOjE1MTI1NDQyOTksImV4cCI6MTUxMjYzMDY5OX0.eGrsrvwHm-tPsO9r_pxHIQ5i5L1kX9RX444uwnRGaIM\u0026#34; }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;登录成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 三、用户管理 1. 用户数据列表 请求路径：users\n请求方法：get\n请求参数\n参数名 参数说明 备注 query 查询参数 可以为空 pagenum 当前页码 不能为空 pagesize 每页显示条数 不能为空 响应参数 参数名 参数说明 备注 total 总记录数 pagenum 当前页码 users 用户数据集合 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;total\u0026#34;: 5, \u0026#34;pagenum\u0026#34;: 1, \u0026#34;users\u0026#34;: [ { \u0026#34;id\u0026#34;: 25, \u0026#34;username\u0026#34;: \u0026#34;tom\u0026#34;, \u0026#34;mobile\u0026#34;: \u0026#34;13951783475\u0026#34;, \u0026#34;type\u0026#34;: 1, \u0026#34;email\u0026#34;: \u0026#34;1049901079@qq.com\u0026#34;, \u0026#34;create_time\u0026#34;: \u0026#34;2020-11-09T20:36:26.000Z\u0026#34;, \u0026#34;mg_state\u0026#34;: true, // 当前用户的状态 \u0026#34;role_name\u0026#34;: \u0026#34;超级管理员\u0026#34; } ] }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 2. 添加用户 请求路径：users\n请求方法：post\n请求参数\n参数名 参数说明 备注 username 用户名称 不能为空 password 用户密码 不能为空 email 邮箱 可以为空 mobile 手机号 可以为空 响应参数 参数名 参数说明 备注 id 用户 ID rid 用户角色 ID username 用户名 mobile 手机号 email 邮箱 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;id\u0026#34;: 28, \u0026#34;username\u0026#34;: \u0026#34;tom\u0026#34;, \u0026#34;mobile\u0026#34;: \u0026#34;test\u0026#34;, \u0026#34;type\u0026#34;: 1, \u0026#34;openid\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;test@test.com\u0026#34;, \u0026#34;create_time\u0026#34;: \u0026#34;2020-11-10T03:47:13.533Z\u0026#34;, \u0026#34;modify_time\u0026#34;: null, \u0026#34;is_delete\u0026#34;: false, \u0026#34;is_active\u0026#34;: false }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;用户创建成功\u0026#34;, \u0026#34;status\u0026#34;: 201 } } 3. 修改用户状态 请求路径：users/:uId/state/:type\n请求方法：put\n请求参数\n参数名 参数说明 备注 uId 用户 ID 不能为空携带在url中 type 用户状态 不能为空携带在url中，值为 true 或者 false 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;id\u0026#34;: 566, \u0026#34;rid\u0026#34;: 30, \u0026#34;username\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;mobile\u0026#34;: \u0026#34;123456\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;bb@itany.com\u0026#34;, \u0026#34;mg_state\u0026#34;: 0 }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;设置状态成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 4. 根据 ID 查询用户信息 请求路径：users/:id\n请求方法：get\n请求参数\n参数名 参数说明 备注 id 用户 ID 不能为空携带在url中 响应参数 参数名 参数说明 备注 id 用户 ID role_id 角色 ID mobile 手机号 email 邮箱 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;id\u0026#34;: 503, \u0026#34;username\u0026#34;: \u0026#34;admin3\u0026#34;, \u0026#34;role_id\u0026#34;: 0, \u0026#34;mobile\u0026#34;: \u0026#34;00000\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;new@new.com\u0026#34; }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;查询成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 5. 编辑提交用户 请求路径：users/:id\n请求方法：put\n请求参数\n参数名 参数说明 备注 id 用户 id 不能为空 参数是url参数:id email 邮箱 可以为空 mobile 手机号 可以为空 响应参数 参数名 参数说明 备注 id 用户 ID role_id 角色 ID mobile 手机号 email 邮箱 响应数据 /* 200表示成功，500表示失败 */ { \u0026#34;data\u0026#34;: { \u0026#34;id\u0026#34;: 503, \u0026#34;username\u0026#34;: \u0026#34;admin3\u0026#34;, \u0026#34;role_id\u0026#34;: 0, \u0026#34;mobile\u0026#34;: \u0026#34;111\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;123@123.com\u0026#34; }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;更新成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 6. 删除单个用户 请求路径：users/:id\n请求方法：delete\n请求参数\n参数名 参数说明 备注 id 用户 id 不能为空参数是url参数:id 响应参数\n响应数据\n{ \u0026#34;data\u0026#34;: null, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;删除成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 7. 分配用户角色 请求路径：users/:id/role\n请求方法：put\n请求参数\n参数名 参数说明 备注 id 用户 ID 不能为空参数是url参数:id rid 角色 id 不能为空参数body参数 响应参数 参数名 参数说明 备注 id 用户 ID role_id 角色 ID mobile 手机号 email 邮箱 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;id\u0026#34;: 508, \u0026#34;rid\u0026#34;: \u0026#34;30\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;asdf1\u0026#34;, \u0026#34;mobile\u0026#34;: \u0026#34;123123\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;adfsa@qq.com\u0026#34; }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;设置角色成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 四、权限管理 1. 所有权限列表 请求路径：rights/:type\n请求方法：get\n请求参数\n参数名 参数说明 备注 type 类型 值 list 或 tree , list 列表显示权限, tree 树状显示权限,参数是url参数:type 响应参数 参数名 参数说明 备注 id 权限 ID authName 权限说明 level 权限层级 pid 权限父 ID path 对应访问路径 响应数据 type=list { \u0026#34;data\u0026#34;: [ { \u0026#34;id\u0026#34;: 101, \u0026#34;authName\u0026#34;: \u0026#34;商品管理\u0026#34;, \u0026#34;level\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;pid\u0026#34;: 0, \u0026#34;path\u0026#34;: null }, { \u0026#34;id\u0026#34;: 102, \u0026#34;authName\u0026#34;: \u0026#34;订单管理\u0026#34;, \u0026#34;level\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;pid\u0026#34;: 0, \u0026#34;path\u0026#34;: null } ], \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取权限列表成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } type=tree\n{ data: [ { id: 101, authName: \u0026#39;商品管理\u0026#39;, path: null, pid: 0, children: [ { id: 104, authName: \u0026#39;商品列表\u0026#39;, path: null, pid: 101, children: [ { id: 105, authName: \u0026#39;添加商品\u0026#39;, path: null, pid: \u0026#39;104,101\u0026#39; } ] } ] } ], meta: { msg: \u0026#39;获取权限列表成功\u0026#39;, status: 200 } } 2. 左侧菜单权限 请求路径：menus\n请求方法：get\n响应数据\n{ \u0026#34;data\u0026#34;: { \u0026#34;id\u0026#34;: 101, \u0026#34;authName\u0026#34;: \u0026#34;商品管理\u0026#34;, \u0026#34;path\u0026#34;: null, \u0026#34;children\u0026#34;: [ { \u0026#34;id\u0026#34;: 104, \u0026#34;authName\u0026#34;: \u0026#34;商品列表\u0026#34;, \u0026#34;path\u0026#34;: null, \u0026#34;children\u0026#34;: [] } ] } \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取菜单列表成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 五、角色管理 1. 角色列表 请求路径：roles\n请求方法：get\n响应数据说明\n第一层为角色信息\n第二层开始为权限说明，权限一共有 3 层权限\n最后一层权限，不包含 children 属性\n响应数据\n{ \u0026#34;data\u0026#34;: [ { \u0026#34;id\u0026#34;: 30, \u0026#34;roleName\u0026#34;: \u0026#34;主管\u0026#34;, \u0026#34;roleDesc\u0026#34;: \u0026#34;技术负责人\u0026#34;, \u0026#34;children\u0026#34;: [ { \u0026#34;id\u0026#34;: 101, \u0026#34;authName\u0026#34;: \u0026#34;商品管理\u0026#34;, \u0026#34;path\u0026#34;: null, \u0026#34;children\u0026#34;: [ { \u0026#34;id\u0026#34;: 104, \u0026#34;authName\u0026#34;: \u0026#34;商品列表\u0026#34;, \u0026#34;path\u0026#34;: null, \u0026#34;children\u0026#34;: [ { \u0026#34;id\u0026#34;: 105, \u0026#34;authName\u0026#34;: \u0026#34;添加商品\u0026#34;, \u0026#34;path\u0026#34;: null } ] } ] } ] } ], \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 2. 添加角色 请求路径：roles\n请求方法：post\n请求参数\n参数名 参数说明 备注 roleName 角色名称 不能为空 roleDesc 角色描述 可以为空 响应参数 参数名 参数说明 备注 roleId 角色 ID roleName 角色名称 roleDesc 角色描述 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;roleId\u0026#34;: 40, \u0026#34;roleName\u0026#34;: \u0026#34;admin2\u0026#34;, \u0026#34;roleDesc\u0026#34;: \u0026#34;admin2Desc\u0026#34; }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;创建成功\u0026#34;, \u0026#34;status\u0026#34;: 201 } } 3. 根据 ID 查询角色 请求路径：roles/:id\n请求方法：get\n请求参数\n参数名 参数说明 备注 :id 角色 ID 不能为空携带在url中 响应参数 参数名 参数说明 备注 roleId 角色 ID roleName 角色名称 roleDesc 角色描述 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;roleId\u0026#34;: 31, \u0026#34;roleName\u0026#34;: \u0026#34;测试角色\u0026#34;, \u0026#34;roleDesc\u0026#34;: \u0026#34;测试负责人\u0026#34; }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 4. 编辑提交角色 请求路径：roles/:id\n请求方法：put\n请求参数\n参数名 参数说明 备注 :id 角色 ID 不能为空携带在url中 roleName 角色名称 不能为空 roleDesc 角色描述 可以为空 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;roleId\u0026#34;: 31, \u0026#34;roleName\u0026#34;: \u0026#34;测试角色\u0026#34;, \u0026#34;roleDesc\u0026#34;: \u0026#34;测试角色描述\u0026#34; }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 5. 删除角色 请求路径：roles/:id\n请求方法：delete\n请求参数\n参数名 参数说明 备注 :id 角色 ID 不能为空携带在url中 响应数据 { \u0026#34;data\u0026#34;: null, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;删除成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 6. 角色授权 请求路径：roles/:roleId/rights\n请求方法：post\n请求参数：通过 请求体 发送给后端\n参数名 参数说明 备注 :roleId 角色 ID 不能为空携带在url中 rids 权限 ID 列表（字符串） 以 , 分割的权限 ID 列表（获取所有被选中、叶子节点的key和半选中节点的key, 包括 1，2，3级节点） 响应数据 { \u0026#34;data\u0026#34;: null, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;更新成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 7. 删除角色指定权限 请求路径：roles/:roleId/rights/:rightId\n请求方法：delete\n请求参数 参数名 参数说明 备注 :roleId 角色 ID 不能为空携带在url中 :rightId 权限 ID 不能为空携带在url中\n响应数据说明\n返回的data, 是当前角色下最新的权限数据 响应数据\n{ \u0026#34;data\u0026#34;: [ { \u0026#34;id\u0026#34;: 101, \u0026#34;authName\u0026#34;: \u0026#34;商品管理\u0026#34;, \u0026#34;path\u0026#34;: null, \u0026#34;children\u0026#34;: [ { \u0026#34;id\u0026#34;: 104, \u0026#34;authName\u0026#34;: \u0026#34;商品列表\u0026#34;, \u0026#34;path\u0026#34;: null, \u0026#34;children\u0026#34;: [ { \u0026#34;id\u0026#34;: 105, \u0026#34;authName\u0026#34;: \u0026#34;添加商品\u0026#34;, \u0026#34;path\u0026#34;: null }, { \u0026#34;id\u0026#34;: 116, \u0026#34;authName\u0026#34;: \u0026#34;修改\u0026#34;, \u0026#34;path\u0026#34;: null } ] } ] } ], \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;取消权限成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 六、商品分类管理 1. 商品分类数据列表 请求路径：categories\n请求方法：get\n请求参数\n参数名 参数说明 备注 type [1,2,3] 值：1，2，3 分别表示显示一层二层三层分类列表 【可选参数】如果不传递，则默认获取所有级别的分类 pagenum 当前页码值 【可选参数】如果不传递，则默认获取所有分类 pagesize 每页显示多少条数据 【可选参数】如果不传递，则默认获取所有分类 响应参数 参数名 参数说明 备注 cat_id 分类 ID cat_name 分类名称 cat_pid 分类父 ID cat_level 分类当前层级 响应数据 { \u0026#34;data\u0026#34;: [ { \u0026#34;cat_id\u0026#34;: 1, \u0026#34;cat_name\u0026#34;: \u0026#34;大家电\u0026#34;, \u0026#34;cat_pid\u0026#34;: 0, \u0026#34;cat_level\u0026#34;: 0, \u0026#34;cat_deleted\u0026#34;: false, \u0026#34;children\u0026#34;: [ { \u0026#34;cat_id\u0026#34;: 3, \u0026#34;cat_name\u0026#34;: \u0026#34;电视\u0026#34;, \u0026#34;cat_pid\u0026#34;: 1, \u0026#34;cat_level\u0026#34;: 1, \u0026#34;cat_deleted\u0026#34;: false, \u0026#34;children\u0026#34;: [ { \u0026#34;cat_id\u0026#34;: 6, \u0026#34;cat_name\u0026#34;: \u0026#34;曲面电视\u0026#34;, \u0026#34;cat_pid\u0026#34;: 3, \u0026#34;cat_level\u0026#34;: 2, \u0026#34;cat_deleted\u0026#34;: false }, { \u0026#34;cat_id\u0026#34;: 7, \u0026#34;cat_name\u0026#34;: \u0026#34;海信\u0026#34;, \u0026#34;cat_pid\u0026#34;: 3, \u0026#34;cat_level\u0026#34;: 2, \u0026#34;cat_deleted\u0026#34;: false } ] } ] } ], \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 2. 添加分类 请求路径：categories\n请求方法：post\n请求参数\n参数名 参数说明 备注 cat_pid 分类父 ID 不能为空，如果要添加一级分类，则父分类Id应该设置为 0 cat_name 分类名称 不能为空 cat_level 分类层级 不能为空，0表示一级分类；1表示二级分类；2表示三级分类 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;cat_id\u0026#34;: 62, \u0026#34;cat_name\u0026#34;: \u0026#34;相框\u0026#34;, \u0026#34;cat_pid\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;cat_level\u0026#34;: \u0026#34;1\u0026#34; }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;创建成功\u0026#34;, \u0026#34;status\u0026#34;: 201 } } 3. 根据 id 查询分类 请求路径：categories/:id\n请求方法：get\n请求参数\n参数名 参数说明 备注 :id 分类 ID 不能为空携带在url中 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;cat_id\u0026#34;: 3, \u0026#34;cat_name\u0026#34;: \u0026#34;厨卫电器\u0026#34;, \u0026#34;cat_pid\u0026#34;: 0, \u0026#34;cat_level\u0026#34;: 0 }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 4. 编辑提交分类 请求路径：categories/:id\n请求方法：put\n请求参数\n参数名 参数说明 备注 :id 分类 ID 不能为空携带在url中 cat_name 分类名称 不能为空【此参数，放到请求体中】 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;cat_id\u0026#34;: 22, \u0026#34;cat_name\u0026#34;: \u0026#34;自拍杆\u0026#34;, \u0026#34;cat_pid\u0026#34;: 7, \u0026#34;cat_level\u0026#34;: 2 }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;更新成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 5. 删除分类 请求路径：categories/:id\n请求方法：delete\n请求参数\n参数名 参数说明 备注 :id 分类 ID 不能为空携带在url中 响应数据 { \u0026#34;data\u0026#34;: null, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;删除成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 七、分类参数管理 1. 参数列表 请求路径：categories/:id/attributes\n请求方法：get\n请求参数\n参数名 参数说明 备注 :id 分类 ID 不能为空携带在url中 sel many或only 不能为空，many表示动态参数，only表示静态参数（也称为静态属性） 响应参数 参数名 参数说明 备注 attr_id 分类参数 ID attr_name 分类参数名称 cat_id 分类参数所属分类 attr_sel 分类参数的类型，many表示动态参数，only表示静态属性 attr_write list表示从列表选择（动态参数），manual表示手工录入（静态属性） attr_vals 分类参数的明细，如果是动态参数，则该值是以空格分隔的字符串 响应数据 { \u0026#34;data\u0026#34;: [ { \u0026#34;attr_id\u0026#34;: 1, \u0026#34;attr_name\u0026#34;: \u0026#34;cpu\u0026#34;, \u0026#34;cat_id\u0026#34;: 22, \u0026#34;attr_sel\u0026#34;: \u0026#34;many\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;4K高清 5K高清 6K高清\u0026#34; } ], \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 2. 添加动态参数或静态属性 请求路径：categories/:id/attributes\n请求方法：post\n请求参数\n参数名 参数说明 备注 :id 分类 ID 不能为空携带在url中 attr_name 参数名称 不能为空 attr_sel many或only 不能为空 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;attr_id\u0026#34;: 44, \u0026#34;attr_name\u0026#34;: \u0026#34;测试参数\u0026#34;, \u0026#34;cat_id\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;attr_sel\u0026#34;: \u0026#34;many\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;a,b,c\u0026#34; }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;创建成功\u0026#34;, \u0026#34;status\u0026#34;: 201 } } 3. 根据 ID 查询参数 请求路径：categories/:id/attributes/:attrId\n请求方法：get\n请求参数\n参数名 参数说明 备注 :id 分类 ID 不能为空携带在url中 :attrId 属性 ID 不能为空携带在url中 attr_sel many或only 不能为空 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;attr_id\u0026#34;: 1, \u0026#34;attr_name\u0026#34;: \u0026#34;cpu\u0026#34;, \u0026#34;cat_id\u0026#34;: 22, \u0026#34;attr_sel\u0026#34;: \u0026#34;only\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;manual\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;ffff\u0026#34; }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 4. 更新参数及明细 请求路径：categories/:id/attributes/:attrId\n请求方法：put\n请求参数\n参数名 参数说明 备注 :id 分类 ID 不能为空携带在url中 :attrId 参数 ID 不能为空携带在url中 attr_name 参数名称 不能为空，携带在请求体中 attr_sel many或only 不能为空，携带在请求体中 attr_vals 参数的明细 可选参数，携带在请求体中 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;attr_id\u0026#34;: 9, \u0026#34;attr_name\u0026#34;: \u0026#34;测试更新\u0026#34;, \u0026#34;cat_id\u0026#34;: \u0026#34;43\u0026#34;, \u0026#34;attr_sel\u0026#34;: \u0026#34;only\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;manual\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;abc\u0026#34; }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;更新成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 5. 删除参数 请求路径： categories/:id/attributes/:attrid\n请求方法：delete\n请求参数\n参数名 参数说明 备注 :id 分类 ID 不能为空携带在url中 :attrid 参数 ID 不能为空携带在url中 响应数据 { \u0026#34;data\u0026#34;: null, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;删除成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 八、商品管理 1. 商品列表数据 请求路径：goods\n请求方法：get\n请求参数\n参数名 参数说明 备注 query 查询参数 可以为空 pagenum 当前页码 不能为空 pagesize 每页显示条数 不能为空 响应参数 参数名 参数说明 备注 total 总共商品条数 pagenum 当前商品页数 goods_id 商品 ID goods_name 商品名称 goods_price 价格 goods_number 数量 goods_weight 重量 不能为空 goods_state 商品状态 商品状态 0: 未通过 1: 审核中 2: 已审核 add_time 添加时间 upd_time 更新时间 hot_mumber 热销品数量 is_promote 是否是热销品 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;total\u0026#34;: 50, \u0026#34;pagenum\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;goods\u0026#34;: [ { \u0026#34;goods_id\u0026#34;: 144, \u0026#34;goods_name\u0026#34;: \u0026#34;iphone\u0026#34;, \u0026#34;goods_price\u0026#34;: 1, \u0026#34;goods_number\u0026#34;: 1, \u0026#34;goods_weight\u0026#34;: 1, \u0026#34;goods_state\u0026#34;: null, \u0026#34;add_time\u0026#34;: 1512954923, \u0026#34;upd_time\u0026#34;: 1512954923, \u0026#34;hot_mumber\u0026#34;: 0, \u0026#34;is_promote\u0026#34;: false } ] }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 2. 添加商品 请求路径：goods\n请求方法：post\n请求参数\n参数名 参数说明 备注 goods_name 商品名称 不能为空 goods_cat 以,逗号分割的分类列表 不能为空 goods_price 价格 不能为空 goods_number 数量 不能为空 goods_weight 重量 不能为空 goods_introduce 介绍 可以为空 pics 上传的图片临时路径（对象） 可以为空 attrs 商品的参数（数组），包含 动态参数 和 静态属性 可以为空 请求数据 { \u0026#34;goods_name\u0026#34;:\u0026#34;test_goods_name2\u0026#34;, \u0026#34;goods_cat\u0026#34;: \u0026#34;1,2,3\u0026#34;, \u0026#34;goods_price\u0026#34;:20, \u0026#34;goods_number\u0026#34;:30, \u0026#34;goods_weight\u0026#34;:40, \u0026#34;goods_introduce\u0026#34;:\u0026#34;abc\u0026#34;, \u0026#34;pics\u0026#34;:[ {\u0026#34;pic\u0026#34;:\u0026#34;/tmp_uploads/30f08d52c551ecb447277eae232304b8\u0026#34;} ], \u0026#34;attrs\u0026#34;:[ { \u0026#34;attr_id\u0026#34;:15, \u0026#34;attr_value\u0026#34;:\u0026#34;ddd\u0026#34; }, { \u0026#34;attr_id\u0026#34;:15, \u0026#34;attr_value\u0026#34;:\u0026#34;eee\u0026#34; } ] } 响应参数 参数名 参数说明 备注 total 总共商品条数 pagenum 当前商品页数 goods_id 商品 ID goods_cat 以为\u0026rsquo;,\u0026lsquo;分割的分类列表 goods_name 商品名称 goods_price 价格 goods_number 数量 goods_weight 重量 不能为空 goods_state 商品状态 商品状态 0: 未通过 1: 审核中 2: 已审核 add_time 添加时间 upd_time 更新时间 hot_mumber 热销品数量 is_promote 是否是热销品 pics 上传的图片临时路径（对象） pics_id:图片 ID,goods_id:商品 ID,pics_big:大图,pics_mid:中图,pics_sma:小图 attrs 商品的参数（数组） goods_id:商品 ID,attr_value:当前商品的参数值,add_price:浮动价格,attr_vals:预定义的参数值,attr_sel:手动输入，还是单选 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;goods_id\u0026#34;: 145, \u0026#34;goods_name\u0026#34;: \u0026#34;test_goods_name2\u0026#34;, \u0026#34;goods_price\u0026#34;: 20, \u0026#34;cat_id\u0026#34;: 1, \u0026#34;goods_number\u0026#34;: 30, \u0026#34;goods_weight\u0026#34;: 40, \u0026#34;goods_introduce\u0026#34;: \u0026#34;abc\u0026#34;, \u0026#34;goods_big_logo\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;goods_small_logo\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;goods_state\u0026#34;: 1, \u0026#34;add_time\u0026#34;: 1512962370, \u0026#34;upd_time\u0026#34;: 1512962370, \u0026#34;hot_mumber\u0026#34;: 0, \u0026#34;is_promote\u0026#34;: false, \u0026#34;pics\u0026#34;: [ { \u0026#34;pics_id\u0026#34;: 397, \u0026#34;goods_id\u0026#34;: 145, \u0026#34;pics_big\u0026#34;: \u0026#34;uploads/goodspics/big_30f08d52c551ecb447277eae232304b8\u0026#34;, \u0026#34;pics_mid\u0026#34;: \u0026#34;uploads/goodspics/mid_30f08d52c551ecb447277eae232304b8\u0026#34;, \u0026#34;pics_sma\u0026#34;: \u0026#34;uploads/goodspics/sma_30f08d52c551ecb447277eae232304b8\u0026#34; } ], \u0026#34;attrs\u0026#34;: [ { \u0026#34;goods_id\u0026#34;: 145, \u0026#34;attr_id\u0026#34;: 15, \u0026#34;attr_value\u0026#34;: \u0026#34;ddd\u0026#34;, \u0026#34;add_price\u0026#34;: null, \u0026#34;attr_name\u0026#34;: \u0026#34;fffffff\u0026#34;, \u0026#34;attr_sel\u0026#34;: \u0026#34;many\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;\u0026#34; }, { \u0026#34;goods_id\u0026#34;: 145, \u0026#34;attr_id\u0026#34;: 15, \u0026#34;attr_value\u0026#34;: \u0026#34;eee\u0026#34;, \u0026#34;add_price\u0026#34;: null, \u0026#34;attr_name\u0026#34;: \u0026#34;fffffff\u0026#34;, \u0026#34;attr_sel\u0026#34;: \u0026#34;many\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;\u0026#34; } ] }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;创建商品成功\u0026#34;, \u0026#34;status\u0026#34;: 201 } } 3. 根据 ID 查询商品 请求路径：goods/:id\n请求方法：get\n请求参数\n参数名 参数说明 备注 id 商品 ID 不能为空携带在url中 响应参数 参数名 参数说明 备注 goods_id 商品 ID goods_name 商品名称 goods_price 价格 goods_number 数量 goods_weight 重量 不能为空 goods_state 商品状态 商品状态 0: 未通过 1: 审核中 2: 已审核 goods_introduce 介绍 goods_cat 以为\u0026rsquo;,\u0026lsquo;分割的分类列表 add_time 添加时间 upd_time 更新时间 hot_mumber 热销品数量 is_promote 是否是热销品 pics 上传的图片临时路径（对象） pics_id:图片 ID,goods_id:商品 ID,pics_big:大图,pics_mid:中图,pics_sma:小图 attrs 商品的参数（数组） goods_id:商品 ID,attr_value:当前商品的参数值,add_price:浮动价格,attr_vals:预定义的参数值,attr_sel:手动输入，还是单选 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;goods_id\u0026#34;: 145, \u0026#34;goods_name\u0026#34;: \u0026#34;test_goods_name2\u0026#34;, \u0026#34;goods_price\u0026#34;: 20, \u0026#34;goods_number\u0026#34;: 30, \u0026#34;goods_weight\u0026#34;: 40, \u0026#34;goods_introduce\u0026#34;: \u0026#34;abc\u0026#34;, \u0026#34;goods_big_logo\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;goods_small_logo\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;goods_state\u0026#34;: 1, \u0026#34;add_time\u0026#34;: 1512962370, \u0026#34;upd_time\u0026#34;: 1512962370, \u0026#34;hot_mumber\u0026#34;: 0, \u0026#34;is_promote\u0026#34;: false, \u0026#34;pics\u0026#34;: [ { \u0026#34;pics_id\u0026#34;: 397, \u0026#34;goods_id\u0026#34;: 145, \u0026#34;pics_big\u0026#34;: \u0026#34;uploads/goodspics/big_30f08d52c551ecb447277eae232304b8\u0026#34;, \u0026#34;pics_mid\u0026#34;: \u0026#34;uploads/goodspics/mid_30f08d52c551ecb447277eae232304b8\u0026#34;, \u0026#34;pics_sma\u0026#34;: \u0026#34;uploads/goodspics/sma_30f08d52c551ecb447277eae232304b8\u0026#34; } ], \u0026#34;attrs\u0026#34;: [ { \u0026#34;goods_id\u0026#34;: 145, \u0026#34;attr_id\u0026#34;: 15, \u0026#34;attr_value\u0026#34;: \u0026#34;ddd\u0026#34;, \u0026#34;add_price\u0026#34;: null, \u0026#34;attr_name\u0026#34;: \u0026#34;fffffff\u0026#34;, \u0026#34;attr_sel\u0026#34;: \u0026#34;many\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;\u0026#34; }, { \u0026#34;goods_id\u0026#34;: 145, \u0026#34;attr_id\u0026#34;: 15, \u0026#34;attr_value\u0026#34;: \u0026#34;eee\u0026#34;, \u0026#34;add_price\u0026#34;: null, \u0026#34;attr_name\u0026#34;: \u0026#34;fffffff\u0026#34;, \u0026#34;attr_sel\u0026#34;: \u0026#34;many\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;\u0026#34; } ] }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 4. 编辑提交商品 请求路径：goods/:id\n请求方法：put\n请求参数\n参数名 参数说明 备注 id 商品 ID 不能为空携带在url中 goods_name 商品名称 不能为空 goods_cat 以为\u0026rsquo;,\u0026lsquo;分割的分类列表 不能为空 goods_price 价格 不能为空 goods_number 数量 不能为空 goods_weight 重量 不能为空 goods_introduce 介绍 可以为空 pics 上传的图片临时路径（对象） 可以为空 attrs 商品的参数（数组） 可以为空 请求数据 { \u0026#34;goods_name\u0026#34;:\u0026#34;test_goods_name2\u0026#34;, \u0026#34;goods_price\u0026#34;:20, \u0026#34;goods_number\u0026#34;:30, \u0026#34;goods_weight\u0026#34;:40, \u0026#34;goods_introduce\u0026#34;:\u0026#34;abc\u0026#34;, \u0026#34;pics\u0026#34;:[ {\u0026#34;pic\u0026#34;:\u0026#34;/tmp_uploads/30f08d52c551ecb447277eae232304b8\u0026#34;} ], \u0026#34;attrs\u0026#34;:[ { \u0026#34;attr_id\u0026#34;:15, \u0026#34;attr_value\u0026#34;:\u0026#34;ddd\u0026#34; }, { \u0026#34;attr_id\u0026#34;:15, \u0026#34;attr_value\u0026#34;:\u0026#34;eee\u0026#34; } ] } 响应参数 参数名 参数说明 备注 total 总共商品条数 pagenum 当前商品页数 goods_id 商品 ID goods_name 商品名称 goods_price 价格 goods_number 数量 goods_weight 重量 不能为空 goods_state 商品状态 商品状态 0: 未通过 1: 审核中 2: 已审核 add_time 添加时间 upd_time 更新时间 hot_mumber 热销品数量 is_promote 是否是热销品 pics 上传的图片临时路径（对象） pics_id:图片 ID,goods_id:商品 ID,pics_big:大图,pics_mid:中图,pics_sma:小图 attrs 商品的参数（数组） goods_id:商品 ID,attr_value:当前商品的参数值,add_price:浮动价格,attr_vals:预定义的参数值,attr_sel:手动输入，还是单选, 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;goods_id\u0026#34;: 145, \u0026#34;goods_name\u0026#34;: \u0026#34;test_goods_name2\u0026#34;, \u0026#34;goods_price\u0026#34;: 20, \u0026#34;goods_number\u0026#34;: 30, \u0026#34;goods_weight\u0026#34;: 40, \u0026#34;goods_introduce\u0026#34;: \u0026#34;abc\u0026#34;, \u0026#34;goods_big_logo\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;goods_small_logo\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;goods_state\u0026#34;: 1, \u0026#34;add_time\u0026#34;: 1512962370, \u0026#34;upd_time\u0026#34;: 1512962370, \u0026#34;hot_mumber\u0026#34;: 0, \u0026#34;is_promote\u0026#34;: false, \u0026#34;pics\u0026#34;: [ { \u0026#34;pics_id\u0026#34;: 397, \u0026#34;goods_id\u0026#34;: 145, \u0026#34;pics_big\u0026#34;: \u0026#34;uploads/goodspics/big_30f08d52c551ecb447277eae232304b8\u0026#34;, \u0026#34;pics_mid\u0026#34;: \u0026#34;uploads/goodspics/mid_30f08d52c551ecb447277eae232304b8\u0026#34;, \u0026#34;pics_sma\u0026#34;: \u0026#34;uploads/goodspics/sma_30f08d52c551ecb447277eae232304b8\u0026#34; } ], \u0026#34;attrs\u0026#34;: [ { \u0026#34;goods_id\u0026#34;: 145, \u0026#34;attr_id\u0026#34;: 15, \u0026#34;attr_value\u0026#34;: \u0026#34;ddd\u0026#34;, \u0026#34;add_price\u0026#34;: null, \u0026#34;attr_name\u0026#34;: \u0026#34;fffffff\u0026#34;, \u0026#34;attr_sel\u0026#34;: \u0026#34;many\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;\u0026#34; }, { \u0026#34;goods_id\u0026#34;: 145, \u0026#34;attr_id\u0026#34;: 15, \u0026#34;attr_value\u0026#34;: \u0026#34;eee\u0026#34;, \u0026#34;add_price\u0026#34;: null, \u0026#34;attr_name\u0026#34;: \u0026#34;fffffff\u0026#34;, \u0026#34;attr_sel\u0026#34;: \u0026#34;many\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;\u0026#34; } ] }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;更新商品成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 5. 删除商品 请求路径：goods/:id\n请求方法：delete\n请求参数\n参数名 参数说明 备注 id 商品 ID 不能为空携带在url中 响应数据 { \u0026#34;data\u0026#34;: null, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;删除成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } ###同步商品图片\n请求路径：goods/:id/pics\n请求方法：put\n请求参数\n参数名 参数说明 备注 id 商品 ID 不能为空携带在url中 pics 商品图片集合 如果有 pics_id 字段会保留该图片，如果没有 pics_id 但是有 pic 字段就会新生成图片数据 请求数据 ;[ { pic: \u0026#39;tmp_uploads/db28f6316835836e97653b5c75e418be.png\u0026#39; }, { pics_id: 397, goods_id: 145, pics_big: \u0026#39;uploads/goodspics/big_30f08d52c551ecb447277eae232304b8\u0026#39;, pics_mid: \u0026#39;uploads/goodspics/mid_30f08d52c551ecb447277eae232304b8\u0026#39;, pics_sma: \u0026#39;uploads/goodspics/sma_30f08d52c551ecb447277eae232304b8\u0026#39; } ] 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;goods_id\u0026#34;: 96, \u0026#34;goods_name\u0026#34;: \u0026#34;iphoneXX\u0026#34;, \u0026#34;goods_price\u0026#34;: 2, \u0026#34;goods_number\u0026#34;: 22, \u0026#34;goods_weight\u0026#34;: 22, \u0026#34;goods_introduce\u0026#34;: null, \u0026#34;goods_big_logo\u0026#34;: \u0026#34;./uploads/goods/20201113/483a3b8e99e534ec3e4312dbbaee7c9d.jpg\u0026#34;, \u0026#34;goods_small_logo\u0026#34;: \u0026#34;./uploads/goods/20201113/small_483a3b8e99e534ec3e4312dbbaee7c9d.jpg\u0026#34;, \u0026#34;goods_state\u0026#34;: 0, \u0026#34;is_del\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;add_time\u0026#34;: 1510045904, \u0026#34;upd_time\u0026#34;: 1512635159, \u0026#34;delete_time\u0026#34;: 1512635159, \u0026#34;hot_mumber\u0026#34;: 0, \u0026#34;is_promote\u0026#34;: false, \u0026#34;pics\u0026#34;: [ { \u0026#34;pics_id\u0026#34;: 383, \u0026#34;goods_id\u0026#34;: 96, \u0026#34;pics_big\u0026#34;: \u0026#34;uploads/goodspics/big_6f5750132abd3f5b2b93dd722fcde653.jpg\u0026#34;, \u0026#34;pics_mid\u0026#34;: \u0026#34;uploads/goodspics/mid_6f5750132abd3f5b2b93dd722fcde653.jpg\u0026#34;, \u0026#34;pics_sma\u0026#34;: \u0026#34;uploads/goodspics/sma_6f5750132abd3f5b2b93dd722fcde653.jpg\u0026#34; } ], \u0026#34;attrs\u0026#34;: [ { \u0026#34;goods_id\u0026#34;: 96, \u0026#34;attr_id\u0026#34;: 15, \u0026#34;attr_value\u0026#34;: \u0026#34;eee\u0026#34;, \u0026#34;add_price\u0026#34;: null, \u0026#34;attr_name\u0026#34;: \u0026#34;fffffff\u0026#34;, \u0026#34;attr_sel\u0026#34;: \u0026#34;many\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;\u0026#34; }, { \u0026#34;goods_id\u0026#34;: 96, \u0026#34;attr_id\u0026#34;: 15, \u0026#34;attr_value\u0026#34;: \u0026#34;ddd\u0026#34;, \u0026#34;add_price\u0026#34;: null, \u0026#34;attr_name\u0026#34;: \u0026#34;fffffff\u0026#34;, \u0026#34;attr_sel\u0026#34;: \u0026#34;many\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;\u0026#34; } ] }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;更新成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } ###同步商品属性\n请求路径：goods/:id/attributes\n请求方法：put\n请求参数\n参数名 参数说明 备注 id 商品 ID 不能为空携带在url中 请求数据 ;[ { attr_id: 15, attr_value: \u0026#39;ddd\u0026#39; }, { attr_id: 15, attr_value: \u0026#39;eee\u0026#39; } ] 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;goods_id\u0026#34;: 96, \u0026#34;goods_name\u0026#34;: \u0026#34;iphoneXX\u0026#34;, \u0026#34;goods_price\u0026#34;: 2, \u0026#34;goods_number\u0026#34;: 22, \u0026#34;goods_weight\u0026#34;: 22, \u0026#34;goods_introduce\u0026#34;: null, \u0026#34;goods_big_logo\u0026#34;: \u0026#34;./uploads/goods/20201113/483a3b8e99e534ec3e4312dbbaee7c9d.jpg\u0026#34;, \u0026#34;goods_small_logo\u0026#34;: \u0026#34;./uploads/goods/20201113/small_483a3b8e99e534ec3e4312dbbaee7c9d.jpg\u0026#34;, \u0026#34;goods_state\u0026#34;: 0, \u0026#34;is_del\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;add_time\u0026#34;: 1510045904, \u0026#34;upd_time\u0026#34;: 1512635159, \u0026#34;delete_time\u0026#34;: 1512635159, \u0026#34;hot_mumber\u0026#34;: 0, \u0026#34;is_promote\u0026#34;: false, \u0026#34;pics\u0026#34;: [ { \u0026#34;pics_id\u0026#34;: 383, \u0026#34;goods_id\u0026#34;: 96, \u0026#34;pics_big\u0026#34;: \u0026#34;uploads/goodspics/big_6f5750132abd3f5b2b93dd722fcde653.jpg\u0026#34;, \u0026#34;pics_mid\u0026#34;: \u0026#34;uploads/goodspics/mid_6f5750132abd3f5b2b93dd722fcde653.jpg\u0026#34;, \u0026#34;pics_sma\u0026#34;: \u0026#34;uploads/goodspics/sma_6f5750132abd3f5b2b93dd722fcde653.jpg\u0026#34; } ], \u0026#34;attrs\u0026#34;: [ { \u0026#34;goods_id\u0026#34;: 96, \u0026#34;attr_id\u0026#34;: 15, \u0026#34;attr_value\u0026#34;: \u0026#34;eee\u0026#34;, \u0026#34;add_price\u0026#34;: null, \u0026#34;attr_name\u0026#34;: \u0026#34;fffffff\u0026#34;, \u0026#34;attr_sel\u0026#34;: \u0026#34;many\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;\u0026#34; }, { \u0026#34;goods_id\u0026#34;: 96, \u0026#34;attr_id\u0026#34;: 15, \u0026#34;attr_value\u0026#34;: \u0026#34;ddd\u0026#34;, \u0026#34;add_price\u0026#34;: null, \u0026#34;attr_name\u0026#34;: \u0026#34;fffffff\u0026#34;, \u0026#34;attr_sel\u0026#34;: \u0026#34;many\u0026#34;, \u0026#34;attr_write\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;attr_vals\u0026#34;: \u0026#34;\u0026#34; } ] }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;更新成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } ###商品图片处理必须安装 GraphicsMagick\nlinux apt-get install GraphicsMagick Mac OS X brew install GraphicsMagick Windows 点击下载 6. 图片上传 请求路径：upload\n请求方法：post\n请求参数\n参数名 参数说明 备注 file 上传文件 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;tmp_path\u0026#34;: \u0026#34;tmp_uploads/ccfc5179a914e94506bcbb7377e8985f.png\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;http://127.0.0.1:8888tmp_uploads/ccfc5179a914e94506bcbb7377e8985f.png\u0026#34; }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;上传成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 九、订单管理 1. 订单数据列表 请求路径：orders\n请求方法：get\n请求参数\n参数名 参数说明 备注 query 查询参数 可以为空 pagenum 当前页码 可以为空，默认为1 pagesize 每页显示条数 可以为空，省略时返回所有订单 user_id 用户 ID 可以为空 pay_status 支付状态 可以为空 is_send 是否发货 可以为空 order_fapiao_title [\u0026lsquo;个人\u0026rsquo;,\u0026lsquo;公司\u0026rsquo;] 可以为空 order_fapiao_company 公司名称 可以为空 order_fapiao_content 发票内容 可以为空 consignee_addr 收货地址 可以为空 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;total\u0026#34;: 1, \u0026#34;pagenum\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;goods\u0026#34;: [ { \u0026#34;order_id\u0026#34;: 47, \u0026#34;user_id\u0026#34;: 133, \u0026#34;order_number\u0026#34;: \u0026#34;59e7502d7993d\u0026#34;, \u0026#34;order_price\u0026#34;: 322, \u0026#34;order_pay\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;is_send\u0026#34;: \u0026#34;是\u0026#34;, \u0026#34;trade_no\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;order_fapiao_title\u0026#34;: \u0026#34;个人\u0026#34;, \u0026#34;order_fapiao_company\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;order_fapiao_content\u0026#34;: \u0026#34;办公用品\u0026#34;, \u0026#34;consignee_addr\u0026#34;: \u0026#34;江苏省南京市秦淮区龙蟠中路666号\u0026#34;, \u0026#34;pay_status\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;create_time\u0026#34;: 1508331565, \u0026#34;update_time\u0026#34;: 1508331565 } ] }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 2. 修改订单状态 请求路径：orders/:id\n请求方法：put\n请求参数\n参数名 参数说明 备注 id 订单 ID 不能为空携带在url中 is_send 订单是否发货 1:已经发货，0:未发货 order_pay 订单支付 支付方式 0 未支付 1 支付宝 2 微信 3 银行卡 order_price 订单价格 order_number 订单数量 pay_status 支付状态 订单状态： 0 未付款、1 已付款 请求数据说明\n所有请求数据都是增量更新，如果参数不填写，就不会更新该字段 响应数据\n{ \u0026#34;data\u0026#34;: { \u0026#34;order_id\u0026#34;: 67, \u0026#34;user_id\u0026#34;: 1, \u0026#34;order_number\u0026#34;: \u0026#34;itany-g7kmck71vjaujfgoi\u0026#34;, \u0026#34;order_price\u0026#34;: 20, \u0026#34;order_pay\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;is_send\u0026#34;: \u0026#34;否\u0026#34;, \u0026#34;trade_no\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;order_fapiao_title\u0026#34;: \u0026#34;个人\u0026#34;, \u0026#34;order_fapiao_company\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;order_fapiao_content\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;consignee_addr\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;pay_status\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;create_time\u0026#34;: 1512533560, \u0026#34;update_time\u0026#34;: 1512533560, \u0026#34;goods\u0026#34;: [ { \u0026#34;id\u0026#34;: 82, \u0026#34;order_id\u0026#34;: 67, \u0026#34;goods_id\u0026#34;: 96, \u0026#34;goods_price\u0026#34;: 333, \u0026#34;goods_number\u0026#34;: 2, \u0026#34;goods_total_price\u0026#34;: 999 }, { \u0026#34;id\u0026#34;: 83, \u0026#34;order_id\u0026#34;: 67, \u0026#34;goods_id\u0026#34;: 95, \u0026#34;goods_price\u0026#34;: 666, \u0026#34;goods_number\u0026#34;: 5, \u0026#34;goods_total_price\u0026#34;: 999 } ] }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 3. 查看订单详情 请求路径：orders/:id\n请求方法：get\n请求参数\n参数名 参数说明 备注 id 订单 ID 不能为空携带在url中 响应数据 { \u0026#34;data\u0026#34;: { \u0026#34;order_id\u0026#34;: 67, \u0026#34;user_id\u0026#34;: 1, \u0026#34;order_number\u0026#34;: \u0026#34;itany-g7kmck71vjaujfgoi\u0026#34;, \u0026#34;order_price\u0026#34;: 20, \u0026#34;order_pay\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;is_send\u0026#34;: \u0026#34;否\u0026#34;, \u0026#34;trade_no\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;order_fapiao_title\u0026#34;: \u0026#34;个人\u0026#34;, \u0026#34;order_fapiao_company\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;order_fapiao_content\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;consignee_addr\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;pay_status\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;create_time\u0026#34;: 1512533560, \u0026#34;update_time\u0026#34;: 1512533560, \u0026#34;goods\u0026#34;: [ { \u0026#34;id\u0026#34;: 82, \u0026#34;order_id\u0026#34;: 67, \u0026#34;goods_id\u0026#34;: 96, \u0026#34;goods_price\u0026#34;: 333, \u0026#34;goods_number\u0026#34;: 2, \u0026#34;goods_total_price\u0026#34;: 999 }, { \u0026#34;id\u0026#34;: 83, \u0026#34;order_id\u0026#34;: 67, \u0026#34;goods_id\u0026#34;: 95, \u0026#34;goods_price\u0026#34;: 666, \u0026#34;goods_number\u0026#34;: 5, \u0026#34;goods_total_price\u0026#34;: 999 } ] }, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;获取成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 4. 修改地址 请求路径：orders/:id/address\n请求方法：put\n请求参数\n参数名 参数说明 备注 id 订单 ID 不能为空携带在url中 consignee_addr 收货地址 可以为空 响应数据 { \u0026#34;data\u0026#34;: {}, \u0026#34;meta\u0026#34;: { \u0026#34;msg\u0026#34;: \u0026#34;修改地址成功\u0026#34;, \u0026#34;status\u0026#34;: 200 } } 5. 查看物流信息 请求路径：/kuaidi/:id\n请求方法：get\n物流单号：815294206237577\n响应数据：\n{ \u0026#34;meta\u0026#34;:{ \u0026#34;status\u0026#34;:200, \u0026#34;message\u0026#34;:\u0026#34;获取物流信息成功！\u0026#34; }, \u0026#34;data\u0026#34;:[ { \u0026#34;time\u0026#34;:\u0026#34;2020-11-15 12:39:56\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-15 12:39:56\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;已签收,签收人是 汤小洋 先生/女士，如有疑问请联系派件员阿奇(13805148888)，如您未收到此快递，请拨打投诉电话：15294207777，感谢使用申通快递，期待再次为您服务\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-15 08:46:54\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-15 08:46:54\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;上海浦东寒亭营业厅-寒亭阿奇(13805148888)-派件中\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-15 08:38:57\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-15 08:38:57\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;已到达-上海浦东寒亭营业厅\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-15 06:38:13\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-15 06:38:13\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;已到达-上海浦东寒亭营业厅\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-14 20:56:45\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-14 20:56:45\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;上海浦东转运中心-已发往-上海浦东寒亭公司\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-14 20:52:44\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-14 20:52:44\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;已到达-上海浦东转运中心\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-14 17:43:48\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-14 17:43:48\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;已到达-上海浦东转运中心\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-14 10:53:46\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-14 10:53:46\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;上海浦东转运中心-已发往-上海浦东转运中心\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-14 10:43:31\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-14 10:43:31\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;已到达-上海浦东转运中心\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-14 02:43:20\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-14 02:43:20\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;江苏苏州转运中心-已发往-上海浦东转运中心\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-14 02:41:40\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-14 02:41:40\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;已到达-江苏苏州转运中心\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-13 16:28:13\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-13 16:28:13\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;江苏南京转运中心-已发往-江苏苏州转运中心\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-13 15:03:30\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-13 15:03:30\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;南京IT教育公司-已发往-江苏南京转运中心\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-13 14:47:56\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-13 14:47:56\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;南京IT教育公司-已发往-江苏南京转运中心\u0026#34;, \u0026#34;location\u0026#34;:null }, { \u0026#34;time\u0026#34;:\u0026#34;2020-11-13 14:37:06\u0026#34;, \u0026#34;ftime\u0026#34;:\u0026#34;2020-11-13 14:37:06\u0026#34;, \u0026#34;context\u0026#34;:\u0026#34;南京IT教育公司-城东汪小主宠物店-已收件\u0026#34;, \u0026#34;location\u0026#34;:null } ] } ","permalink":"https://waite.wang/posts/project/shop-mall-api-docs/","summary":"\u003ch2 id=\"一api-v2-接口说明\"\u003e一、API V2 接口说明\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e接口基准地址：\u003ccode\u003ehttp://www.tangxiaoyang.vip:8888/api/v2/\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e服务端已开启 CORS 跨域支持\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eAPI V2 认证统一使用 Token 认证\u003c/p\u003e","title":"电商后台管理系统后端api接口文档"},{"content":"Idea2023.2 创建 Servlet 项目 前期准备 正常创建 Java 项目, 添加框架支持 Web 模块\n2023.2 之后 Idea 新 UI 把添加框架支持移到了 Ctrl + Alt + Shift + S(项目结构) -\u0026gt; 模块 -\u0026gt; + 如果想要之前一样右键添加框架支持, 可以设置 -\u0026gt; 添加按键映射 -\u0026gt; 添加快捷键 -\u0026gt; 之后用快捷键使用即可 项目结构 -\u0026gt; 模块 -\u0026gt; 添加模块\n修改项目结构 配置 Tomcat, 可查看之前文章 开始 在 src 右键创建 Servlet 文件 如果右键new的时候没有servlet? 因为2023版的IDEA已经不支持Servlet了，但是如果还要使用的话，可以自己创建模板使用 设置 -\u0026gt; 编辑器 -\u0026gt; 文件和代码模板 #if (${PACKAGE_NAME} \u0026amp;\u0026amp; ${PACKAGE_NAME} != \u0026#34;\u0026#34;)package ${PACKAGE_NAME};#end #parse(\u0026#34;File Header.java\u0026#34;) import java.io.*; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.io.IOException; @WebServlet(\u0026#34;/${Class_Name}\u0026#34;) public class ${Class_Name} extends HttpServlet { private String message; public void init() { } @Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException { } @Override protected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException { this.doGet(request, response); } } 简单应用 Hello World\nimport java.io.IOException; import javax.servlet.ServletException; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; public class HelloServlet extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { resp.setContentType(\u0026#34;text/html\u0026#34;); resp.getWriter().println(\u0026#34;\u0026lt;h1\u0026gt;Welcome\u0026lt;/h1\u0026gt;\u0026#34;); } } WEB-INF/ web.xml\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;web-app xmlns=\u0026#34;http://xmlns.jcp.org/xml/ns/javaee\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\u0026#34; version=\u0026#34;4.0\u0026#34;\u0026gt; \u0026lt;!-- 配置 Servlet --\u0026gt; \u0026lt;servlet\u0026gt; \u0026lt;servlet-name\u0026gt;helloServlet\u0026lt;/servlet-name\u0026gt; \u0026lt;servlet-class\u0026gt;HelloServlet\u0026lt;/servlet-class\u0026gt; \u0026lt;/servlet\u0026gt; \u0026lt;servlet-mapping\u0026gt; \u0026lt;servlet-name\u0026gt;helloServlet\u0026lt;/servlet-name\u0026gt; \u0026lt;url-pattern\u0026gt;/hello\u0026lt;/url-pattern\u0026gt; \u0026lt;/servlet-mapping\u0026gt; \u0026lt;/web-app\u0026gt; 过滤器\nimport java.io.IOException; import javax.servlet.Filter; import javax.servlet.FilterChain; import javax.servlet.FilterConfig; import javax.servlet.ServletException; import javax.servlet.ServletRequest; import javax.servlet.ServletResponse; import javax.servlet.annotation.WebFilter; @WebFilter(\u0026#34;/*\u0026#34;) public class CharacterEncodingFilter implements Filter { private String encoding; @Override public void init(FilterConfig filterConfig) throws ServletException { encoding = filterConfig.getInitParameter(\u0026#34;encoding\u0026#34;); if (encoding == null) { encoding = \u0026#34;UTF-8\u0026#34;; // 默认使用 UTF-8 编码 } } @Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException { request.setCharacterEncoding(encoding); response.setCharacterEncoding(encoding); chain.doFilter(request, response); } @Override public void destroy() { // 清理资源（如果有需要的话） } } 项目结构如下\n","permalink":"https://waite.wang/posts/jsp/idea-create-project-of-servlet/","summary":"\u003ch2 id=\"idea20232-创建-servlet-项目\"\u003eIdea2023.2 创建 Servlet 项目\u003c/h2\u003e\n\u003ch2 id=\"前期准备\"\u003e前期准备\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e正常创建 Java 项目, 添加框架支持 Web 模块\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e2023.2 之后 Idea 新 UI 把添加框架支持移到了 Ctrl + Alt + Shift + S(项目结构) -\u0026gt; 模块 -\u0026gt; +\u003c/li\u003e\n\u003cli\u003e如果想要之前一样右键添加框架支持, 可以设置 -\u0026gt; 添加按键映射 -\u0026gt; 添加快捷键 -\u0026gt; 之后用快捷键使用即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://qiniu.waite.wang/202311021151150.png\"\u003e\u003c/p\u003e","title":"Idea2023.2 创建 Servlet 项目"},{"content":"JSP 访问数据库 mysql-connector-java的jar包下载 官方下载地址 https://dev.mysql.com/downloads/connector/j/ 解压, 把JDBC驱动放在lib文件夹下（直接复制过来就可以了） 记得导入, 不然会报错\n\u0026lt;%@ page import=\u0026#34;java.sql.*\u0026#34; %\u0026gt; 基本用法 连接MySQL数据库 在JSP中连接MySQL数据库的步骤如下：\n下载并安装MySQL数据库，启动MySQL服务。 在MySQL中创建一个数据库和表，用于存储数据。可以使用MySQL自带的命令行工具或者图形化界面工具，例如phpMyAdmin等。 在JSP中使用JDBC连接MySQL数据库，获取数据库连接对象。 使用数据库连接对象创建Statement或者PreparedStatement对象，执行SQL语句。 处理SQL执行结果，关闭数据库连接。 以下是一个简单的JSP连接MySQL数据库并查询数据的示例代码：\n\u0026lt;%@ page language=\u0026#34;java\u0026#34; contentType=\u0026#34;text/html; charset=UTF-8\u0026#34; pageEncoding=\u0026#34;UTF-8\u0026#34;%\u0026gt; \u0026lt;% // 导入JDBC相关的类 \u0026lt;%@ page import=\u0026#34;java.sql.*\u0026#34; %\u0026gt; // 定义数据库连接信息 String url = \u0026#34;jdbc:mysql://localhost:3306/test\u0026#34;; String user = \u0026#34;root\u0026#34;; String password = \u0026#34;123456\u0026#34;; Connection conn = null; Statement stmt = null; ResultSet rs = null; try { // 加载MySQL驱动程序 Class.forName(\u0026#34;com.mysql.jdbc.Driver\u0026#34;); // 获取数据库连接 conn = DriverManager.getConnection(url, user, password); // 创建Statement对象 stmt = conn.createStatement(); // 执行SQL查询语句 String sql = \u0026#34;SELECT * FROM records\u0026#34;; rs = stmt.executeQuery(sql); // 输出查询结果 while (rs.next()) { out.println(\u0026#34;id: \u0026#34; + rs.getInt(\u0026#34;id\u0026#34;) + \u0026#34;\u0026lt;br\u0026gt;\u0026#34;); out.println(\u0026#34;name: \u0026#34; + rs.getString(\u0026#34;name\u0026#34;) + \u0026#34;\u0026lt;br\u0026gt;\u0026#34;); out.println(\u0026#34;age: \u0026#34; + rs.getInt(\u0026#34;age\u0026#34;) + \u0026#34;\u0026lt;br\u0026gt;\u0026#34;); out.println(\u0026#34;\u0026lt;hr\u0026gt;\u0026#34;); } } catch (ClassNotFoundException e) { e.printStackTrace(); } catch (SQLException e) { e.printStackTrace(); } finally { // 关闭数据库连接 if (rs != null) { rs.close(); } if (stmt != null) { stmt.close(); } if (conn != null) { conn.close(); } } %\u0026gt; 在上面的示例中，我们首先定义了MySQL数据库的连接信息，包括数据库URL、用户名和密码。然后使用Class.forName()方法加载MySQL驱动程序，获取数据库连接对象，并使用createStatement()方法创建Statement对象，执行SQL查询语句，并使用ResultSet对象获取查询结果集，最后遍历结果集输出查询结果。最后，我们在finally代码块中关闭数据库连接。\n需要注意的是，在实际开发中，我们应该将数据库连接信息配置在配置文件中，然后使用Properties对象读取配置文件中的信息，这样可以提高代码的可维护性和安全性。同时，我们也应该尽量避免在JSP页面中直接编写SQL语句，而是应该将数据库操作封装在Java类中，然后在JSP页面中调用这些Java类来执行数据库操作。\n用结果集操作数据库中的表 在JSP中，我们可以使用ResultSet对象来操作数据库中的表，ResultSet对象表示一个结果集，它包含了一组查询结果的数据行。\n在JSP中，我们可以使用ResultSet对象来操作数据库中的表，ResultSet对象表示一个结果集，它包含了一组查询结果的数据行。\n\u0026lt;%@ page language=\u0026#34;java\u0026#34; contentType=\u0026#34;text/html; charset=UTF-8\u0026#34; pageEncoding=\u0026#34;UTF-8\u0026#34;%\u0026gt; \u0026lt;% Connection conn = null; Statement stmt = null; ResultSet rs = null; try { // 获取数据库连接 conn = getConnection(); // 创建Statement对象 stmt = conn.createStatement(); // 执行查询语句 String sql = \u0026#34;SELECT * FROM records\u0026#34;; rs = stmt.executeQuery(sql); // 处理查询结果 while (rs.next()) { int id = rs.getInt(\u0026#34;id\u0026#34;); String name = rs.getString(\u0026#34;name\u0026#34;); int age = rs.getInt(\u0026#34;age\u0026#34;); // 输出结果 out.println(\u0026#34;id=\u0026#34; + id + \u0026#34;, name=\u0026#34; + name + \u0026#34;, age=\u0026#34; + age + \u0026#34;\u0026lt;br\u0026gt;\u0026#34;); } } catch (SQLException e) { e.printStackTrace(); } finally { // 关闭数据库连接 if (rs != null) { rs.close(); } if (stmt != null) { stmt.close(); } if (conn != null) { conn.close(); } } %\u0026gt; 在上面的示例中，我们使用了一个名为getConnection()的方法来获取数据库连接，这个方法需要根据具体的数据库类型和配置来实现。另外，我们还使用了Statement对象来执行SQL查询语句，并使用executeQuery()方法获取查询结果的ResultSet对象。然后我们使用ResultSet对象的next()方法逐行读取查询结果，并使用getInt()和getString()等方法获取每一行的数据。\n需要注意的是，在使用ResultSet对象操作数据库时，我们应该尽量避免在JSP页面中直接编写SQL语句，而是应该将数据库操作封装在Java类中，然后在JSP页面中调用这些Java类来执行数据库操作。这样可以提高代码的可维护性和安全性。\n预处理语句 JSP中可以使用预处理语句（PreparedStatement）来执行SQL语句，预处理语句可以有效地防止SQL注入攻击，并提高数据库操作的效率。\n预处理语句通常包含一个带有占位符的SQL语句和一组参数，占位符使用?表示。在执行预处理语句时，我们需要将参数设置到占位符中，然后执行预处理语句。\n以下是一个简单的JSP预处理语句的示例代码：\n\u0026lt;%@ page language=\u0026#34;java\u0026#34; contentType=\u0026#34;text/html; charset=UTF-8\u0026#34; pageEncoding=\u0026#34;UTF-8\u0026#34;%\u0026gt; \u0026lt;% Connection conn = null; PreparedStatement stmt = null; ResultSet rs = null; try { // 获取数据库连接 conn = getConnection(); // 定义预处理语句 String sql = \u0026#34;SELECT * FROM records WHERE id = ?\u0026#34;; stmt = conn.prepareStatement(sql); // 设置参数 stmt.setInt(1, 1); // 执行预处理语句 rs = stmt.executeQuery(); while (rs.next()) { // 处理查询结果 int id = rs.getInt(\u0026#34;id\u0026#34;); String name = rs.getString(\u0026#34;name\u0026#34;); int age = rs.getInt(\u0026#34;age\u0026#34;); // 输出结果 out.println(\u0026#34;id=\u0026#34; + id + \u0026#34;, name=\u0026#34; + name + \u0026#34;, age=\u0026#34; + age + \u0026#34;\u0026lt;br\u0026gt;\u0026#34;); } } catch (SQLException e) { e.printStackTrace(); } finally { // 关闭数据库连接 if (rs != null) { rs.close(); } if (stmt != null) { stmt.close(); } if (conn != null) { conn.close(); } } %\u0026gt; 在上面的示例中，我们使用了一个名为getConnection()的方法来获取数据库连接，这个方法需要根据具体的数据库类型和配置来实现。另外，我们还使用了PreparedStatement对象来执行SQL语句，并使用setInt()方法将参数设置到占位符中。\n需要注意的是，预处理语句通常比普通的SQL语句执行速度更快，因为预处理语句可以将SQL语句编译一次，然后多次执行，而普通的SQL语句每次执行都需要重新编译。另外，预处理语句也可以有效地防止SQL注入攻击，因为预处理语句会自动将参数进行转义。\n另外，为了防止SQL注入攻击，我们应该将查询参数使用PreparedStatement来设置，而不是直接拼接SQL语句。例如：\nString sql = \u0026#34;SELECT * FROM records LIMIT ?, ?\u0026#34;; PreparedStatement stmt = conn.prepareStatement(sql); stmt.setInt(1, start); stmt.setInt(2, pageSize); ResultSet rs = stmt.executeQuery(); ","permalink":"https://waite.wang/posts/jsp/jsp-connect-mysql/","summary":"\u003ch1 id=\"jsp-访问数据库\"\u003eJSP 访问数据库\u003c/h1\u003e\n\u003ch2 id=\"mysql-connector-java的jar包下载\"\u003emysql-connector-java的jar包下载\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e官方下载地址 \u003ca href=\"https://dev.mysql.com/downloads/connector/j/\"\u003ehttps://dev.mysql.com/downloads/connector/j/\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://qiniu.waite.wang/202310121220594.png\"\u003e\u003c/p\u003e\n\u003col start=\"2\"\u003e\n\u003cli\u003e解压, 把JDBC驱动放在lib文件夹下（直接复制过来就可以了）\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://qiniu.waite.wang/202310121223954.png\"\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e记得导入, 不然会报错\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e\u0026lt;%\u003c/span\u003e\u003cspan class=\"err\"\u003e@\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epage\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eimport\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;java.sql.*\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e%\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"基本用法\"\u003e基本用法\u003c/h2\u003e\n\u003ch3 id=\"连接mysql数据库\"\u003e连接MySQL数据库\u003c/h3\u003e\n\u003cp\u003e在JSP中连接MySQL数据库的步骤如下：\u003c/p\u003e","title":"JSP 访问数据库"},{"content":"nvm 的使用 nvm 可以快速的切换 nodejs 的版本\nnvm 是什么？ nvm 是一个 node 的版本管理工具，可以简单操作 node 版本的切换、安装、查看。。。等等，与 npm 不同的是，npm 是依赖包的管理工具。\nnvm 下载安装\n安装之前需要先把 自己电脑上边的 node 给卸载了!!!! 很重要\n下载地址：https://github.com/coreybutler/nvm-windows/releases\n安装完毕后输入 nvm -v 查看版本。这样 nvm 就已经安装完成了\nnvm 的基本使用\nnrm 的使用 可以快速切换下载镜像 介绍\nnrm(npm registry manager) 是 npm 的镜像源管理工具. 有时候国外资源太慢,使用 nrm 可以快速的在 npm 源之间切换\n安装 npm install -g nrm\n基本使用\n查看可选择的源 nrm ls 切换到对应的镜像源 nrm use 对应的镜像 删除镜像源 nrm del 名字 增加镜像源 nrm add registry http://registry.npm.frp/trmap.cn/ 测试镜像源速度 nrm test npm ","permalink":"https://waite.wang/posts/web/how-to-use-nvm/","summary":"\u003ch1 id=\"nvm-的使用\"\u003e\u003cstrong\u003envm 的使用\u003c/strong\u003e\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003envm 可以快速的切换 nodejs 的版本\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"nvm-是什么\"\u003e\u003cstrong\u003envm 是什么？\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003envm 是一个 node 的版本管理工具，可以简单操作 node 版本的切换、安装、查看。。。等等，与 npm 不同的是，npm 是依赖包的管理工具。\u003c/p\u003e","title":"nvm 的使用"},{"content":"Jdk 安装 Tomcat 注意 Tomcat 版本与 Jdk 匹配\n官网地址：https://tomcat.apache.org/\n我这里选择的是Tomcat9.0版本，大家可以选择自己需要的版本\n将下载好的zip文件解压到指定文件夹，例如：D:\\software\\tomcat90，目录不要有中文（建议不要解压到C盘 ）\n配置Tomcat环境变量 Tomcat的环境变量配置跟JDK的环境变量配置几乎一样，只是修改变量名称和对应的路径，具体操作如下:\n右击此电脑\u0026ndash;属性 单击高级系统设置\u0026ndash;高级环境变量(N) 在系统变量下面找到新建，填写变量名：CATALINA_HOME，变量值：D:\\software\\tomcat90\\apache-tomcat-9.0.74（即Tomcat的安装路径） 在系统变量找到变量名Path\u0026ndash;单击Path\u0026ndash;编辑\u0026ndash;新建\u0026ndash;输入\u0026quot;%CATALINA_HOME%\\bin\u0026quot;\u0026ndash;确定\u0026ndash;确定\u0026ndash;确定 测试环境变量是否配置成功 点击屏幕左下角的“开始”按钮\u0026ndash;搜索命令提示符\u0026ndash;右键以管理员身份运行（以管理员身份进入防止权限问题的错误）\u0026ndash;输入cmd回车进入命令行窗口\u0026ndash;进入Tomcat的bin目录，输入service.bat install [服务名,默认为配置文件中名称Tomcat9] 进行window服务安装，我这个已经安装完了，window服务已经存在了所以显示error，如果出现 The service \u0026lsquo;Tomcat9\u0026rsquo; has been installed.则表明安装服务成功！ 在目录下 管理员 cmd 运行 startup.bat 以上页面表示运行成功, 浏览器打开 127.0.0.1:8080 即可看到 Tomcat 起始页面 改端口 找到tomcat目录/conf/server.xml\n选择以记事本打开，把8080改为你想修改的端口号，这里选择修改为8，修改后保存 注意： 1）修改的端口一定不能被占用 2）修改完成后，进入bin目录，先启动shutdown.bat，再启动startup.bat 重启tomcat服务器\nIdea 配置 1.先新建一个正常的java项目\n2.运行下拉框找到编辑配置，点击\n3.找到tomcat服务器，选择本地那个\n4.配置你的tomcat文件的路径，在tomcat项目启动完成后打开浏览器，这里选择你电脑上安装的一款浏览器即可，点击确定\n5.右键点击项目，选择添加框架支持，点击\n6.勾选web应用程序与创建web.xml，点击确定\n7.找到运行箭头左边的tomcat图标，点击，选择编辑配置，点击\n点击部署 添加工件，点击 选择你的项目，上下文那一栏填写一个/即可 运行左边的tomcat图标没有❌时，就代表配置成功，编辑你的项目文件，点击运行即可 运行成功会自动打开你自己设置的默认浏览器 建议开启以下功能, 这样不用每次都要重新部署\n设置JSP代码自动补全 File -\u0026gt; Project Structure，打开项目设置页面；选择到“Dependencies”便签 -\u0026gt; 点击“+”-\u0026gt; 2.Librarys： 在Choose Libraries页面，选择“Tomcat”:\n将Tomcat的Scope设置为Provinced，然后保存设置：\n","permalink":"https://waite.wang/posts/win/tomcat-idea-install/","summary":"\u003ch2 id=\"jdk-安装\"\u003eJdk 安装\u003c/h2\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://qiniu.waite.wang/0_0_13.png\"\u003e\u003c/p\u003e\n\u003ch2 id=\"tomcat\"\u003eTomcat\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e注意 Tomcat 版本与 Jdk 匹配\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://qiniu.waite.wang/20230906133609.png\"\u003e\u003c/p\u003e\n\u003cp\u003e官网地址：https://tomcat.apache.org/\u003c/p\u003e\n\u003cp\u003e我这里选择的是Tomcat9.0版本，大家可以选择自己需要的版本\u003c/p\u003e","title":"Tomcat + Idea 配置及使用"},{"content":"安装JDK 1.创建工作路径\nmkdir /usr/cx 2.解压安装包\ntar -zxvf 安装包位置 -C /usr/cx 3.配置环境变量\nvi ~/.bashrc 在打开的~/.bashrc文件中写入一下内容\n# .bashrc # User specific aliases and functions alias rm=\u0026#39;rm -i\u0026#39; alias cp=\u0026#39;cp -i\u0026#39; alias mv=\u0026#39;mv -i\u0026#39; # Source global definitions if [ -f /etc/bashrc ]; then . /etc/bashrc fi (----------------注：需要在此处增加内容-------------------) --在这添加-- export JAVA_HOME=/usr/cx/jdk名字版本 export PATH=$JAVA_HOME/bin:$PATH export CLASSPATH=:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/jre/lib/tools.jar 4.更新环境变量\nsource ~/.bashrc 5.验证jdk是否配置成功\njava -version 主机名配置 1.编辑主机名\nvi /etc/sysconfig/network 打开后的文件如下\nNETWORKING=yes HOSTNAME=CentOS6.5 -----将此地方更改为localhost ----注意若为本地主机则更改为localhost不是则更改为别的地址 更给后输入reboot重启\nreboot 2.IP地址与主机名映射文件配置\nvi /etc/hosts 打开后的文件如下\n127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4 (注：在此行增加内容) ::1 localhost localhost.localdomain localhost6 localhost6.localdomain6 在第一行的ip地址后面添加一个localhost ----注意若为本地主机则更改为localhost不是则更改为别的地址 3.检测主机名与IP映射是否配置成功\nping localhost -c 4 SElinux安全配置 1.关闭SElinux\n通过命令使用vi编辑器打开SElinux配置文件\nvi /etc/selinux/config 打开后的文件如下\n# This file controls the state of SELinux on the system. # SELINUX= can take one of these three values: # enforcing - SELinux security policy is enforced. # permissive - SELinux prints warnings instead of enforcing. # disabled - No SELinux policy is loaded. SELINUX=permissive ------ 将这里的值更改为disabled (注：需要更改此行内容) # SELINUXTYPE= can take one of these two values: # targeted - Targeted processes are protected, # mls - Multi Level Security protection. SELINUXTYPE=targeted 2.SElinux配置强制生效\nsetenforce 0 配置SSH免密码登录 1.生成密钥\n输入一下命令生成本机密钥文件\nssh-keygen -t dsa 当出现提示的时候，我们直接按回车即可，默认会将秘钥文件生成到~/.ssh/目录下（由于我们实验所使用的登录用户为root，因此~/.ssh/等同于/root/.ssh/）\n通过一下命令查看~/.ssh目录下的文件\nls ~/.ssh 2.密钥分发\n把当前节点的公钥文件id_dsa.pub内容输出追加到任意节点的~/.ssh/authorized_keys文件的末尾，则在被添加的节点上便可以免密码登录到当前的节点（由于我们是单节点部署，因此直接追加到当前节点的~/.ssh/authorized_keys文件中即可\ncat ~/.ssh/id_dsa.pub \u0026gt;\u0026gt; ~/.ssh/authorized_keys 3.验证免密码登录是否配置成功\nssh localhost ----注意若为本地主机则更改为localhost不是则更改为别的地址 第一次登录的时候，会询问呢是否继续连接，输入yes即可\n连接成功后退出连接\nexit 安装Hadoop 1.解压安装文件\ntar -zxvf Hadoop安装包位置 -C /usr/cx 2.配置Hadoop环境变量\nvi ~/.bashrc 打开后的文件如下\n# .bashrc # User specific aliases and functions alias rm=\u0026#39;rm -i\u0026#39; alias cp=\u0026#39;cp -i\u0026#39; alias mv=\u0026#39;mv -i\u0026#39; # Source global definitions if [ -f /etc/bashrc ]; then . /etc/bashrc fi export JAVA_HOME=/usr/cx/jdk+版本 export PATH=$JAVA_HOME/bin:$PATH export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/jre/lib/tools.jar (----------------在此处增加内容-------------------) export HADOOP_HOME=/usr/cx/hadoop+版本 export PATH=$PATH:$HADOOP_HOME/bin:$PATH export PATH=$PATH:$HADOOP_HOME/sbin:$PATH 退出后执行如下命令，更新环境变量\nsource ~/.bashrc 通过下列命令验证Hadoop环境变量是否配置成功\nhadoop 3.编辑Hadoop配置文件\n使用vi命令打开hadoop-env.sh配置文件进行编辑:\nvi /usr/cx/hadoop版本/etc/hadoop/hadoop-env.sh 打开后的文件如下\n# Set Hadoop-specific environment variables here. # The only required environment variable is JAVA_HOME. All others are # optional. When running a distributed configuration it is best to # set JAVA_HOME in this file, so that it is correctly defined on # remote nodes. # The java implementation to use. export JAVA_HOME=${JAVA_HOME} ---更改为 export JAVA_HOME=/usr/cx/jdk+版本 (注：需要对此行内容进行更改，为Hadoop绑定Java运行环境) # The jsvc implementation to use. Jsvc is required to run secure datanodes # that bind to privileged ports to provide authentication of data transfer # protocol. Jsvc is not required if SASL is configured for authentication of # data transfer protocol using non-privileged ports. #export JSVC_HOME=${JSVC_HOME} export HADOOP_CONF_DIR=${HADOOP_CONF_DIR:-\u0026#34;/etc/hadoop\u0026#34;} 使用vi命令打开core-site.xml配置文件进行编辑\nvi /usr/cx/hadoop+版本/etc/hadoop/core-site.xml 打开的文件内容如下\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;?xml-stylesheet type=\u0026#34;text/xsl\u0026#34; href=\u0026#34;configuration.xsl\u0026#34;?\u0026gt; \u0026lt;!-- Licensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. See accompanying LICENSE file. --\u0026gt; \u0026lt;!-- Put site-specific property overrides in this file. --\u0026gt; \u0026lt;configuration\u0026gt; (注：需要在此处进行相关内容配置) /*设置默认的HDFS访问路径*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;fs.defaultFS\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;hdfs://localhost:9000\u0026lt;/value\u0026gt; ----注意若为本地主机则更改为localhost不是则更改为别的地址 \u0026lt;/property\u0026gt; /*缓冲区大小：io.file.buffer.size默认是4KB*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;io.file.buffer.size\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;131072\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*临时文件夹路径设置*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;hadoop.tmp.dir\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;file:/usr/tmp\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*设置使用hduser用户可以代理所有主机用户进行任务提交*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;hadoop.proxyuser.hduser.hosts\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;*\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*设置使用hduser用户可以代理所有组用户进行任务提交*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;hadoop.proxyuser.hduser.groups\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;*\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;/configuration\u0026gt; 退出vi编辑器后输入以下vi命令打开yarn-site.xml文件进行配置\nvi /usr/cx/hadoop+版本/etc/hadoop/yarn-site.xml 打开后的文件内容如下\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; \u0026lt;!-- Licensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. See accompanying LICENSE file. --\u0026gt; \u0026lt;configuration\u0026gt; (注：需要在此处进行相关内容配置) \u0026lt;!-- Site specific YARN configuration properties --\u0026gt; /*设置NodeManager上运行的附属服务，需配置成mapreduce_shuffle才可运行MapReduce程序*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.nodemanager.aux-services\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;mapreduce_shuffle\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.nodemanager.aux-services.mapreduce.shuffle.class\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;org.apache.hadoop.mapred.ShuffleHandler\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*设置客户端与ResourceManager的通信地址*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.resourcemanager.address\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;localhost:8032\u0026lt;/value\u0026gt; ----注意若为本地主机则更改为localhost不是则更改为别的地址 \u0026lt;/property\u0026gt; /*设置ApplicationMaster调度器与ResourceManager的通信地址*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.resourcemanager.scheduler.address\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;localhost:8030\u0026lt;/value\u0026gt; ----注意若为本地主机则更改为localhost不是则更改为别的地址 \u0026lt;/property\u0026gt; /*设置NodeManager与ResourceManager的通信地址*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.resourcemanager.resource-tracker.address\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;localhost:8031\u0026lt;/value\u0026gt; ----注意若为本地主机则更改为localhost不是则更改为别的地址 \u0026lt;/property\u0026gt; /*设置管理员与ResourceManager的通信地址*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.resourcemanager.admin.address\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;localhost:8033\u0026lt;/value\u0026gt; ----注意若为本地主机则更改为localhost不是则更改为别的地址 \u0026lt;/property\u0026gt; /* ResourceManager的Web地址，监控资源调度*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.resourcemanager.webapp.address\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;localhost:8088\u0026lt;/value\u0026gt; ----注意若为本地主机则更改为localhost不是则更改为别的地址 \u0026lt;/property\u0026gt; \u0026lt;/configuration\u0026gt; 使用下列命令复制mapred-site.xml.template文件并重命名为mapred-site.xml：\ncp /usr/cx/hadoop+版本/etc/hadoop/mapred-site.xml.template /usr/cx/hadoop+版本/etc/hadoop/mapred-site.xml 使用vi命令打开mapred-site.xml文件进行配置：\nvi /usr/cx/hadoop+版本/etc/hadoop/mapred-site.xml 打开后的文件内容如下\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; \u0026lt;?xml-stylesheet type=\u0026#34;text/xsl\u0026#34; href=\u0026#34;configuration.xsl\u0026#34;?\u0026gt; \u0026lt;!-- Licensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. See accompanying LICENSE file. --\u0026gt; \u0026lt;!-- Put site-specific property overrides in this file. --\u0026gt; \u0026lt;configuration\u0026gt; (注：需要在此处进行相关内容配置) /*Hadoop对MapReduce运行框架一共提供了3种实现，在mapred-site.xml中通过\u0026#34;mapreduce.framework.name\u0026#34;这个属性来设置为\u0026#34;classic\u0026#34;、\u0026#34;yarn\u0026#34;或者\u0026#34;local\u0026#34;*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;mapreduce.framework.name\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;yarn\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*MapReduce JobHistory Server地址*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;mapreduce.jobhistory.address\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;localhost:10020\u0026lt;/value\u0026gt; ----注意若为本地主机则更改为localhost不是则更改为别的地址 \u0026lt;/property\u0026gt; /*MapReduce JobHistory Server Web UI访问地址*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;mapreduce.jobhistory.webapp.address\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;localhost:19888\u0026lt;/value\u0026gt; ----注意若为本地主机则更改为localhost不是则更改为别的地址 \u0026lt;/property\u0026gt; \u0026lt;/configuration\u0026gt; 执行以下命令创建Hadoop的数据存储目录namenode和datanode\nmkdir -p /hdfs/namenode mkdir -p /hdfs/datanode 使用vi命令打开hdfs-site.xml文件进行配置：\nvi /usr/cx/hadoop+版本/etc/hadoop/hdfs-site.xml 打开的文件内容如下\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;?xml-stylesheet type=\u0026#34;text/xsl\u0026#34; href=\u0026#34;configuration.xsl\u0026#34;?\u0026gt; \u0026lt;!-- Licensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. See accompanying LICENSE file. --\u0026gt; \u0026lt;!-- Put site-specific property overrides in this file. --\u0026gt; \u0026lt;configuration\u0026gt; (注：需要在此处进行相关内容配置) /*配置SecondaryNameNode地址*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.namenode.secondary.http-address\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;localhost:9001\u0026lt;/value\u0026gt; ----注意若为本地主机则更改为localhost不是则更改为别的地址 \u0026lt;/property\u0026gt; /*配置NameNode的数据存储目录，需要与上文创建的目录相对应*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.namenode.name.dir\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;file:/hdfs/namenode\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*配置DataNode的数据存储目录，需要与上文创建的目录相对应*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.datanode.data.dir\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;file:/hdfs/datanode\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*配置数据块副本数*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.replication\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;1\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*将dfs.webhdfs.enabled属性设置为true，否则就不能使用webhdfs的LISTSTATUS、LIST FILESTATUS等需要列出文件、文件夹状态的命令，因为这些信息都是由namenode保存的*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.webhdfs.enabled\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;true\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;/configuration\u0026gt; 使用vi命令打开slaves文件进行配置（要与我们前文设置的主机名相互一致，否则将会引起Hadoop相关进程无法正确启动）：\nvi /usr/cx/hadoop-2.7.1/etc/hadoop/slaves 打开的文件内容如下\nlocalhost ----注意若为本地主机则更改为localhost不是则更改为别的地址 若为localhost则不做更改，因为在本地机器而不是在易优云中需要连接到易优云的主机\n** 4.格式化HDFS **\n通过下列命令格式化HDFS文件系统\nhadoop namenode -format Hadoop运行及测试 ** 1.启动Hadoop**\n通过下列命令启动Hadoop：\nstart-all.sh 通过下列命令，查看相应的JVM进程确定Hadoop是否配置及启动成功：\njps ** Web页面测试**\n用浏览器输入网址 http://localhost:8080和http://localhost50070\n1 、实验目的 通过本节实验的学习，同学们可以掌握Hadoop集群环境部署与配置。本实验完成后，要求学生掌握以下内容：\n掌握集群所有节点之间SSH免密登录配置方式；\n掌握NTP服务配置，实现节点间的时间同步；\n掌握ZooKeeper集群的搭建方式；\n掌握Hadoop集群的搭建配置流程；\n理解Hadoop集群的高可用（HA）原理，并掌握Hadoop集群的高可用（HA）配置方法。\n2、实验原理 需要按照以下流程，在Linux上进行Hadoop集群的安装部署：\n主机名配置：在大型的Hadoop集群中，往往由成百上千个节点组成，如果通过IP地址对不同节点进行管理，那么集群维护的工作量将会十分繁重，因此在工程环境中，常常通过对每个节点设置唯一的主机名，从而实现对节点进行管理。\nSSH（安全外壳协议）免密码登录配置：推荐安装OpenSSH。Hadoop需要通过SSH来启动Slave列表中各台主机的守护进程，因此SSH也是必须安装的。\n安装配置JDK1.7（或更高版本）：Hadoop是用Java编写的程序，Hadoop的编译及MapReduce的运行都需要使用JDK，因此在安装Hadoop前，必须安装JDK1.7或更高版本。\nNTP服务配置：本实验需要在实现Hadoop集群搭建的同时，并进行高可用性（HA）的配置，因此需要通过ZooKeeper来对集群中的节点进行协调，而ZooKeeper需要保证节点间的时钟相互一致，因此需要在集群中配置NTP服务。\nSElinux安全配置：CentOS默认启用了SElinux，在网络服务方面权限要求比较严格，因此需要对SElinux安全配置进行更改。\nZooKeeper集群搭建：高可用性（HA）Hadoop集群的搭建需要依赖于ZooKeeper来对集群中的节点进行协调，因此需要进行ZooKeeper集群搭建。\nHadoop核心配置。Hadoop的稳定运行需要依赖于其核心配置文件，因此当上述准备工作就绪后，我们便需要着重进行配置文件编写来实现Hadoop的可靠运行。\n我们需要在节点1、节点2、节点3中进行高可用Hadoop集群环境的部署。各个节点所部署的服务如下所示：\n节点1 节点2 节点3 NameNode StandBy ResourceManager StandBy DFSZKFailoverController DFSZKFailoverController DataNode DataNode DataNode NodeManager NodeManager NodeManager JournalNode JournalNode JournalNode 1 集群节点基本配置 步骤1. 节点IP地址查询 在节点1、2、3中通过下面的命令查询节点IP地址： ifconfig 命令运行后的返回结果如下所示 (每台虚拟机的IP地址都是不同的，因此需要以实际地址信息为准）：\n[root@CentOS6 ~]# ifconfig eth6 Link encap:Ethernet HWaddr 02:00:1E:79:09:04 inet addr:10.1.1.4 Bcast:10.1.1.255 Mask:255.255.255.0 inet6 addr: fe80::1eff:fe79:904/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:20832 errors:0 dropped:0 overruns:0 frame:0 TX packets:13052 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:31392026 (29.9 MiB) TX bytes:929956 (908.1 KiB) lo Link encap:Local Loopback inet addr:127.0.0.1 Mask:255.0.0.0 inet6 addr: ::1/128 Scope:Host UP LOOPBACK RUNNING MTU:16436 Metric:1 RX packets:12 errors:0 dropped:0 overruns:0 frame:0 TX packets:12 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:0 RX bytes:720 (720.0 b) TX bytes:720 (720.0 b) [root@CentOS6 ~]# 需要记录三个节点的IP地址，在后文中我们需要根据此IP地址进行相关操作\n步骤2. 节点主机名配置 需要在节点1、2、3进行下列操作，将三个主机名分别配置为realtime-1，realtime-2，realtime-3\n通过下列命令使用vi编辑器编辑主机名配置文件： vi /etc/sysconfig/network 打开后的文件内容如下所示：\nNETWORKING=yes HOSTNAME=CentOS6.5 (注：需要将此行内容修改为实际的主机名realtime-1、realtime-2、realtime-3) 在文件中进行内容更改，将HOSTNAME字段内容配置成realtime-： HOSTNAME=realtime-1 编辑完成后保存文件并退出vi编辑器\n更改后的文件内容如下所示：\n更改后的内容会在下次系统重启的时候生效，通过下列命令重新启动系统： reboot 步骤3. 节点1、2、3主机名与IP地址映射文件配置 在节点1、2、3中，通过下列命令使用vi编辑器编辑hosts文件： vi /etc/hosts 打开后的文件内容如下所示：\n127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4 (注：在此行增加内容) ::1 localhost localhost.localdomain localhost6 localhost6.localdomain6 增加节点1、2、3的IP地址与主机名的映射关系、节点间的IP地址与主机名的映射关系、节点间的IP地址与主机名的映射关系，IP地址与主机名之间用空格分隔（主机名填写为前文配置的节点实际主机名称，IP地址需要根据上文中的查询结果来进行填写，并与实际的主机名相对应）： 10.1.1.4 realtime-1 10.1.1.3 realtime-2 10.1.1.206 realtime-3 更改后的文件内容如下所示\n127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4 ::1 localhost localhost.localdomain localhost6 localhost6.localdomain6 10.1.1.4 realtime-1 10.1.1.3 realtime-2 10.1.1.206 realtime-3 编辑完成后保存文件并退出vi编辑器\n通过下列命令检测主机名与IP映射是否配置成功： ping realtime-1 -c 2 如果配置成功，则会显示如下结果：\n[root@realtime-1 ~]# ping realtime-1 -c 2 (注：通过此命令向realtime-1节点发送2个报文) PING realtime-1 (10.1.1.4) 56(84) bytes of data. 64 bytes from realtime-1 (10.1.1.4): icmp_seq=1 ttl=64 time=1.98 ms 64 bytes from realtime-1 (10.1.1.4): icmp_seq=2 ttl=64 time=0.341 ms --- realtime-1 ping statistics --- 2 packets transmitted, 2 received, 0% packet loss, time 1001ms rtt min/avg/max/mdev = 0.341/1.163/1.985/0.822 ms [root@realtime-1 ~]# 通过下列命令检测主机名与IP映射是否配置成功： ping realtime-2 -c 2 如果配置成功，则会显示如下结果：\n[root@realtime-1 ~]# ping realtime-2 -c 2 (注：通过此命令向realtime-2节点发送2个报文) PING realtime-2 (10.1.1.3) 56(84) bytes of data. 64 bytes from realtime-2 (10.1.1.3): icmp_seq=1 ttl=64 time=0.047 ms 64 bytes from realtime-2 (10.1.1.3): icmp_seq=2 ttl=64 time=0.026 ms --- realtime-2 ping statistics --- 2 packets transmitted, 2 received, 0% packet loss, time 999ms rtt min/avg/max/mdev = 0.026/0.036/0.047/0.012 ms [root@realtime-1 ~]# 通过下列命令检测主机名与IP映射是否配置成功： ping realtime-3 -c 2 如果配置成功，则会显示如下结果：\n[root@realtime-1 ~]# ping realtime-3 -c 2 (注：通过此命令向realtime-3节点发送2个报文) PING realtime-3 (10.1.1.206) 56(84) bytes of data. 64 bytes from realtime-3 (10.1.1.206): icmp_seq=1 ttl=64 time=1.36 ms 64 bytes from realtime-3 (10.1.1.206): icmp_seq=2 ttl=64 time=0.315 ms --- realtime-3 ping statistics --- 2 packets transmitted, 2 received, 0% packet loss, time 1002ms rtt min/avg/max/mdev = 0.315/0.841/1.367/0.526 ms [root@realtime-1 ~]# 如果无法进行正常的报文发送，请检查主机名是否配置正确，同时请检查主机名与IP地址映射是否配置正确。\n2 配置SSH免密码登录 步骤1. 节点1、2、3秘钥配置及分发 例如节点1 : 需要在节点1进行下列操作，在节点1中生成秘钥文件，然后将公钥文件分发到节点2和节点3中，实现在节点1可以免密码登录到集群中的其他主机中。\n通过下面的命令生成密钥（使用rsa加密方式）： echo -e \u0026#34;\\n\u0026#34;|ssh-keygen -t rsa -N \u0026#34;\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1 默认情况下会在~/.ssh/文件夹下生成公钥文件id_rsa.pub和私钥文件id_rsa，通过下面的命令对~/.ssh/内容进行查看：\nll ~/.ssh/ 命令运行后的返回结果如下所示：\n[root@realtime-1 ~]# ll ~/.ssh/ 总用量 8 -rw-------. 1 root root 1675 11月 29 13:42 id_rsa -rw-r--r--. 1 root root 397 11月 29 13:42 id_rsa.pub [root@realtime-1 ~]# 通过下面的命令将公钥文件发送到本机以及其他两个节点，创建root免密钥通道（需要输入密码：111111）： ssh-copy-id -i /root/.ssh/id_rsa.pub root@realtime-1 # 其他的节点需要随之改动root@realtime-2 and root@realtime-3 命令运行后的返回结果如下所示：\n[root@realtime-1 ~]# ssh-copy-id -i /root/.ssh/id_rsa.pub root@realtime-1 The authenticity of host \u0026#39;realtime-1 (10.1.1.4)\u0026#39; can\u0026#39;t be established. RSA key fingerprint is 9f:3b:30:10:65:46:c9:c3:2b:fb:e5:28:38:39:9c:84. Are you sure you want to continue connecting (yes/no)? yes (注：此处需要输入yes) Warning: Permanently added \u0026#39;realtime-1,10.1.1.4\u0026#39; (RSA) to the list of known hosts. root@realtime-1\u0026#39;s password: （注：此处需要输入root用户密码，为111111） Now try logging into the machine, with \u0026#34;ssh \u0026#39;root@realtime-1\u0026#39;\u0026#34;, and check in: .ssh/authorized_keys to make sure we haven\u0026#39;t added extra keys that you weren\u0026#39;t expecting. [root@realtime-1 ~]# 步骤2. SSH免密码登录测试 集群中各个节点秘钥分发完毕后，可以通过ssh远程登录命令来测试免密码登录是否配置成功。为了操作统一，我们在节点3中进行下面的操作（在其他节点操作所实现的效果也是一样的）\n在节点3中通过下面的命令可以实现免密码远程登录到节点1： ssh realtime-1 #依次运行realtime-2 and realtime-3 命令运行后的返回结果如下所示：\n[root@realtime-3 ~]# ssh realtime-1 Last login: Thu Nov 29 14:08:34 2018 from realtime-3 [root@realtime-1 ~]# 如果从源主机到目的主机的登录过程中，出现需要输入密码的情况，那么需要检查是否已经成功将源主机的公钥文件发送到目的主机中\n3 安装配置JDK1.8 JDK需要在集群3个节点都进行安装，为了操作方便，我们在节点1进行下列操作，在节点1中通过ssh远程登录到节点2和节点3中，实现命令的分发与运行\n我们可以在Oracle JDK的官网下载相应版本的JDK，官网地址为:http://www.oracle.com/technetwork/java/javase/downloads/index.html\n步骤1. 创建工作路径 首先需要在终端中输入下列命令，在/usr目录下建立cx工作路径： mkdir /usr/cx 通过下面的命令实现在节点2和节点3的/usr目录下建立cx工作路径： ssh realtime-2 \u0026#34;mkdir /usr/cx\u0026#34; ssh realtime-3 \u0026#34;mkdir /usr/cx\u0026#34; 步骤2. 解压安装包 我们可以在/usr/software/目录下找到jdk-8u60-linux-x64.tar.gz安装包，通过下列命令将其解压到/usr/cx/目录下： tar -zxvf /usr/software/jdk-8u60-linux-x64.tar.gz -C /usr/cx 命令执行后的输出内容如下所示：\n(-------------------省略------------------------) jdk1.8.0_60/bin/jmc.ini jdk1.8.0_60/bin/jmap jdk1.8.0_60/bin/serialver jdk1.8.0_60/bin/wsgen jdk1.8.0_60/bin/jrunscript jdk1.8.0_60/bin/javah jdk1.8.0_60/bin/javac jdk1.8.0_60/bin/jvisualvm jdk1.8.0_60/bin/jcontrol jdk1.8.0_60/release [root@realtime-1 ~]# 通过下列命令实现在节点2和节点3中将jdk-8u60-linux-x64.tar.gz安装包解压到/usr/cx/目录下： ssh realtime-2 \u0026#34;tar -zxvf /usr/software/jdk-8u60-linux-x64.tar.gz -C /usr/cx\u0026#34; ssh realtime-3 \u0026#34;tar -zxvf /usr/software/jdk-8u60-linux-x64.tar.gz -C /usr/cx\u0026#34; 步骤3. 配置环境变量 通过下列命令使用vi编辑器打开 ~/.bashrc文件： vi ~/.bashrc 打开的~/.bashrc文件内容如下所示：\n# .bashrc # User specific aliases and functions alias rm=\u0026#39;rm -i\u0026#39; alias cp=\u0026#39;cp -i\u0026#39; alias mv=\u0026#39;mv -i\u0026#39; # Source global definitions if [ -f /etc/bashrc ]; then . /etc/bashrc fi (----------------注：需要在此处增加内容-------------------) 在文件中写入下列内容： export JAVA_HOME=/usr/cx/jdk1.8.0_60 export PATH=$JAVA_HOME/bin:$PATH export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/jre/lib/tools.jar 编辑完成后保存文件并退出vi编辑器。\n通过下面的命令将环境变量配置文件分发到节点2和节点3： scp ~/.bashrc root@realtime-2:~/.bashrc scp ~/.bashrc root@realtime-3:~/.bashrc 命令执行后的输出内容如下所示：\n[root@realtime-1 ~]# scp ~/.bashrc root@realtime-2:~/.bashrc .bashrc 100% 320 0.3KB/s 00:00 [root@realtime-1 ~]# 步骤4. 更新环境变量 执行如下命令，更新环境变量： source ~/.bashrc 执行如下命令，更新节点2和节点3的环境变量： ssh realtime-2 \u0026#34;source ~/.bashrc\u0026#34; ssh realtime-3 \u0026#34;source ~/.bashrc\u0026#34; 步骤5. 验证JDK是否配置成功 通过下面的命令验证JDK是否安装并配置成功： java -version 如果出现如下JDK版本信息，则说明安装配置成功：\n[root@realtime-1 ~]# java -version java version \u0026#34;1.8.0_60\u0026#34; (注：JDK版本号) Java(TM) SE Runtime Environment (build 1.8.0_60-b27) (注：Java运行环境版本号) Java HotSpot(TM) 64-Bit Server VM (build 25.60-b23, mixed mode) [root@realtime-1 ~]# 通过下面的命令验证节点2和节点3的JDK是否安装并配置成功： ssh realtime-2 \u0026#34;java -version\u0026#34; ssh realtime-3 \u0026#34;java -version\u0026#34; 如果没有正确输出相关版本信息，请检查~/.bashrc文件中的JDK环境变量是否配置正确，同时请确定是否使用source ~/.bashrc命令更新环境变量配置\n4 NTP服务配置 需要在集群的3台节点中都进行NTP服务的配置\n步骤1. NTP服务配置 在节点1、节点2、节点3中通过下面的命令打开NTP配置文件： vi /etc/ntp.conf 打开后的文件内容如下所示：\n（---------------省略----------------） # Permit all access over the loopback interface. This could # be tightened as well, but to do so would effect some of # the administrative functions. restrict 127.0.0.1 restrict -6 ::1 # Hosts on local network are less restricted. #restrict 192.168.1.0 mask 255.255.255.0 nomodify notrap # Use public servers from the pool.ntp.org project. # Please consider joining the pool (http://www.pool.ntp.org/join.html). server 0.centos.pool.ntp.org iburst （注：注释此行内容） server 1.centos.pool.ntp.org iburst （注：注释此行内容） server 2.centos.pool.ntp.org iburst （注：注释此行内容） server 3.centos.pool.ntp.org iburst （注：注释此行内容） （注：在此处增加内容） #broadcast 192.168.1.255 autokey # broadcast server （---------------省略----------------） 在文件中进行下列内容更改（通过server字段设置本机为NTP Serevr服务器，通过restrict限制realtime-2和realtime-3主机名对应的主机可以同步时间）：\n#server 0.centos.pool.ntp.org iburst #server 1.centos.pool.ntp.org iburst #server 2.centos.pool.ntp.org iburst #server 3.centos.pool.ntp.org iburst server 127.127.1.0 fudge 127.127.1.0 stratum 10 restrict realtime-2 nomodify notrap restrict realtime-3 nomodify notrap 更改完成后保存文件并退出编辑器\n步骤2. 启动NTP服务 为了操作方便，我们在节点1进行下列操作，在节点1中通过ssh远程登录到节点2和节点3中，实现命令的分发与运行。\n通过下面的命令在节点1中设定NTP服务自启动： chkconfig ntpd on 通过下面的命令在节点1中启动NTP服务： service ntpd start 命令运行后的返回结果如下所示：\n[root@realtime-1 ~]# service ntpd start 正在启动 ntpd： [确定] [root@realtime-1 ~]# 通过下面的命令在节点2中设定NTP服务自启动： ssh realtime-2 \u0026#34;chkconfig ntpd on\u0026#34; 通过下面的命令在节点2中启动NTP服务： ssh realtime-2 \u0026#34;service ntpd start\u0026#34; 命令运行后的返回结果如下所示：\n[root@realtime-1 ~]# ssh realtime-2 \u0026#34;service ntpd start\u0026#34; 正在启动 ntpd：[确定] [root@realtime-1 ~]# 通过下面的命令在节点3中设定NTP服务自启动： ssh realtime-3 \u0026#34;chkconfig ntpd on\u0026#34; 通过下面的命令在节点3中启动NTP服务： ssh realtime-3 \u0026#34;service ntpd start\u0026#34; 命令运行后的返回结果如下所示：\n[root@realtime-1 ~]# ssh realtime-3 \u0026#34;service ntpd start\u0026#34; 正在启动 ntpd：[确定] [root@realtime-1 ~]# 如果服务无法正常启动，会出现相关的错误提示信息，只需要根据错误提示进行更改即可。\n步骤3. NTP服务状态查看 为了操作方便，我们在节点1进行下列操作，在节点1中通过ssh远程登录到节点2和节点3中，实现命令的分发与运行。\n通过下面的命令查看节点1中NTP服务的运行状态： ntpstat 命令运行后的返回结果如下所示（由于节点1是作为Server节点，所以其状态会很快变成synchronised，此时说明服务已经正常启动）：\n[root@realtime-1 ~]# ntpstat synchronised to local net at stratum 11 time correct to within 449 ms polling server every 64 s [root@realtime-1 ~]# 通过下面的命令查看节点2和节点三中NTP服务的运行状态： ssh realtime-2 \u0026#34;ntpstat\u0026#34; ssh realtime-3 \u0026#34;ntpstat\u0026#34; 命令运行后的返回结果如下所示（由于节点2需要同步节点1的时间，因此需要大概15分钟其状态才会由unsynchronised会变成synchronised，当状态变为synchronised时说明服务已经正常启动）：\n[root@realtime-1 ~]# ssh realtime-2 \u0026#34;ntpstat\u0026#34; unsynchronised polling server every 64 s [root@realtime-1 ~]# 服务正常启动后的状态如下所示：\n[root@realtime-1 ~]# ssh realtime-3 \u0026#34;ntpstat\u0026#34; synchronised to NTP server (10.1.1.4) at stratum 12 time correct to within 25 ms polling server every 64 s [root@realtime-1 ~]# 当3个节点的状态都显示为synchronised时，则表示ntp服务已经启动成功；如果一直显示unsynchronised,可能是配置文件有错误，因此需要检查IP地址是否配置正确。\n同学们不必一直等待，可以先进行下文的实验，然后过后再查看NTP服务状态。\n5 SElinux安全配置 需要在集群3个节点都进行SElinux配置，为了操作方便，我们在节点1进行下列操作，在节点1中通过ssh远程登录到节点2和节点3中，实现命令的分发与运行。\n通过下面的命令，关闭节点1、节点2、节点3的SElinux安全设置： /bin/sed -i \u0026#39;s/SELINUX=enforcing/SELINUX=disabled/\u0026#39; /etc/selinux/config ssh realtime-2 \u0026#34;/bin/sed -i \u0026#39;s/SELINUX=enforcing/SELINUX=disabled/\u0026#39; /etc/selinux/config\u0026#34; ssh realtime-3 \u0026#34;/bin/sed -i \u0026#39;s/SELINUX=enforcing/SELINUX=disabled/\u0026#39; /etc/selinux/config\u0026#34; 6 安装配置ZooKeeper集群 由于我们需要搭建一套具备高可用性的Hadoop集群，因此需要通过ZooKeeper来进行集群中服务的协调。ZooKeeper需要在集群3个节点进行安装配置，为了操作方便，我们在节点1进行下列操作，在节点1中通过ssh远程登录到节点2和节点3中，实现命令的分发与运行\n在模板中我们已经将ZooKeeper安装文件zookeeper-3.4.6.tar.gz放到了/usr/software目录下，同学们可以直接使用\n步骤1. 解压安装包 通过下列命令将ZooKeeper安装包解压到/usr/cx目录下： tar -zxvf /usr/software/zookeeper-3.4.6.tar.gz -C /usr/cx 命令运行后的返回结果如下所示：\n(---------------------省略--------------------) zookeeper-3.4.6/recipes/queue/test/org/apache/zookeeper/recipes/queue/DistributedQueueTest.java zookeeper-3.4.6/recipes/queue/build.xml zookeeper-3.4.6/zookeeper-3.4.6.jar zookeeper-3.4.6/lib/ zookeeper-3.4.6/lib/cobertura/ zookeeper-3.4.6/lib/cobertura/README.txt zookeeper-3.4.6/lib/jline-0.9.94.jar zookeeper-3.4.6/lib/log4j-1.2.16.LICENSE.txt zookeeper-3.4.6/lib/slf4j-log4j12-1.6.1.jar zookeeper-3.4.6/lib/jdiff/ zookeeper-3.4.6/lib/jdiff/zookeeper_3.1.1.xml zookeeper-3.4.6/lib/jdiff/zookeeper_3.4.6-SNAPSHOT.xml zookeeper-3.4.6/lib/jdiff/zookeeper_3.4.6.xml zookeeper-3.4.6/lib/slf4j-api-1.6.1.jar zookeeper-3.4.6/lib/log4j-1.2.16.jar zookeeper-3.4.6/lib/netty-3.7.0.Final.jar zookeeper-3.4.6/lib/jline-0.9.94.LICENSE.txt [root@realtime-1 ~]# 解压完成后，我们可以查看解压后的文件夹内容： ls /usr/cx/zookeeper-3.4.6/ 命令运行后的返回结果如下所示：\n[root@realtime-1 ~]# ls /usr/cx/zookeeper-3.4.6/ bin dist-maven LICENSE.txt src build.xml docs NOTICE.txt zookeeper-3.4.6.jar CHANGES.txt ivysettings.xml README_packaging.txt zookeeper-3.4.6.jar.asc conf ivy.xml README.txt zookeeper-3.4.6.jar.md5 contrib lib recipes zookeeper-3.4.6.jar.sha1 [root@realtime-1 ~]# 步骤2. 数据存储目录创建 通过下面的命令创建ZooKeeper数据存储目录： mkdir -p /home/data 通过下面的命令创建ZooKeeper日志存储目录：\nmkdir -p /home/logs 通过下面的命令在节点2、节点3中创建ZooKeeper数据存储目录： ssh realtime-2 \u0026#34;mkdir -p /home/data\u0026#34; ssh realtime-3 \u0026#34;mkdir -p /home/data\u0026#34; 通过下面的命令在节点2、节点3中创建ZooKeeper日志存储目录：\nssh realtime-2 \u0026#34;mkdir -p /home/logs\u0026#34; ssh realtime-3 \u0026#34;mkdir -p /home/logs\u0026#34; 步骤3. 主机myid编号文件创建 通过下面的命令创建myid文件，并设置节点1对应的编号为1（集群启动后会通过此编号来进行主机识别）： echo \u0026#34;1\u0026#34; \u0026gt; /home/data/myid 通过下面的命令在节点2中创建myid文件，并设置节点2对应的编号为2（集群启动后会通过此编号来进行主机识别）： ssh realtime-2 \u0026#34;echo \u0026#34;2\u0026#34; \u0026gt; /home/data/myid\u0026#34; 通过下面的命令在节点3中创建myid文件，并设置节点3对应的编号为3（集群启动后会通过此编号来进行主机识别）： ssh realtime-3 \u0026#34;echo \u0026#34;3\u0026#34; \u0026gt; /home/data/myid\u0026#34; 步骤4. ZooKeeper配置文件编辑 通过下列命令创建并打开zoo.cfg配置文件： vi /usr/cx/zookeeper-3.4.6/conf/zoo.cfg 在文件中写入下列内容：\ntickTime=2000 dataDir=/home/data clientPort=2181 dataLogDir=/home/logs initLimit=5 syncLimit=2 server.1=realtime-1:2888:3888 server.2=realtime-2:2888:3888 server.3=realtime-3:2888:3888 编辑完成后保存文件并退出vi编辑器。\n在上述配置中，我们设置心跳时间为2000毫秒，设置ZooKeeper在本地保存数据的目录为/home/data，ZooKeeper监听客户端连接的端口为2181,设置所有Follower和Leader进行同步的时间为5s，设置一个Follower和Leader进行同步的时间为2s。同时设定集群中有3台主机，其中realtime-1对应的主机编号为1，Follower与Leader之间交换信息的端口为2888，进行Leader选举的端口为3888；realtime-2对应的主机编号为2，Follower与Leader之间交换信息的端口为2888，进行Leader选举的端口为3888；realtime-3对应的主机编号为3，Follower与Leader之间交换信息的端口为2888，进行Leader选举的端口为3888。\n步骤5. 文件分发 通过下面的命令将节点1的ZooKeeper文件包分发到节点2、节点3中： scp -r /usr/cx/zookeeper-3.4.6 root@realtime-2:/usr/cx/ scp -r /usr/cx/zookeeper-3.4.6 root@realtime-3:/usr/cx/ 命令运行后的返回结果如下所示：\n（----------------------省略------------------------） Makefile.am 100% 74 0.1KB/s 00:00 zkServer.cmd 100% 1084 1.1KB/s 00:00 zkEnv.sh 100% 2696 2.6KB/s 00:00 zkCleanup.sh 100% 1937 1.9KB/s 00:00 zkCli.sh 100% 1534 1.5KB/s 00:00 zkEnv.cmd 100% 1333 1.3KB/s 00:00 zkCli.cmd 100% 1049 1.0KB/s 00:00 README.txt 100% 238 0.2KB/s 00:00 zkServer.sh 100% 5742 5.6KB/s 00:00 NOTICE.txt 100% 170 0.2KB/s 00:00 zookeeper-3.4.6.jar.md5 100% 33 0.0KB/s 00:00 README.txt 100% 1585 1.6KB/s 00:00 CHANGES.txt 100% 79KB 78.9KB/s 00:00 zookeeper-3.4.6.jar.sha1 100% 41 0.0KB/s 00:00 [root@realtime-1 ~]# 步骤6. ZooKeeper环境变量配置 通过下列命令使用vi编辑器打开 ~/.bashrc文件： vi ~/.bashrc 打开的~/.bashrc文件内容如下所示：\n# .bashrc # User specific aliases and functions alias rm=\u0026#39;rm -i\u0026#39; alias cp=\u0026#39;cp -i\u0026#39; alias mv=\u0026#39;mv -i\u0026#39; # Source global definitions if [ -f /etc/bashrc ]; then . /etc/bashrc fi export JAVA_HOME=/usr/cx/jdk1.8.0_60 export PATH=$JAVA_HOME/bin:$PATH export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/jre/lib/tools.jar (----------------注：需要在此处增加内容-------------------) 在文件中写入下列内容： export ZK_HOME=/usr/cx/zookeeper-3.4.6 export PATH=$PATH:$ZK_HOME/bin 编辑完成后保存文件并退出vi编辑器。\n通过下面的命令将环境变量配置文件分发到节点2和节点3： scp ~/.bashrc root@realtime-2:~/.bashrc scp ~/.bashrc root@realtime-3:~/.bashrc 步骤7. 更新环境变量 执行如下命令，更新环境变量： source ~/.bashrc ssh realtime-2 \u0026#34;source ~/.bashrc\u0026#34; ssh realtime-3 \u0026#34;source ~/.bashrc\u0026#34; 步骤8. 验证环境变量是否配置成功 通过下面的命令验证环境变量是否配置成功： zkServer.sh ssh realtime-2 \u0026#34;zkServer.sh\u0026#34; ssh realtime-3 \u0026#34;zkServer.sh\u0026#34; 命令运行后的返回结果如下所示：\n[root@realtime-1 ~]# zkServer.sh JMX enabled by default Using config: /usr/cx/zookeeper-3.4.6/bin/../conf/zoo.cfg Usage: /usr/cx/zookeeper-3.4.6/bin/zkServer.sh {start|start-foreground|stop|restart|status|upgrade|print-cmd} [root@realtime-1 ~]# 由输出内容可以看出，ZooKeeper环境变量已经配置正确，并且可以正常执行。\n7 ZooKeeper启动及状态查看 步骤1. ZooKeeper启动 通过下面的命令启动ZooKeeper服务： zkServer.sh start ssh realtime-2 \u0026#34;zkServer.sh start\u0026#34; ssh realtime-3 \u0026#34;zkServer.sh start\u0026#34; 命令运行后的返回结果如下所示：\n[root@realtime-1 ~]# zkServer.sh start JMX enabled by default Using config: /usr/cx/zookeeper-3.4.6/bin/../conf/zoo.cfg Starting zookeeper ... STARTED [root@realtime-1 ~]# 步骤2. ZooKeeper运行状态查看 ZooKeeper运行之后会随机进行follower角色以及leader角色选举，当leader角色节点出现异常后，会从其他节点中选举出新的leader角色。至于具体哪个节点处于leader状态，需要根据实际情况确定，并不是千篇一律的\n通过下面的命令可以查看ZooKeeper运行状态：\nzkServer.sh status ssh realtime-2 \u0026#34;zkServer.sh status\u0026#34; ssh realtime-3 \u0026#34;zkServer.sh status\u0026#34; 命令运行后的返回结果如下所示（由返回结果的Mode字段可以看出，当前节点是作为follower角色运行的）：\n[root@realtime-1 ~]# zkServer.sh status JMX enabled by default Using config: /usr/cx/zookeeper-3.4.6/bin/../conf/zoo.cfg Mode: follower [root@realtime-1 ~]# 8 安装配置Hadoop集群 Hadoop需要在集群3个节点进行安装配置，为了操作方便，我们在节点1进行下列操作，在节点1中通过ssh远程登录到节点2和节点3中，实现命令的分发与运行\n在模板中，我们已经将相应的Hadoop安装包hadoop-2.7.1.tar.gz放到/usr/software/目录下，同学们不需要再次下载，可以直接使用。\n步骤1. 数据存储目录创建 mkdir -p /hdfs/namenode mkdir -p /hdfs/datanode mkdir -p /hdfs/journalnode mkdir -p /var/log/hadoop-yarn ssh realtime-2 \u0026#34;mkdir -p /hdfs/namenode\u0026#34; ssh realtime-2 \u0026#34;mkdir -p /hdfs/datanode\u0026#34; ssh realtime-2 \u0026#34;mkdir -p /hdfs/journalnode\u0026#34; ssh realtime-2 \u0026#34;mkdir -p /var/log/hadoop-yarn\u0026#34; ssh realtime-3 \u0026#34;mkdir -p /hdfs/namenode\u0026#34; ssh realtime-3 \u0026#34;mkdir -p /hdfs/datanode\u0026#34; ssh realtime-3 \u0026#34;mkdir -p /hdfs/journalnode\u0026#34; ssh realtime-3 \u0026#34;mkdir -p /var/log/hadoop-yarn\u0026#34; 步骤2. 解压安装文件 通过下列命令解压Hadoop安装文件，将文件解压到/usr/cx目录下：\ntar -zxvf /usr/software/hadoop-2.7.1.tar.gz -C /usr/cx 命令执行后的输出内容如下所示：\n(-------------------省略------------------------) hadoop-2.7.1/libexec/hdfs-config.sh hadoop-2.7.1/README.txt hadoop-2.7.1/NOTICE.txt hadoop-2.7.1/lib/ hadoop-2.7.1/lib/native/ hadoop-2.7.1/lib/native/libhadoop.a hadoop-2.7.1/lib/native/libhadoop.so hadoop-2.7.1/lib/native/libhadooppipes.a hadoop-2.7.1/lib/native/libhdfs.so.0.0.0 hadoop-2.7.1/lib/native/libhadooputils.a hadoop-2.7.1/lib/native/libhdfs.a hadoop-2.7.1/lib/native/libhdfs.so hadoop-2.7.1/lib/native/libhadoop.so.1.0.0 hadoop-2.7.1/LICENSE.txt [root@master ~]# 步骤3. 编辑Hadoop配置文件： 使用vi命令打开hadoop-env.sh配置文件进行编辑： vi /usr/cx/hadoop-2.7.1/etc/hadoop/hadoop-env.sh 打开后的文件内容如下所示：\n(-------------------省略------------------------) # Set Hadoop-specific environment variables here. # The only required environment variable is JAVA_HOME. All others are # optional. When running a distributed configuration it is best to # set JAVA_HOME in this file, so that it is correctly defined on # remote nodes. # The java implementation to use. export JAVA_HOME=${JAVA_HOME} (注：需要对此行内容进行更改，为Hadoop绑定Java运行环境) # The jsvc implementation to use. Jsvc is required to run secure datanodes # that bind to privileged ports to provide authentication of data transfer # protocol. Jsvc is not required if SASL is configured for authentication of # data transfer protocol using non-privileged ports. #export JSVC_HOME=${JSVC_HOME} export HADOOP_CONF_DIR=${HADOOP_CONF_DIR:-\u0026#34;/etc/hadoop\u0026#34;} (-------------------省略------------------------) 在文件中进行下列内容更改，将JAVA_HOME对应的值改成实际的JDK安装路径：\nexport JAVA_HOME=/usr/cx/jdk1.8.0_60\n编辑完成后保存文件并退出vi编辑器。\n使用vi命令打开hdfs-site.xml文件进行配置： vi /usr/cx/hadoop-2.7.1/etc/hadoop/hdfs-site.xml 打开后的文件内容如下所示：\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;?xml-stylesheet type=\u0026#34;text/xsl\u0026#34; href=\u0026#34;configuration.xsl\u0026#34;?\u0026gt; \u0026lt;!-- Licensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. See accompanying LICENSE file. --\u0026gt; \u0026lt;!-- Put site-specific property overrides in this file. --\u0026gt; \u0026lt;configuration\u0026gt; (注：需要在此处进行相关内容配置) \u0026lt;/configuration\u0026gt; 在文件中\u0026lt;configuration\u0026gt;和\u0026lt;/configuration\u0026gt;之间增加下列内容：\n/*配置DataNode的数据存储目录，需要与上文创建的目录相对应*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.datanode.data.dir\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;/hdfs/datanode\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*配置数据块大小为256M*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.blocksize\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;268435456\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*自定义的HDFS服务名，在高可用集群中，无法配置单一HDFS服务器入口，所以需要指定一个逻辑上的服务名，当访问服务名时，会自动选择NameNode节点进行访问*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.nameservices\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;HDFScluster\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*配置NameNode的数据存储目录，需要与上文创建的目录相对应*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.namenode.name.dir\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;/hdfs/namenode\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*定义HDFS服务名所指向的NameNode主机名称*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.ha.namenodes.HDFScluster\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;realtime-1,realtime-2\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*设置NameNode的完整监听地址*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.namenode.rpc-address.HDFScluster.realtime-1\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;realtime-1:8020\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*设置NameNode的完整监听地址*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.namenode.rpc-address.HDFScluster.realtime-2\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;realtime-2:8020\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*设置NameNode的HTTP访问地址*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.namenode.http-address.HDFScluster.realtime-1\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;realtime-1:50070\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*设置NameNode的HTTP访问地址*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.namenode.http-address.HDFScluster.realtime-2\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;realtime-2:50070\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*设置主从NameNode元数据同步地址，官方推荐将nameservice作为最后的journal ID*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.namenode.shared.edits.dir\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;qjournal://realtime-1:8485;realtime-2:8485;realtime-3:8485/HDFScluster\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*设置HDFS客户端用来连接集群中活动状态NameNode节点的Java类*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.client.failover.proxy.provider.HDFScluster\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*设置SSH登录的私钥文件地址*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.ha.fencing.ssh.private-key-files\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;/root/.ssh/id_rsa\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*启动fence过程，确保集群高可用性*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.ha.fencing.methods\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;shell(/bin/true)\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*配置JournalNode的数据存储目录，需要与上文创建的目录相对应*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.journalnode.edits.dir\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;/hdfs/journalnode\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*设置自动切换活跃节点，保证集群高可用性*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.ha.automatic-failover.enabled\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;true\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*配置数据块副本数*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.replication\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;3\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*将dfs.webhdfs.enabled属性设置为true，否则就不能使用webhdfs的LISTSTATUS、LIST FILESTATUS等需要列出文件、文件夹状态的命令，因为这些信息都是由namenode保存的*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.webhdfs.enabled\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;true\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; 编辑完成后保存文件并退出vi编辑器\n在集群中，对HDFS集群访问的入口是NameNode所在的服务器。但是在两个NameNode节点的HA集群中，无法配置单一服务器入口，所以需要通过dfs.nameservices指定一个逻辑上的服务名，这个服务名是自定义的。当外界访问HDFS集群时，入口就变为这个服务名称，Hadoop会自动实现将访问请求转发到实际的处于Active状态的NameNode节点上。\n当配置了HDFS HA集群时，会有两个NameNode，为了避免两个NameNode都为Active状态，当发生failover时，Standby的节点要执行一系列方法把原来那个Active节点中不健康的NameNode服务给杀掉（这个过程就称为fence）。而dfs.ha.fencing.methods配置就是配置了执行杀死原来Active NameNode服务的方法，为了保险起见，因此指定无论如何都把StandBy节点的状态提升为Active，所以最后要配置一个shell(/bin/true)，保证不论前面的方法执行的情况如何，最后fence过程返回的结果都为True。fence操作需要通过SSH进行节点间的访问，因此需要配置dfs.ha.fencing.ssh.private-key-files为所需要用到的私钥文件路径信息。\n使用vi命令打开core-site.xml配置文件进行编辑： vi /usr/cx/hadoop-2.7.1/etc/hadoop/core-site.xml 打开后的文件内容如下所示：\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;?xml-stylesheet type=\u0026#34;text/xsl\u0026#34; href=\u0026#34;configuration.xsl\u0026#34;?\u0026gt; \u0026lt;!-- Licensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. See accompanying LICENSE file. --\u0026gt; \u0026lt;!-- Put site-specific property overrides in this file. --\u0026gt; \u0026lt;configuration\u0026gt; (注：需要在此处进行相关内容配置) \u0026lt;/configuration\u0026gt; 在文件中和之间增加下列内容：\n/*设置默认的HDFS访问路径，需要与hdfs-site.xml中的HDFS服务名相一致*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;fs.defaultFS\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;hdfs://HDFScluster\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*临时文件夹路径设置*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;hadoop.tmp.dir\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;/usr/tmp\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*配置ZooKeeper服务集群，用于活跃NameNode节点的选举*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;ha.zookeeper.quorum\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;realtime-1:2181,realtime-2:2181,realtime-3:2181\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*设置数据压缩算法*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;io.compression.codecs\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;org.apache.hadoop.io.compress.DefaultCodec,org.apache.hadoop.io.compress.GzipCodec,org.apache.hadoop.io.compress.BZip2Codec,com.hadoop.compression.lzo.LzoCodec,com.hadoop.compression.lzo.LzopCodec,org.apache.hadoop.io.compress.SnappyCodec\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;io.compression.codec.lzo.class\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;com.hadoop.compression.lzo.LzoCodec\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*设置使用hduser用户可以代理所有主机用户进行任务提交*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;hadoop.proxyuser.hduser.host\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;*\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*设置使用hduser用户可以代理所有组用户进行任务提交*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;hadoop.proxyuser.hduser.groups\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;*\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; 编辑完成后保存文件并退出vi编辑器\n对HDFS集群访问的入口是NameNode所在的服务器，但是在两个NameNode节点的HA集群中，无法配置单一服务器入口，所以需要在hdfs-site.xml中通过dfs.nameservices指定一个逻辑上的服务名，因此此处的fs.defaultFS配置的入口地址需要与hdfs-site.xml中dfs.nameservices所配置的一致。\n使用vi命令打开yarn-site.xml文件进行配置： vi /usr/cx/hadoop-2.7.1/etc/hadoop/yarn-site.xml 打开后的文件内容如下所示：\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; \u0026lt;!-- Licensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. See accompanying LICENSE file. --\u0026gt; \u0026lt;configuration\u0026gt; (注：需要在此处进行相关内容配置) \u0026lt;!-- Site specific YARN configuration properties --\u0026gt; \u0026lt;/configuration\u0026gt; 在文件中和之间增加下列内容：\n/*设置NodeManager上运行的附属服务，需配置成mapreduce_shuffle才可运行MapReduce程序*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.nodemanager.aux-services\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;mapreduce_shuffle\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.nodemanager.aux-services.mapreduce_shuffle.class\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;org.apache.hadoop.mapred.ShuffleHandler\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*设置任务日志存储目录*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.nodemanager.log-dirs\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;file:///var/log/hadoop-yarn \u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*设置Hadoop依赖包地址*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.application.classpath\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt; $HADOOP_HOME/share/hadoop/common/*,$HADOOP_HOME/share/hadoop/common/lib/*, $HADOOP_HOME/share/hadoop/hdfs/*,$HADOOP_HOME/share/hadoop/hdfs/lib/*, $HADOOP_HOME/share/hadoop/mapreduce/*,$HADOOP_HOME/share/hadoop/mapreduce/lib/*, $HADOOP_HOME/share/hadoop/yarn/*,$HADOOP_HOME/share/hadoop/yarn/lib/* \u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*开启resourcemanager 的高可用性功能*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.resourcemanager.ha.enabled\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;true\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*标识集群中的resourcemanager，如果设置该选项，需要确保所有的resourcemanager节点在配置中都有自己的逻辑id*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.resourcemanager.cluster-id\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;YARNcluster\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*设置resourcemanager节点的逻辑id*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.resourcemanager.ha.rm-ids\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;rm1,rm2\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*为每个逻辑id绑定实际的主机名称*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.resourcemanager.hostname.rm1\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;realtime-1\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.resourcemanager.hostname.rm2\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;realtime-2\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*指定ZooKeeper服务地址*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.resourcemanager.zk-address\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;realtime-1:2181,realtime-2:2181,realtime-3:2181\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*指定resourcemanager的WEB访问地址*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.resourcemanager.webapp.address.rm1\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;realtime-1:8089\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.resourcemanager.webapp.address.rm2\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;realtime-2:8089\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*设定虚拟内存与实际内存的比例，比例值越高，则可用虚拟内存就越多*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.nodemanager.vmem-pmem-ratio\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;3\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*设定单个容器可以申领到的最小内存资源*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.scheduler.minimum-allocation-mb\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;32\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*设置当任务运行结束后，日志文件被转移到的HDFS目录*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.nodemanager.remote-app-log-dir\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;hdfs://HDFScluster/var/log/hadoop-yarn/apps\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*设定资源调度策略，目前可用的有FIFO、Capacity Scheduler和Fair Scheduler*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.resourcemanager.scheduler.class\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.CapacityScheduler\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*设定每个任务能够申领到的最大虚拟CPU数目*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.scheduler.maximum-allocation-vcores\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;8\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*设置任务完成指定时间（秒）之后，删除任务的本地化文件和日志目录*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.nodemanager.delete.debug-delay-sec\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;600\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*设置志在HDFS上保存多长时间（秒）*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.nodemanager.log.retain-seconds\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;86400\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*设定物理节点有2G内存加入资源池*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.nodemanager.resource.memory-mb\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;2048\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; 编辑完成后保存文件并退出vi编辑器\n在集群中，提交任务的入口是ResourceManager所在的服务器。但是在两个ResourceManager节点的HA集群中，无法配置单一服务器入口，所以需要通过yarn.resourcemanager.cluster-id指定一个逻辑上的服务名，这个服务名是自定义的。当外界向集群提交任务时，入口就变为这个服务名称，YARN会自动实现将访问请求转发到实际的处于Active状态的ResourceManager节点上。由于配置了逻辑服务名，所以需要设置resourcemanager节点的逻辑id，并为每个逻辑id绑定实际的主机名称\n使用下列命令复制mapred-site.xml.template文件并重命名为mapred-site.xml： cp /usr/cx/hadoop-2.7.1/etc/hadoop/mapred-site.xml.template /usr/cx/hadoop-2.7.1/etc/hadoop/mapred-site.xml 使用vi命令打开mapred-site.xml文件进行配置： vi /usr/cx/hadoop-2.7.1/etc/hadoop/mapred-site.xml 打开后的文件内容如下所示：\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; \u0026lt;?xml-stylesheet type=\u0026#34;text/xsl\u0026#34; href=\u0026#34;configuration.xsl\u0026#34;?\u0026gt; \u0026lt;!-- Licensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. See accompanying LICENSE file. --\u0026gt; \u0026lt;!-- Put site-specific property overrides in this file. --\u0026gt; \u0026lt;configuration\u0026gt; (注：需要在此处进行相关内容配置) \u0026lt;/configuration\u0026gt; 在文件中和之间增加下列内容：\n/*Hadoop对MapReduce运行框架一共提供了3种实现，在mapred-site.xml中通过\u0026#34;mapreduce.framework.name\u0026#34;这个属性来设置为\u0026#34;classic\u0026#34;、\u0026#34;yarn\u0026#34;或者\u0026#34;local\u0026#34;*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;mapreduce.framework.name\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;yarn\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; 编辑完成后保存文件并退出vi编辑器\n使用vi命令打开slaves文件进行配置（要与我们前文设置的主机名相互一致，否则将会引起Hadoop相关进程无法正确启动）： vi /usr/cx/hadoop-2.7.1/etc/hadoop/slaves 打开后的文件内容如下所示：\nlocalhost （注：需要对此内容进行更改，配置为Slave节点的实际主机名） 将文件中的内容更改为下列内容：\nrealtime-1 realtime-2 realtime-3 编辑完成后保存文件并退出vi编辑器\n步骤4. 文件分发 通过下面的命令将节点1的Hadoop文件包分发到节点2中： scp -r /usr/cx/hadoop-2.7.1 root@realtime-2:/usr/cx/ 命令运行后的返回结果如下所示：\n（---------------------省略-----------------------） external.png 100% 230 0.2KB/s 00:00 banner.jpg 100% 872 0.9KB/s 00:00 maven-feather.png 100% 3330 3.3KB/s 00:00 build-by-maven-white.png 100% 2260 2.2KB/s 00:00 build-by-maven-black.png 100% 2294 2.2KB/s 00:00 bg.jpg 100% 486 0.5KB/s 00:00 icon_error_sml.gif 100% 1010 1.0KB/s 00:00 logo_apache.jpg 100% 33KB 32.7KB/s 00:00 collapsed.gif 100% 820 0.8KB/s 00:00 apache-maven-project-2.png 100% 33KB 32.7KB/s 00:00 icon_success_sml.gif 100% 990 1.0KB/s 00:00 icon_info_sml.gif 100% 606 0.6KB/s 00:00 h3.jpg 100% 431 0.4KB/s 00:00 maven-logo-2.gif 100% 26KB 25.8KB/s 00:00 h5.jpg 100% 357 0.4KB/s 00:00 newwindow.png 100% 220 0.2KB/s 00:00 icon_warning_sml.gif 100% 576 0.6KB/s 00:00 expanded.gif 100% 52 0.1KB/s 00:00 dependency-analysis.html 100% 21KB 21.3KB/s 00:00 [root@realtime-1 ~]# 通过下面的命令将节点1的Hadoop文件包分发到节点3中： scp -r /usr/cx/hadoop-2.7.1 root@realtime-3:/usr/cx/ 命令运行后的返回结果如下所示：\n（---------------------省略-----------------------） external.png 100% 230 0.2KB/s 00:00 banner.jpg 100% 872 0.9KB/s 00:00 maven-feather.png 100% 3330 3.3KB/s 00:00 build-by-maven-white.png 100% 2260 2.2KB/s 00:00 build-by-maven-black.png 100% 2294 2.2KB/s 00:00 bg.jpg 100% 486 0.5KB/s 00:00 icon_error_sml.gif 100% 1010 1.0KB/s 00:00 logo_apache.jpg 100% 33KB 32.7KB/s 00:00 collapsed.gif 100% 820 0.8KB/s 00:00 apache-maven-project-2.png 100% 33KB 32.7KB/s 00:00 icon_success_sml.gif 100% 990 1.0KB/s 00:00 icon_info_sml.gif 100% 606 0.6KB/s 00:00 h3.jpg 100% 431 0.4KB/s 00:00 maven-logo-2.gif 100% 26KB 25.8KB/s 00:00 h5.jpg 100% 357 0.4KB/s 00:00 newwindow.png 100% 220 0.2KB/s 00:00 icon_warning_sml.gif 100% 576 0.6KB/s 00:00 expanded.gif 100% 52 0.1KB/s 00:00 dependency-analysis.html 100% 21KB 21.3KB/s 00:00 [root@realtime-1 ~]# 步骤5. 配置Hadoop环境变量 通过下列命令使用vi编辑器编辑~/.bashrc文件： vi ~/.bashrc 打开后的文件内容如下所示：\n# .bashrc # User specific aliases and functions alias rm=\u0026#39;rm -i\u0026#39; alias cp=\u0026#39;cp -i\u0026#39; alias mv=\u0026#39;mv -i\u0026#39; # Source global definitions if [ -f /etc/bashrc ]; then . /etc/bashrc fi export JAVA_HOME=/usr/cx/jdk1.8.0_60 export PATH=$JAVA_HOME/bin:$PATH export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/jre/lib/tools.jar export ZK_HOME=/usr/cx/zookeeper-3.4.6 export PATH=$PATH:$ZK_HOME/bin (----------------在此处增加内容-------------------) 在~/.bashrc文件中增加以下内容： export HADOOP_HOME=/usr/cx/hadoop-2.7.1 export PATH=$PATH:$HADOOP_HOME/bin export PATH=$PATH:$HADOOP_HOME/sbin 编辑完成后保存文件并退出vi编辑器\n通过下面的命令将节点1的环境变量文件分发到节点2中： scp -r ~/.bashrc root@realtime-2:~/.bashrc 命令运行后的返回结果如下所示：\n[root@realtime-1 ~]# scp -r ~/.bashrc root@realtime-2:~/.bashrc .bashrc 100% 502 0.5KB/s 00:00 [root@realtime-1 ~]# 通过下面的命令将节点1的环境变量文件分发到节点3中： scp -r ~/.bashrc root@realtime-3:~/.bashrc 命令运行后的返回结果如下所示：\n[root@realtime-1 ~]# scp -r ~/.bashrc root@realtime-3:~/.bashrc .bashrc 100% 502 0.5KB/s 00:00 [root@realtime-1 ~]# 步骤6. 更新环境变量 执行如下命令，更新环境变量： source ~/.bashrc ssh realtime-2 \u0026#34;source ~/.bashrc\u0026#34; ssh realtime-3 \u0026#34;source ~/.bashrc\u0026#34; 步骤7. 验证Hadoop环境变量是否配置成功 通过下列命令验证Hadoop环境变量是否配置成功： hadoop ssh realtime-2 \u0026#34;hadoop\u0026#34; ssh realtime-3 \u0026#34;hadoop\u0026#34; 如果出现如下提示信息，则说明Hadoop安装配置成功： [root@realtime-1 ~]# hadoop Usage: hadoop [--config confdir] [COMMAND | CLASSNAME] CLASSNAME run the class named CLASSNAME or where COMMAND is one of: fs run a generic filesystem user client version print the version jar \u0026lt;jar\u0026gt; run a jar file note: please use \u0026#34;yarn jar\u0026#34; to launch YARN applications, not this command. checknative [-a|-h] check native hadoop and compression libraries availability distcp \u0026lt;srcurl\u0026gt; \u0026lt;desturl\u0026gt; copy file or directories recursively archive -archiveName NAME -p \u0026lt;parent path\u0026gt; \u0026lt;src\u0026gt;* \u0026lt;dest\u0026gt; create a hadoop archive classpath prints the class path needed to get the credential interact with credential providers Hadoop jar and the required libraries daemonlog get/set the log level for each daemon trace view and modify Hadoop tracing settings Most commands print help when invoked w/o parameters. [root@realtime-1 ~]# 如果没有正确输出相关信息，请检查~/.bashrc文件中的Hadoop环境变量是否配置正确，同时请确定是否使用source ~/.bashrc命令更新环境变量配置\n步骤8. 格式化HDFS 通过下列命令格式化HDFS文件系统（如果格式化失败，会有相关的错误日志输出，根据输出内容进行更改即可）：\nhadoop namenode -format 命令运行后的部分显示内容如下所示：\n(-------------------省略------------------------) 18/11/30 11:07:15 INFO metrics.TopMetrics: NNTop conf: dfs.namenode.top.windows.minutes = 1,5,25 18/11/30 11:07:15 INFO namenode.FSNamesystem: Retry cache on namenode is enabled 18/11/30 11:07:15 INFO namenode.FSNamesystem: Retry cache will use 0.03 of total heap and retry cache entry expiry time is 600000 millis 18/11/30 11:07:15 INFO util.GSet: Computing capacity for map NameNodeRetryCache 18/11/30 11:07:15 INFO util.GSet: VM type = 64-bit 18/11/30 11:07:15 INFO util.GSet: 0.029999999329447746% max memory 966.7 MB = 297.0 KB 18/11/30 11:07:15 INFO util.GSet: capacity = 2^15 = 32768 entries 18/11/30 11:07:16 INFO namenode.FSImage: Allocated new BlockPoolId: BP-348760827-10.1.1.4-1543547236332 18/11/30 11:07:16 INFO common.Storage: Storage directory /hdfs/namenode has been successfully formatted. 18/11/30 11:07:16 INFO namenode.NNStorageRetentionManager: Going to retain 1 images with txid \u0026gt;= 0 18/11/30 11:07:16 INFO util.ExitUtil: Exiting with status 0 18/11/30 11:07:16 INFO namenode.NameNode: SHUTDOWN_MSG: /************************************************************ SHUTDOWN_MSG: Shutting down NameNode at realtime-1/10.1.1.4 ************************************************************/ [root@realtime-1 ~]# 步骤9. 格式化zkfc元数据 通过下面的命令格式化DFSZKFailoverController(ZKFC)元数据（在一个节点中进行处理即可）：\nhdfs zkfc -formatZK 命令运行后的返回结果如下所示：\n（---------------省略------------------） tString=realtime-1:2181,realtime-2:2181,realtime-3:2181 sessionTimeout=5000 watcher=org.apache.hadoop.ha.ActiveStandbyElector$WatcherWithClientRef@10e31a9a 18/11/30 11:37:46 INFO zookeeper.ClientCnxn: Opening socket connection to server realtime-2/10.1.1.3:2181. Will not attempt to authenticate using SASL (unknown error) 18/11/30 11:37:47 INFO zookeeper.ClientCnxn: Socket connection established to realtime-2/10.1.1.3:2181, initiating session 18/11/30 11:37:47 INFO zookeeper.ClientCnxn: Session establishment complete on server realtime-2/10.1.1.3:2181, sessionid = 0x2675e9a37a90000, negotiated timeout = 5000 18/11/30 11:37:47 INFO ha.ActiveStandbyElector: Successfully created /hadoop-ha/HDFScluster in ZK. 18/11/30 11:37:47 INFO ha.ActiveStandbyElector: Session connected. 18/11/30 11:37:47 INFO zookeeper.ZooKeeper: Session: 0x2675e9a37a90000 closed 18/11/30 11:37:47 INFO zookeeper.ClientCnxn: EventThread shut down [root@realtime-1 ~]# 9 Hadoop集群启动运行 我们在节点1进行下列操作，在节点1中通过ssh远程登录到节点2和节点3中，实现命令的分发与运行\n步骤1. 启动HDFS相关服务 通过下面的命令可以启动HDFS相关服务： start-dfs.sh 命令运行后的返回结果如下所示：\n[root@realtime-1 ~]# start-dfs.sh 18/11/30 11:55:51 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable Starting namenodes on [realtime-2 realtime-1] realtime-2: starting namenode, logging to /usr/cx/hadoop-2.7.1/logs/hadoop-root-namenode-realtime-2.out realtime-1: starting namenode, logging to /usr/cx/hadoop-2.7.1/logs/hadoop-root-namenode-realtime-1.out realtime-1: starting datanode, logging to /usr/cx/hadoop-2.7.1/logs/hadoop-root-datanode-realtime-1.out realtime-2: starting datanode, logging to /usr/cx/hadoop-2.7.1/logs/hadoop-root-datanode-realtime-2.out realtime-3: starting datanode, logging to /usr/cx/hadoop-2.7.1/logs/hadoop-root-datanode-realtime-3.out Starting journal nodes [realtime-1 realtime-2 realtime-3] realtime-1: starting journalnode, logging to /usr/cx/hadoop-2.7.1/logs/hadoop-root-journalnode-realtime-1.out realtime-2: starting journalnode, logging to /usr/cx/hadoop-2.7.1/logs/hadoop-root-journalnode-realtime-2.out realtime-3: starting journalnode, logging to /usr/cx/hadoop-2.7.1/logs/hadoop-root-journalnode-realtime-3.out 18/11/30 11:56:11 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable Starting ZK Failover Controllers on NN hosts [realtime-2 realtime-1] realtime-2: starting zkfc, logging to /usr/cx/hadoop-2.7.1/logs/hadoop-root-zkfc-realtime-2.out realtime-1: starting zkfc, logging to /usr/cx/hadoop-2.7.1/logs/hadoop-root-zkfc-realtime-1.out [root@realtime-1 ~]# 通过下面的命令查看节点1中对应的相关服务： jps ssh realtime-2 \u0026#34;jps\u0026#34; ssh realtime-3 \u0026#34;jps\u0026#34; 命令运行后的返回结果如下所示：\n[root@realtime-1 ~]# jps 10033 ResourceManager 9427 DataNode 9315 NameNode 2597 QuorumPeerMain 10457 Jps 9625 JournalNode 9818 DFSZKFailoverController 10140 NodeManager 1743 VmServer.jar [root@realtime-1 ~]# 通过下面的命令在节点2中启动ResourceManager进程：\nssh realtime-2 \u0026#34;yarn-daemon.sh start resourcemanager\u0026#34; 命令运行后的返回结果如下所示：\n[root@realtime-1 ~]# ssh realtime-2 \u0026#34;yarn-daemon.sh start resourcemanager\u0026#34; starting resourcemanager, logging to /usr/cx/hadoop-2.7.1/logs/yarn-root-resourcemanager-realtime-2.out [root@realtime-1 ~]# 通过下面的命令查看节点2中对应的相关服务：\nssh realtime-2 \u0026#34;jps\u0026#34; 命令运行后的返回结果如下所示：\n[root@realtime-1 ~]# ssh realtime-2 \u0026#34;jps\u0026#34; 5792 DataNode 6164 NameNode 1703 VmServer.jar 6779 ResourceManager 6428 NodeManager 5981 DFSZKFailoverController 6846 Jps 2686 QuorumPeerMain 5887 JournalNode [root@realtime-1 ~]# 由返回结果可以看出，此时在节点2中已经成功启动了ResourceManager进程\n10 Hadoop 高可用性测试 笔者在写作过程中是在节点1中进行下面的操作，同学们可以在任意节点中进行下面的操作，所实现的效果是一致的\n步骤1. NodeManager状态查看 由于设置了2个NameNode，因此必然会有一个处于Active状态，一个处于StandBy状态，至于具体哪个节点处于Active状态，需要根据实际情况确定，并不是千篇一律的。\n当Hadoop成功启动后，我们打开浏览器，输入网址http://realtime-1:50070便可以访问HDFS的Web管理页面（此时可以看到realtime-1节点是处于active状态的）： 输入网址http://realtime-2:50070依然可以访问HDFS的Web管理页面（此时可以看到realtime-2节点是处于standby状态的）： 步骤2. ResourceManager状态查看 由于设置了2个ResourceManager，因此必然会有一个处于Active状态，一个处于StandBy状态，至于具体哪个节点处于Active状态，需要根据实际情况确定，并不是千篇一律的。\n在终端模拟器中，通过下面的命令可以查看逻辑ID为rm1（实际映射的节点为realtime-1）的节点对应的ResourceManager状态： yarn rmadmin -getServiceState rm1 命令运行后的返回结果如下所示（可见当前节点是active状态）：\n[root@realtime-1 ~]# yarn rmadmin -getServiceState rm1 18/11/30 16:35:11 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable active [root@realtime-1 ~]# 在终端模拟器中，通过下面的命令可以查看逻辑ID为rm2（实际映射的节点为realtime-2）的节点对应的ResourceManager状态： yarn rmadmin -getServiceState rm2 命令运行后的返回结果如下所示（可见当前节点是standby状态）：\n[root@realtime-1 ~]# yarn rmadmin -getServiceState rm2 18/11/30 16:35:44 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable standby [root@realtime-1 ~]# 步骤3. HDFS高可用测试 通过下面的命令在HDFS中创建测试文件夹/test： hadoop fs -mkdir /test 通过下面的命令查看HDFS中创建的测试文件夹/test： hadoop fs -ls / 命令运行后的返回结果如下所示：\n[root@realtime-1 ~]# hadoop fs -ls / 18/11/30 16:40:12 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable Found 1 items drwxr-xr-x - root supergroup 0 2018-11-30 16:39 /test [root@realtime-1 ~]# 由返回结果可以看出，此时依然可以成功查询HDFS文件信息\n打开浏览器，输入网址http://realtime-2:50070访问HDFS的Web管理页面，此时可以看到realtime-2节点已经成功接替成为NameNode并处于active状态（同学们需要根据实际情况来确定）：\n步骤4. YARN高可用测试 通过下面的命令，使用Hadoop自带的案例测试MapReduce应用程序的运行： hadoop jar /usr/cx/hadoop-2.7.1/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.1.jar wordcount /test /output 命令运行后的返回结果如下所示：\n[root@realtime-1 ~]# hadoop jar /usr/cx/hadoop-2.7.1/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.1.jar wordcount /test /output 18/11/30 16:47:11 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable 18/11/30 16:47:15 INFO input.FileInputFormat: Total input paths to process : 0 18/11/30 16:47:15 INFO mapreduce.JobSubmitter: number of splits:0 18/11/30 16:47:15 INFO mapreduce.JobSubmitter: Submitting tokens for job: job_1543557487449_0001 18/11/30 16:47:16 INFO impl.YarnClientImpl: Submitted application application_1543557487449_0001 18/11/30 16:47:16 INFO mapreduce.Job: The url to track the job: http://realtime-1:8089/proxy/application_1543557487449_0001/ 18/11/30 16:47:16 INFO mapreduce.Job: Running job: job_1543557487449_0001 18/11/30 16:47:26 INFO mapreduce.Job: Job job_1543557487449_0001 running in uber mode : false 18/11/30 16:47:26 INFO mapreduce.Job: map 0% reduce 0% 18/11/30 16:47:37 INFO mapreduce.Job: map 0% reduce 100% 18/11/30 16:47:38 INFO mapreduce.Job: Job job_1543557487449_0001 completed successfully 18/11/30 16:47:39 INFO mapreduce.Job: Counters: 38 File System Counters FILE: Number of bytes read=0 FILE: Number of bytes written=119357 FILE: Number of read operations=0 FILE: Number of large read operations=0 FILE: Number of write operations=0 HDFS: Number of bytes read=0 HDFS: Number of bytes written=0 HDFS: Number of read operations=3 HDFS: Number of large read operations=0 HDFS: Number of write operations=2 Job Counters Launched reduce tasks=1 Total time spent by all maps in occupied slots (ms)=0 Total time spent by all reduces in occupied slots (ms)=227232 Total time spent by all reduce tasks (ms)=7101 Total vcore-seconds taken by all reduce tasks=7101 Total megabyte-seconds taken by all reduce tasks=7271424 Map-Reduce Framework Combine input records=0 Combine output records=0 Reduce input groups=0 Reduce shuffle bytes=0 Reduce input records=0 Reduce output records=0 Spilled Records=0 Shuffled Maps =0 Failed Shuffles=0 Merged Map outputs=0 GC time elapsed (ms)=67 CPU time spent (ms)=290 Physical memory (bytes) snapshot=94629888 Virtual memory (bytes) snapshot=2064699392 Total committed heap usage (bytes)=30474240 Shuffle Errors BAD_ID=0 CONNECTION=0 IO_ERROR=0 WRONG_LENGTH=0 WRONG_MAP=0 WRONG_REDUCE=0 File Output Format Counters Bytes Written=0 [root@realtime-1 ~]# 通过下面的命令停止Active状态节点对应的ResourceManager进程（笔者写作过程中对应的为realtime-1节点，同学们需要根据实际情况来确定） ssh realtime-1 \u0026#34;yarn-daemon.sh stop resourcemanager\u0026#34; 命令运行后的返回结果如下所示：\n[root@realtime-1 ~]# ssh realtime-1 \u0026#34;yarn-daemon.sh stop resourcemanager\u0026#34; stopping resourcemanager [root@realtime-1 ~]# 通过下面的命令查看对应节点的进程信息： ssh realtime-1 \u0026#34;jps\u0026#34; 命令运行后的返回结果如下所示：\n[root@realtime-1 ~]# ssh realtime-1 \u0026#34;jps\u0026#34; 9427 DataNode 2597 QuorumPeerMain 9625 JournalNode 9818 DFSZKFailoverController 10140 NodeManager 11885 Jps 1743 VmServer.jar [root@realtime-1 ~]# 由返回结果可以看出，ResourceManager进程已经被停止\n通过下面的命令，再次使用Hadoop自带的案例测试MapReduce应用程序的运行： hadoop jar /usr/cx/hadoop-2.7.1/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.1.jar wordcount /test /output1 命令运行后的返回结果如下所示：\n[root@realtime-1 ~]# hadoop jar /usr/cx/hadoop-2.7.1/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.1.jar wordcount /test /output1 18/11/30 16:50:29 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable 18/11/30 16:50:31 INFO client.ConfiguredRMFailoverProxyProvider: Failing over to rm2 18/11/30 16:50:32 INFO input.FileInputFormat: Total input paths to process : 0 18/11/30 16:50:32 INFO mapreduce.JobSubmitter: number of splits:0 18/11/30 16:50:32 INFO mapreduce.JobSubmitter: Submitting tokens for job: job_1543567750404_0001 18/11/30 16:50:33 INFO impl.YarnClientImpl: Submitted application application_1543567750404_0001 18/11/30 16:50:33 INFO mapreduce.Job: The url to track the job: http://realtime-2:8089/proxy/application_1543567750404_0001/ 18/11/30 16:50:33 INFO mapreduce.Job: Running job: job_1543567750404_0001 18/11/30 16:50:45 INFO mapreduce.Job: Job job_1543567750404_0001 running in uber mode : false 18/11/30 16:50:45 INFO mapreduce.Job: map 0% reduce 0% 18/11/30 16:50:53 INFO mapreduce.Job: map 0% reduce 100% 18/11/30 16:50:54 INFO mapreduce.Job: Job job_1543567750404_0001 completed successfully 18/11/30 16:50:54 INFO mapreduce.Job: Counters: 38 File System Counters FILE: Number of bytes read=0 FILE: Number of bytes written=119358 FILE: Number of read operations=0 FILE: Number of large read operations=0 FILE: Number of write operations=0 HDFS: Number of bytes read=0 HDFS: Number of bytes written=0 HDFS: Number of read operations=3 HDFS: Number of large read operations=0 HDFS: Number of write operations=2 Job Counters Launched reduce tasks=1 Total time spent by all maps in occupied slots (ms)=0 Total time spent by all reduces in occupied slots (ms)=147936 Total time spent by all reduce tasks (ms)=4623 Total vcore-seconds taken by all reduce tasks=4623 Total megabyte-seconds taken by all reduce tasks=4733952 Map-Reduce Framework Combine input records=0 Combine output records=0 Reduce input groups=0 Reduce shuffle bytes=0 Reduce input records=0 Reduce output records=0 Spilled Records=0 Shuffled Maps =0 Failed Shuffles=0 Merged Map outputs=0 GC time elapsed (ms)=81 CPU time spent (ms)=280 Physical memory (bytes) snapshot=94146560 Virtual memory (bytes) snapshot=2064695296 Total committed heap usage (bytes)=30474240 Shuffle Errors BAD_ID=0 CONNECTION=0 IO_ERROR=0 WRONG_LENGTH=0 WRONG_MAP=0 WRONG_REDUCE=0 File Output Format Counters Bytes Written=0 [root@realtime-1 ~]# 由返回结果可以看出，此时YARN依然可以可靠的实现任务的调度\n在终端模拟器中，通过下面的命令可以查看逻辑ID为rm2（实际映射的节点为realtime-2）的节点对应的ResourceManager状态（同学们需要根据实际情况来确定）： yarn rmadmin -getServiceState rm2 命令运行后的返回结果如下所示：\n[root@realtime-1 ~]# yarn rmadmin -getServiceState rm2 18/11/30 16:51:39 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable active [root@realtime-1 ~]# 由返回结果可以看出，当前节点已经自动成功接替变成了active状态\n","permalink":"https://waite.wang/posts/bigdata/hadoop-install-and-config/","summary":"\u003ch3 id=\"安装jdk\"\u003e安装JDK\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003e1.创建工作路径\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003emkdir /usr/cx\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e2.解压安装包\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003etar -zxvf 安装包位置 -C /usr/cx\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e3.配置环境变量\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003evi ~/.bashrc\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在打开的~/.bashrc文件中写入一下内容\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-gdscript3\" data-lang=\"gdscript3\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# .bashrc\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# User specific aliases and functions\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ealias\u003c/span\u003e \u003cspan class=\"n\"\u003erm\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;rm -i\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ealias\u003c/span\u003e \u003cspan class=\"n\"\u003ecp\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;cp -i\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ealias\u003c/span\u003e \u003cspan class=\"n\"\u003emv\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;mv -i\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Source global definitions\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003ef\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"n\"\u003eetc\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"n\"\u003ebashrc\u003c/span\u003e \u003cspan class=\"p\"\u003e];\u003c/span\u003e \u003cspan class=\"n\"\u003ethen\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"o\"\u003e.\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"n\"\u003eetc\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"n\"\u003ebashrc\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003efi\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e----------------\u003c/span\u003e\u003cspan class=\"err\"\u003e注：需要在此处增加内容\u003c/span\u003e\u003cspan class=\"o\"\u003e-------------------\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"err\"\u003e在这添加\u003c/span\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eexport\u003c/span\u003e \u003cspan class=\"n\"\u003eJAVA_HOME\u003c/span\u003e\u003cspan class=\"o\"\u003e=/\u003c/span\u003e\u003cspan class=\"n\"\u003eusr\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"n\"\u003ecx\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"n\"\u003ejdk名字版本\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eexport\u003c/span\u003e \u003cspan class=\"n\"\u003ePATH\u003c/span\u003e\u003cspan class=\"o\"\u003e=$\u003c/span\u003e\u003cspan class=\"n\"\u003eJAVA_HOME\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"n\"\u003ebin\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003ePATH\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eexport\u003c/span\u003e \u003cspan class=\"n\"\u003eCLASSPATH\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eJAVA_HOME\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"n\"\u003ejre\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"n\"\u003elib\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"n\"\u003ert\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ejar\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003eJAVA_HOME\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"n\"\u003ejre\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"n\"\u003elib\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"n\"\u003etools\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ejar\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e4.更新环境变量\u003c/strong\u003e\u003c/p\u003e","title":"hadoop的安装与配置"},{"content":"Hadoop基础 1 、实验目的 通过本节实验的学习，同学们可以掌握Hadoop集群环境部署与配置。本实验完成后，要求学生掌握以下内容：\n掌握集群所有节点之间SSH免密登录配置方式；\n掌握NTP服务配置，实现节点间的时间同步；\n掌握ZooKeeper集群的搭建方式；\n掌握Hadoop集群的搭建配置流程；\n理解Hadoop集群的高可用（HA）原理，并掌握Hadoop集群的高可用（HA）配置方法。\n2、实验原理 需要按照以下流程，在Linux上进行Hadoop集群的安装部署：\n主机名配置：在大型的Hadoop集群中，往往由成百上千个节点组成，如果通过IP地址对不同节点进行管理，那么集群维护的工作量将会十分繁重，因此在工程环境中，常常通过对每个节点设置唯一的主机名，从而实现对节点进行管理。\nSSH（安全外壳协议）免密码登录配置：推荐安装OpenSSH。Hadoop需要通过SSH来启动Slave列表中各台主机的守护进程，因此SSH也是必须安装的。\n安装配置JDK1.7（或更高版本）：Hadoop是用Java编写的程序，Hadoop的编译及MapReduce的运行都需要使用JDK，因此在安装Hadoop前，必须安装JDK1.7或更高版本。\nNTP服务配置：本实验需要在实现Hadoop集群搭建的同时，并进行高可用性（HA）的配置，因此需要通过ZooKeeper来对集群中的节点进行协调，而ZooKeeper需要保证节点间的时钟相互一致，因此需要在集群中配置NTP服务。\nSElinux安全配置：CentOS默认启用了SElinux，在网络服务方面权限要求比较严格，因此需要对SElinux安全配置进行更改。\nZooKeeper集群搭建：高可用性（HA）Hadoop集群的搭建需要依赖于ZooKeeper来对集群中的节点进行协调，因此需要进行ZooKeeper集群搭建。\nHadoop核心配置。Hadoop的稳定运行需要依赖于其核心配置文件，因此当上述准备工作就绪后，我们便需要着重进行配置文件编写来实现Hadoop的可靠运行。\n我们需要在节点1、节点2、节点3中进行高可用Hadoop集群环境的部署。各个节点所部署的服务如下所示：\n节点1 节点2 节点3 NameNode StandBy ResourceManager StandBy DFSZKFailoverController DFSZKFailoverController DataNode DataNode DataNode NodeManager NodeManager NodeManager JournalNode JournalNode JournalNode 1 集群节点基本配置 步骤1. 节点IP地址查询 在节点1、2、3中通过下面的命令查询节点IP地址： ifconfig 命令运行后的返回结果如下所示 (每台虚拟机的IP地址都是不同的，因此需要以实际地址信息为准）：\n[root@CentOS6 ~]# ifconfig eth6 Link encap:Ethernet HWaddr 02:00:1E:79:09:04 inet addr:10.1.1.4 Bcast:10.1.1.255 Mask:255.255.255.0 inet6 addr: fe80::1eff:fe79:904/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:20832 errors:0 dropped:0 overruns:0 frame:0 TX packets:13052 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:31392026 (29.9 MiB) TX bytes:929956 (908.1 KiB) lo Link encap:Local Loopback inet addr:127.0.0.1 Mask:255.0.0.0 inet6 addr: ::1/128 Scope:Host UP LOOPBACK RUNNING MTU:16436 Metric:1 RX packets:12 errors:0 dropped:0 overruns:0 frame:0 TX packets:12 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:0 RX bytes:720 (720.0 b) TX bytes:720 (720.0 b) [root@CentOS6 ~]# 需要记录三个节点的IP地址，在后文中我们需要根据此IP地址进行相关操作\n步骤2. 节点主机名配置 需要在节点1、2、3进行下列操作，将三个主机名分别配置为realtime-1，realtime-2，realtime-3\n通过下列命令使用vi编辑器编辑主机名配置文件： vi /etc/sysconfig/network 打开后的文件内容如下所示：\nNETWORKING=yes HOSTNAME=CentOS6.5 (注：需要将此行内容修改为实际的主机名realtime-1、realtime-2、realtime-3) 在文件中进行内容更改，将HOSTNAME字段内容配置成realtime-： HOSTNAME=realtime-1 编辑完成后保存文件并退出vi编辑器\n更改后的文件内容如下所示：\n更改后的内容会在下次系统重启的时候生效，通过下列命令重新启动系统： reboot 步骤3. 节点1、2、3主机名与IP地址映射文件配置 在节点1、2、3中，通过下列命令使用vi编辑器编辑hosts文件： vi /etc/hosts 打开后的文件内容如下所示：\n127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4 (注：在此行增加内容) ::1 localhost localhost.localdomain localhost6 localhost6.localdomain6 增加节点1、2、3的IP地址与主机名的映射关系、节点间的IP地址与主机名的映射关系、节点间的IP地址与主机名的映射关系，IP地址与主机名之间用空格分隔（主机名填写为前文配置的节点实际主机名称，IP地址需要根据上文中的查询结果来进行填写，并与实际的主机名相对应）： 10.1.1.4 realtime-1 10.1.1.3 realtime-2 10.1.1.206 realtime-3 更改后的文件内容如下所示\n127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4 ::1 localhost localhost.localdomain localhost6 localhost6.localdomain6 10.1.1.4 realtime-1 10.1.1.3 realtime-2 10.1.1.206 realtime-3 编辑完成后保存文件并退出vi编辑器\n通过下列命令检测主机名与IP映射是否配置成功： ping realtime-1 -c 2 如果配置成功，则会显示如下结果：\n[root@realtime-1 ~]# ping realtime-1 -c 2 (注：通过此命令向realtime-1节点发送2个报文) PING realtime-1 (10.1.1.4) 56(84) bytes of data. 64 bytes from realtime-1 (10.1.1.4): icmp_seq=1 ttl=64 time=1.98 ms 64 bytes from realtime-1 (10.1.1.4): icmp_seq=2 ttl=64 time=0.341 ms --- realtime-1 ping statistics --- 2 packets transmitted, 2 received, 0% packet loss, time 1001ms rtt min/avg/max/mdev = 0.341/1.163/1.985/0.822 ms [root@realtime-1 ~]# 通过下列命令检测主机名与IP映射是否配置成功： ping realtime-2 -c 2 如果配置成功，则会显示如下结果：\n[root@realtime-1 ~]# ping realtime-2 -c 2 (注：通过此命令向realtime-2节点发送2个报文) PING realtime-2 (10.1.1.3) 56(84) bytes of data. 64 bytes from realtime-2 (10.1.1.3): icmp_seq=1 ttl=64 time=0.047 ms 64 bytes from realtime-2 (10.1.1.3): icmp_seq=2 ttl=64 time=0.026 ms --- realtime-2 ping statistics --- 2 packets transmitted, 2 received, 0% packet loss, time 999ms rtt min/avg/max/mdev = 0.026/0.036/0.047/0.012 ms [root@realtime-1 ~]# 通过下列命令检测主机名与IP映射是否配置成功： ping realtime-3 -c 2 如果配置成功，则会显示如下结果：\n[root@realtime-1 ~]# ping realtime-3 -c 2 (注：通过此命令向realtime-3节点发送2个报文) PING realtime-3 (10.1.1.206) 56(84) bytes of data. 64 bytes from realtime-3 (10.1.1.206): icmp_seq=1 ttl=64 time=1.36 ms 64 bytes from realtime-3 (10.1.1.206): icmp_seq=2 ttl=64 time=0.315 ms --- realtime-3 ping statistics --- 2 packets transmitted, 2 received, 0% packet loss, time 1002ms rtt min/avg/max/mdev = 0.315/0.841/1.367/0.526 ms [root@realtime-1 ~]# 如果无法进行正常的报文发送，请检查主机名是否配置正确，同时请检查主机名与IP地址映射是否配置正确。\n2 配置SSH免密码登录 步骤1. 节点1、2、3秘钥配置及分发 例如节点1 : 需要在节点1进行下列操作，在节点1中生成秘钥文件，然后将公钥文件分发到节点2和节点3中，实现在节点1可以免密码登录到集群中的其他主机中。\n通过下面的命令生成密钥（使用rsa加密方式）： echo -e \u0026#34;\\n\u0026#34;|ssh-keygen -t rsa -N \u0026#34;\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1 默认情况下会在~/.ssh/文件夹下生成公钥文件id_rsa.pub和私钥文件id_rsa，通过下面的命令对~/.ssh/内容进行查看：\nll ~/.ssh/ 命令运行后的返回结果如下所示：\n[root@realtime-1 ~]# ll ~/.ssh/ 总用量 8 -rw-------. 1 root root 1675 11月 29 13:42 id_rsa -rw-r--r--. 1 root root 397 11月 29 13:42 id_rsa.pub [root@realtime-1 ~]# 通过下面的命令将公钥文件发送到本机以及其他两个节点，创建root免密钥通道（需要输入密码：111111）： ssh-copy-id -i /root/.ssh/id_rsa.pub root@realtime-1 # 其他的节点需要随之改动root@realtime-2 and root@realtime-3 命令运行后的返回结果如下所示：\n[root@realtime-1 ~]# ssh-copy-id -i /root/.ssh/id_rsa.pub root@realtime-1 The authenticity of host \u0026#39;realtime-1 (10.1.1.4)\u0026#39; can\u0026#39;t be established. RSA key fingerprint is 9f:3b:30:10:65:46:c9:c3:2b:fb:e5:28:38:39:9c:84. Are you sure you want to continue connecting (yes/no)? yes (注：此处需要输入yes) Warning: Permanently added \u0026#39;realtime-1,10.1.1.4\u0026#39; (RSA) to the list of known hosts. root@realtime-1\u0026#39;s password: （注：此处需要输入root用户密码，为111111） Now try logging into the machine, with \u0026#34;ssh \u0026#39;root@realtime-1\u0026#39;\u0026#34;, and check in: .ssh/authorized_keys to make sure we haven\u0026#39;t added extra keys that you weren\u0026#39;t expecting. [root@realtime-1 ~]# 步骤2. SSH免密码登录测试 集群中各个节点秘钥分发完毕后，可以通过ssh远程登录命令来测试免密码登录是否配置成功。为了操作统一，我们在节点3中进行下面的操作（在其他节点操作所实现的效果也是一样的）\n在节点3中通过下面的命令可以实现免密码远程登录到节点1： ssh realtime-1 #依次运行realtime-2 and realtime-3 命令运行后的返回结果如下所示：\n[root@realtime-3 ~]# ssh realtime-1 Last login: Thu Nov 29 14:08:34 2018 from realtime-3 [root@realtime-1 ~]# 如果从源主机到目的主机的登录过程中，出现需要输入密码的情况，那么需要检查是否已经成功将源主机的公钥文件发送到目的主机中\n3 安装配置JDK1.8 JDK需要在集群3个节点都进行安装，为了操作方便，我们在节点1进行下列操作，在节点1中通过ssh远程登录到节点2和节点3中，实现命令的分发与运行\n我们可以在Oracle JDK的官网下载相应版本的JDK，官网地址为:http://www.oracle.com/technetwork/java/javase/downloads/index.html\n步骤1. 创建工作路径 首先需要在终端中输入下列命令，在/usr目录下建立cx工作路径： mkdir /usr/cx 通过下面的命令实现在节点2和节点3的/usr目录下建立cx工作路径： ssh realtime-2 \u0026#34;mkdir /usr/cx\u0026#34; ssh realtime-3 \u0026#34;mkdir /usr/cx\u0026#34; 步骤2. 解压安装包 我们可以在/usr/software/目录下找到jdk-8u60-linux-x64.tar.gz安装包，通过下列命令将其解压到/usr/cx/目录下： tar -zxvf /usr/software/jdk-8u60-linux-x64.tar.gz -C /usr/cx 命令执行后的输出内容如下所示：\n(-------------------省略------------------------) jdk1.8.0_60/bin/jmc.ini jdk1.8.0_60/bin/jmap jdk1.8.0_60/bin/serialver jdk1.8.0_60/bin/wsgen jdk1.8.0_60/bin/jrunscript jdk1.8.0_60/bin/javah jdk1.8.0_60/bin/javac jdk1.8.0_60/bin/jvisualvm jdk1.8.0_60/bin/jcontrol jdk1.8.0_60/release [root@realtime-1 ~]# 通过下列命令实现在节点2和节点3中将jdk-8u60-linux-x64.tar.gz安装包解压到/usr/cx/目录下： ssh realtime-2 \u0026#34;tar -zxvf /usr/software/jdk-8u60-linux-x64.tar.gz -C /usr/cx\u0026#34; ssh realtime-3 \u0026#34;tar -zxvf /usr/software/jdk-8u60-linux-x64.tar.gz -C /usr/cx\u0026#34; 步骤3. 配置环境变量 通过下列命令使用vi编辑器打开 ~/.bashrc文件： vi ~/.bashrc 打开的~/.bashrc文件内容如下所示：\n# .bashrc # User specific aliases and functions alias rm=\u0026#39;rm -i\u0026#39; alias cp=\u0026#39;cp -i\u0026#39; alias mv=\u0026#39;mv -i\u0026#39; # Source global definitions if [ -f /etc/bashrc ]; then . /etc/bashrc fi (----------------注：需要在此处增加内容-------------------) 在文件中写入下列内容： export JAVA_HOME=/usr/cx/jdk1.8.0_60 export PATH=$JAVA_HOME/bin:$PATH export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/jre/lib/tools.jar 编辑完成后保存文件并退出vi编辑器。\n通过下面的命令将环境变量配置文件分发到节点2和节点3： scp ~/.bashrc root@realtime-2:~/.bashrc scp ~/.bashrc root@realtime-3:~/.bashrc 命令执行后的输出内容如下所示：\n[root@realtime-1 ~]# scp ~/.bashrc root@realtime-2:~/.bashrc .bashrc 100% 320 0.3KB/s 00:00 [root@realtime-1 ~]# 步骤4. 更新环境变量 执行如下命令，更新环境变量： source ~/.bashrc 执行如下命令，更新节点2和节点3的环境变量： ssh realtime-2 \u0026#34;source ~/.bashrc\u0026#34; ssh realtime-3 \u0026#34;source ~/.bashrc\u0026#34; 步骤5. 验证JDK是否配置成功 通过下面的命令验证JDK是否安装并配置成功： java -version 如果出现如下JDK版本信息，则说明安装配置成功：\n[root@realtime-1 ~]# java -version java version \u0026#34;1.8.0_60\u0026#34; (注：JDK版本号) Java(TM) SE Runtime Environment (build 1.8.0_60-b27) (注：Java运行环境版本号) Java HotSpot(TM) 64-Bit Server VM (build 25.60-b23, mixed mode) [root@realtime-1 ~]# 通过下面的命令验证节点2和节点3的JDK是否安装并配置成功： ssh realtime-2 \u0026#34;java -version\u0026#34; ssh realtime-3 \u0026#34;java -version\u0026#34; 如果没有正确输出相关版本信息，请检查~/.bashrc文件中的JDK环境变量是否配置正确，同时请确定是否使用source ~/.bashrc命令更新环境变量配置\n4 NTP服务配置 需要在集群的3台节点中都进行NTP服务的配置\n步骤1. NTP服务配置 在节点1、节点2、节点3中通过下面的命令打开NTP配置文件： vi /etc/ntp.conf 打开后的文件内容如下所示：\n（---------------省略----------------） # Permit all access over the loopback interface. This could # be tightened as well, but to do so would effect some of # the administrative functions. restrict 127.0.0.1 restrict -6 ::1 # Hosts on local network are less restricted. #restrict 192.168.1.0 mask 255.255.255.0 nomodify notrap # Use public servers from the pool.ntp.org project. # Please consider joining the pool (http://www.pool.ntp.org/join.html). server 0.centos.pool.ntp.org iburst （注：注释此行内容） server 1.centos.pool.ntp.org iburst （注：注释此行内容） server 2.centos.pool.ntp.org iburst （注：注释此行内容） server 3.centos.pool.ntp.org iburst （注：注释此行内容） （注：在此处增加内容） #broadcast 192.168.1.255 autokey # broadcast server （---------------省略----------------） 在文件中进行下列内容更改（通过server字段设置本机为NTP Serevr服务器，通过restrict限制realtime-2和realtime-3主机名对应的主机可以同步时间）：\n#server 0.centos.pool.ntp.org iburst #server 1.centos.pool.ntp.org iburst #server 2.centos.pool.ntp.org iburst #server 3.centos.pool.ntp.org iburst server 127.127.1.0 fudge 127.127.1.0 stratum 10 restrict realtime-2 nomodify notrap restrict realtime-3 nomodify notrap 更改完成后保存文件并退出编辑器\n步骤2. 启动NTP服务 为了操作方便，我们在节点1进行下列操作，在节点1中通过ssh远程登录到节点2和节点3中，实现命令的分发与运行。\n通过下面的命令在节点1中设定NTP服务自启动： chkconfig ntpd on 通过下面的命令在节点1中启动NTP服务： service ntpd start 命令运行后的返回结果如下所示：\n[root@realtime-1 ~]# service ntpd start 正在启动 ntpd： [确定] [root@realtime-1 ~]# 通过下面的命令在节点2中设定NTP服务自启动： ssh realtime-2 \u0026#34;chkconfig ntpd on\u0026#34; 通过下面的命令在节点2中启动NTP服务： ssh realtime-2 \u0026#34;service ntpd start\u0026#34; 命令运行后的返回结果如下所示：\n[root@realtime-1 ~]# ssh realtime-2 \u0026#34;service ntpd start\u0026#34; 正在启动 ntpd：[确定] [root@realtime-1 ~]# 通过下面的命令在节点3中设定NTP服务自启动： ssh realtime-3 \u0026#34;chkconfig ntpd on\u0026#34; 通过下面的命令在节点3中启动NTP服务： ssh realtime-3 \u0026#34;service ntpd start\u0026#34; 命令运行后的返回结果如下所示：\n[root@realtime-1 ~]# ssh realtime-3 \u0026#34;service ntpd start\u0026#34; 正在启动 ntpd：[确定] [root@realtime-1 ~]# 如果服务无法正常启动，会出现相关的错误提示信息，只需要根据错误提示进行更改即可。\n步骤3. NTP服务状态查看 为了操作方便，我们在节点1进行下列操作，在节点1中通过ssh远程登录到节点2和节点3中，实现命令的分发与运行。\n通过下面的命令查看节点1中NTP服务的运行状态： ntpstat 命令运行后的返回结果如下所示（由于节点1是作为Server节点，所以其状态会很快变成synchronised，此时说明服务已经正常启动）：\n[root@realtime-1 ~]# ntpstat synchronised to local net at stratum 11 time correct to within 449 ms polling server every 64 s [root@realtime-1 ~]# 通过下面的命令查看节点2和节点三中NTP服务的运行状态： ssh realtime-2 \u0026#34;ntpstat\u0026#34; ssh realtime-3 \u0026#34;ntpstat\u0026#34; 命令运行后的返回结果如下所示（由于节点2需要同步节点1的时间，因此需要大概15分钟其状态才会由unsynchronised会变成synchronised，当状态变为synchronised时说明服务已经正常启动）：\n[root@realtime-1 ~]# ssh realtime-2 \u0026#34;ntpstat\u0026#34; unsynchronised polling server every 64 s [root@realtime-1 ~]# 服务正常启动后的状态如下所示：\n[root@realtime-1 ~]# ssh realtime-3 \u0026#34;ntpstat\u0026#34; synchronised to NTP server (10.1.1.4) at stratum 12 time correct to within 25 ms polling server every 64 s [root@realtime-1 ~]# 当3个节点的状态都显示为synchronised时，则表示ntp服务已经启动成功；如果一直显示unsynchronised,可能是配置文件有错误，因此需要检查IP地址是否配置正确。\n同学们不必一直等待，可以先进行下文的实验，然后过后再查看NTP服务状态。\n5 SElinux安全配置 需要在集群3个节点都进行SElinux配置，为了操作方便，我们在节点1进行下列操作，在节点1中通过ssh远程登录到节点2和节点3中，实现命令的分发与运行。\n通过下面的命令，关闭节点1、节点2、节点3的SElinux安全设置： /bin/sed -i \u0026#39;s/SELINUX=enforcing/SELINUX=disabled/\u0026#39; /etc/selinux/config ssh realtime-2 \u0026#34;/bin/sed -i \u0026#39;s/SELINUX=enforcing/SELINUX=disabled/\u0026#39; /etc/selinux/config\u0026#34; ssh realtime-3 \u0026#34;/bin/sed -i \u0026#39;s/SELINUX=enforcing/SELINUX=disabled/\u0026#39; /etc/selinux/config\u0026#34; 6 安装配置ZooKeeper集群 由于我们需要搭建一套具备高可用性的Hadoop集群，因此需要通过ZooKeeper来进行集群中服务的协调。ZooKeeper需要在集群3个节点进行安装配置，为了操作方便，我们在节点1进行下列操作，在节点1中通过ssh远程登录到节点2和节点3中，实现命令的分发与运行\n在模板中我们已经将ZooKeeper安装文件zookeeper-3.4.6.tar.gz放到了/usr/software目录下，同学们可以直接使用\n步骤1. 解压安装包 通过下列命令将ZooKeeper安装包解压到/usr/cx目录下： tar -zxvf /usr/software/zookeeper-3.4.6.tar.gz -C /usr/cx 命令运行后的返回结果如下所示：\n(---------------------省略--------------------) zookeeper-3.4.6/recipes/queue/test/org/apache/zookeeper/recipes/queue/DistributedQueueTest.java zookeeper-3.4.6/recipes/queue/build.xml zookeeper-3.4.6/zookeeper-3.4.6.jar zookeeper-3.4.6/lib/ zookeeper-3.4.6/lib/cobertura/ zookeeper-3.4.6/lib/cobertura/README.txt zookeeper-3.4.6/lib/jline-0.9.94.jar zookeeper-3.4.6/lib/log4j-1.2.16.LICENSE.txt zookeeper-3.4.6/lib/slf4j-log4j12-1.6.1.jar zookeeper-3.4.6/lib/jdiff/ zookeeper-3.4.6/lib/jdiff/zookeeper_3.1.1.xml zookeeper-3.4.6/lib/jdiff/zookeeper_3.4.6-SNAPSHOT.xml zookeeper-3.4.6/lib/jdiff/zookeeper_3.4.6.xml zookeeper-3.4.6/lib/slf4j-api-1.6.1.jar zookeeper-3.4.6/lib/log4j-1.2.16.jar zookeeper-3.4.6/lib/netty-3.7.0.Final.jar zookeeper-3.4.6/lib/jline-0.9.94.LICENSE.txt [root@realtime-1 ~]# 解压完成后，我们可以查看解压后的文件夹内容： ls /usr/cx/zookeeper-3.4.6/ 命令运行后的返回结果如下所示：\n[root@realtime-1 ~]# ls /usr/cx/zookeeper-3.4.6/ bin dist-maven LICENSE.txt src build.xml docs NOTICE.txt zookeeper-3.4.6.jar CHANGES.txt ivysettings.xml README_packaging.txt zookeeper-3.4.6.jar.asc conf ivy.xml README.txt zookeeper-3.4.6.jar.md5 contrib lib recipes zookeeper-3.4.6.jar.sha1 [root@realtime-1 ~]# 步骤2. 数据存储目录创建 通过下面的命令创建ZooKeeper数据存储目录： mkdir -p /home/data 通过下面的命令创建ZooKeeper日志存储目录：\nmkdir -p /home/logs 通过下面的命令在节点2、节点3中创建ZooKeeper数据存储目录： ssh realtime-2 \u0026#34;mkdir -p /home/data\u0026#34; ssh realtime-3 \u0026#34;mkdir -p /home/data\u0026#34; 通过下面的命令在节点2、节点3中创建ZooKeeper日志存储目录：\nssh realtime-2 \u0026#34;mkdir -p /home/logs\u0026#34; ssh realtime-3 \u0026#34;mkdir -p /home/logs\u0026#34; 步骤3. 主机myid编号文件创建 通过下面的命令创建myid文件，并设置节点1对应的编号为1（集群启动后会通过此编号来进行主机识别）： echo \u0026#34;1\u0026#34; \u0026gt; /home/data/myid 通过下面的命令在节点2中创建myid文件，并设置节点2对应的编号为2（集群启动后会通过此编号来进行主机识别）： ssh realtime-2 \u0026#34;echo \u0026#34;2\u0026#34; \u0026gt; /home/data/myid\u0026#34; 通过下面的命令在节点3中创建myid文件，并设置节点3对应的编号为3（集群启动后会通过此编号来进行主机识别）： ssh realtime-3 \u0026#34;echo \u0026#34;3\u0026#34; \u0026gt; /home/data/myid\u0026#34; 步骤4. ZooKeeper配置文件编辑 通过下列命令创建并打开zoo.cfg配置文件： vi /usr/cx/zookeeper-3.4.6/conf/zoo.cfg 在文件中写入下列内容：\ntickTime=2000 dataDir=/home/data clientPort=2181 dataLogDir=/home/logs initLimit=5 syncLimit=2 server.1=realtime-1:2888:3888 server.2=realtime-2:2888:3888 server.3=realtime-3:2888:3888 编辑完成后保存文件并退出vi编辑器。\n在上述配置中，我们设置心跳时间为2000毫秒，设置ZooKeeper在本地保存数据的目录为/home/data，ZooKeeper监听客户端连接的端口为2181,设置所有Follower和Leader进行同步的时间为5s，设置一个Follower和Leader进行同步的时间为2s。同时设定集群中有3台主机，其中realtime-1对应的主机编号为1，Follower与Leader之间交换信息的端口为2888，进行Leader选举的端口为3888；realtime-2对应的主机编号为2，Follower与Leader之间交换信息的端口为2888，进行Leader选举的端口为3888；realtime-3对应的主机编号为3，Follower与Leader之间交换信息的端口为2888，进行Leader选举的端口为3888。\n步骤5. 文件分发 通过下面的命令将节点1的ZooKeeper文件包分发到节点2、节点3中： scp -r /usr/cx/zookeeper-3.4.6 root@realtime-2:/usr/cx/ scp -r /usr/cx/zookeeper-3.4.6 root@realtime-3:/usr/cx/ 命令运行后的返回结果如下所示：\n（----------------------省略------------------------） Makefile.am 100% 74 0.1KB/s 00:00 zkServer.cmd 100% 1084 1.1KB/s 00:00 zkEnv.sh 100% 2696 2.6KB/s 00:00 zkCleanup.sh 100% 1937 1.9KB/s 00:00 zkCli.sh 100% 1534 1.5KB/s 00:00 zkEnv.cmd 100% 1333 1.3KB/s 00:00 zkCli.cmd 100% 1049 1.0KB/s 00:00 README.txt 100% 238 0.2KB/s 00:00 zkServer.sh 100% 5742 5.6KB/s 00:00 NOTICE.txt 100% 170 0.2KB/s 00:00 zookeeper-3.4.6.jar.md5 100% 33 0.0KB/s 00:00 README.txt 100% 1585 1.6KB/s 00:00 CHANGES.txt 100% 79KB 78.9KB/s 00:00 zookeeper-3.4.6.jar.sha1 100% 41 0.0KB/s 00:00 [root@realtime-1 ~]# 步骤6. ZooKeeper环境变量配置 通过下列命令使用vi编辑器打开 ~/.bashrc文件： vi ~/.bashrc 打开的~/.bashrc文件内容如下所示：\n# .bashrc # User specific aliases and functions alias rm=\u0026#39;rm -i\u0026#39; alias cp=\u0026#39;cp -i\u0026#39; alias mv=\u0026#39;mv -i\u0026#39; # Source global definitions if [ -f /etc/bashrc ]; then . /etc/bashrc fi export JAVA_HOME=/usr/cx/jdk1.8.0_60 export PATH=$JAVA_HOME/bin:$PATH export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/jre/lib/tools.jar (----------------注：需要在此处增加内容-------------------) 在文件中写入下列内容： export ZK_HOME=/usr/cx/zookeeper-3.4.6 export PATH=$PATH:$ZK_HOME/bin 编辑完成后保存文件并退出vi编辑器。\n通过下面的命令将环境变量配置文件分发到节点2和节点3： scp ~/.bashrc root@realtime-2:~/.bashrc scp ~/.bashrc root@realtime-3:~/.bashrc 步骤7. 更新环境变量 执行如下命令，更新环境变量： source ~/.bashrc ssh realtime-2 \u0026#34;source ~/.bashrc\u0026#34; ssh realtime-3 \u0026#34;source ~/.bashrc\u0026#34; 步骤8. 验证环境变量是否配置成功 通过下面的命令验证环境变量是否配置成功： zkServer.sh ssh realtime-2 \u0026#34;zkServer.sh\u0026#34; ssh realtime-3 \u0026#34;zkServer.sh\u0026#34; 命令运行后的返回结果如下所示：\n[root@realtime-1 ~]# zkServer.sh JMX enabled by default Using config: /usr/cx/zookeeper-3.4.6/bin/../conf/zoo.cfg Usage: /usr/cx/zookeeper-3.4.6/bin/zkServer.sh {start|start-foreground|stop|restart|status|upgrade|print-cmd} [root@realtime-1 ~]# 由输出内容可以看出，ZooKeeper环境变量已经配置正确，并且可以正常执行。\n7 ZooKeeper启动及状态查看 步骤1. ZooKeeper启动 通过下面的命令启动ZooKeeper服务： zkServer.sh start ssh realtime-2 \u0026#34;zkServer.sh start\u0026#34; ssh realtime-3 \u0026#34;zkServer.sh start\u0026#34; 命令运行后的返回结果如下所示：\n[root@realtime-1 ~]# zkServer.sh start JMX enabled by default Using config: /usr/cx/zookeeper-3.4.6/bin/../conf/zoo.cfg Starting zookeeper ... STARTED [root@realtime-1 ~]# 步骤2. ZooKeeper运行状态查看 ZooKeeper运行之后会随机进行follower角色以及leader角色选举，当leader角色节点出现异常后，会从其他节点中选举出新的leader角色。至于具体哪个节点处于leader状态，需要根据实际情况确定，并不是千篇一律的\n通过下面的命令可以查看ZooKeeper运行状态：\nzkServer.sh status ssh realtime-2 \u0026#34;zkServer.sh status\u0026#34; ssh realtime-3 \u0026#34;zkServer.sh status\u0026#34; 命令运行后的返回结果如下所示（由返回结果的Mode字段可以看出，当前节点是作为follower角色运行的）：\n[root@realtime-1 ~]# zkServer.sh status JMX enabled by default Using config: /usr/cx/zookeeper-3.4.6/bin/../conf/zoo.cfg Mode: follower [root@realtime-1 ~]# 8 安装配置Hadoop集群 Hadoop需要在集群3个节点进行安装配置，为了操作方便，我们在节点1进行下列操作，在节点1中通过ssh远程登录到节点2和节点3中，实现命令的分发与运行\n在模板中，我们已经将相应的Hadoop安装包hadoop-2.7.1.tar.gz放到/usr/software/目录下，同学们不需要再次下载，可以直接使用。\n步骤1. 数据存储目录创建 mkdir -p /hdfs/namenode mkdir -p /hdfs/datanode mkdir -p /hdfs/journalnode mkdir -p /var/log/hadoop-yarn ssh realtime-2 \u0026#34;mkdir -p /hdfs/namenode\u0026#34; ssh realtime-2 \u0026#34;mkdir -p /hdfs/datanode\u0026#34; ssh realtime-2 \u0026#34;mkdir -p /hdfs/journalnode\u0026#34; ssh realtime-2 \u0026#34;mkdir -p /var/log/hadoop-yarn\u0026#34; ssh realtime-3 \u0026#34;mkdir -p /hdfs/namenode\u0026#34; ssh realtime-3 \u0026#34;mkdir -p /hdfs/datanode\u0026#34; ssh realtime-3 \u0026#34;mkdir -p /hdfs/journalnode\u0026#34; ssh realtime-3 \u0026#34;mkdir -p /var/log/hadoop-yarn\u0026#34; 步骤2. 解压安装文件 通过下列命令解压Hadoop安装文件，将文件解压到/usr/cx目录下：\ntar -zxvf /usr/software/hadoop-2.7.1.tar.gz -C /usr/cx 命令执行后的输出内容如下所示：\n(-------------------省略------------------------) hadoop-2.7.1/libexec/hdfs-config.sh hadoop-2.7.1/README.txt hadoop-2.7.1/NOTICE.txt hadoop-2.7.1/lib/ hadoop-2.7.1/lib/native/ hadoop-2.7.1/lib/native/libhadoop.a hadoop-2.7.1/lib/native/libhadoop.so hadoop-2.7.1/lib/native/libhadooppipes.a hadoop-2.7.1/lib/native/libhdfs.so.0.0.0 hadoop-2.7.1/lib/native/libhadooputils.a hadoop-2.7.1/lib/native/libhdfs.a hadoop-2.7.1/lib/native/libhdfs.so hadoop-2.7.1/lib/native/libhadoop.so.1.0.0 hadoop-2.7.1/LICENSE.txt [root@master ~]# 步骤3. 编辑Hadoop配置文件： 使用vi命令打开hadoop-env.sh配置文件进行编辑： vi /usr/cx/hadoop-2.7.1/etc/hadoop/hadoop-env.sh 打开后的文件内容如下所示：\n(-------------------省略------------------------) # Set Hadoop-specific environment variables here. # The only required environment variable is JAVA_HOME. All others are # optional. When running a distributed configuration it is best to # set JAVA_HOME in this file, so that it is correctly defined on # remote nodes. # The java implementation to use. export JAVA_HOME=${JAVA_HOME} (注：需要对此行内容进行更改，为Hadoop绑定Java运行环境) # The jsvc implementation to use. Jsvc is required to run secure datanodes # that bind to privileged ports to provide authentication of data transfer # protocol. Jsvc is not required if SASL is configured for authentication of # data transfer protocol using non-privileged ports. #export JSVC_HOME=${JSVC_HOME} export HADOOP_CONF_DIR=${HADOOP_CONF_DIR:-\u0026#34;/etc/hadoop\u0026#34;} (-------------------省略------------------------) 在文件中进行下列内容更改，将JAVA_HOME对应的值改成实际的JDK安装路径：\nexport JAVA_HOME=/usr/cx/jdk1.8.0_60\n编辑完成后保存文件并退出vi编辑器。\n使用vi命令打开hdfs-site.xml文件进行配置： vi /usr/cx/hadoop-2.7.1/etc/hadoop/hdfs-site.xml 打开后的文件内容如下所示：\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;?xml-stylesheet type=\u0026#34;text/xsl\u0026#34; href=\u0026#34;configuration.xsl\u0026#34;?\u0026gt; \u0026lt;!-- Licensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. See accompanying LICENSE file. --\u0026gt; \u0026lt;!-- Put site-specific property overrides in this file. --\u0026gt; \u0026lt;configuration\u0026gt; (注：需要在此处进行相关内容配置) \u0026lt;/configuration\u0026gt; 在文件中\u0026lt;configuration\u0026gt;和\u0026lt;/configuration\u0026gt;之间增加下列内容：\n/*配置DataNode的数据存储目录，需要与上文创建的目录相对应*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.datanode.data.dir\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;/hdfs/datanode\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*配置数据块大小为256M*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.blocksize\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;268435456\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*自定义的HDFS服务名，在高可用集群中，无法配置单一HDFS服务器入口，所以需要指定一个逻辑上的服务名，当访问服务名时，会自动选择NameNode节点进行访问*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.nameservices\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;HDFScluster\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*配置NameNode的数据存储目录，需要与上文创建的目录相对应*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.namenode.name.dir\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;/hdfs/namenode\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*定义HDFS服务名所指向的NameNode主机名称*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.ha.namenodes.HDFScluster\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;realtime-1,realtime-2\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*设置NameNode的完整监听地址*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.namenode.rpc-address.HDFScluster.realtime-1\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;realtime-1:8020\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*设置NameNode的完整监听地址*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.namenode.rpc-address.HDFScluster.realtime-2\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;realtime-2:8020\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*设置NameNode的HTTP访问地址*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.namenode.http-address.HDFScluster.realtime-1\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;realtime-1:50070\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*设置NameNode的HTTP访问地址*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.namenode.http-address.HDFScluster.realtime-2\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;realtime-2:50070\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*设置主从NameNode元数据同步地址，官方推荐将nameservice作为最后的journal ID*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.namenode.shared.edits.dir\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;qjournal://realtime-1:8485;realtime-2:8485;realtime-3:8485/HDFScluster\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*设置HDFS客户端用来连接集群中活动状态NameNode节点的Java类*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.client.failover.proxy.provider.HDFScluster\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*设置SSH登录的私钥文件地址*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.ha.fencing.ssh.private-key-files\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;/root/.ssh/id_rsa\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*启动fence过程，确保集群高可用性*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.ha.fencing.methods\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;shell(/bin/true)\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*配置JournalNode的数据存储目录，需要与上文创建的目录相对应*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.journalnode.edits.dir\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;/hdfs/journalnode\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*设置自动切换活跃节点，保证集群高可用性*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.ha.automatic-failover.enabled\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;true\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*配置数据块副本数*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.replication\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;3\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*将dfs.webhdfs.enabled属性设置为true，否则就不能使用webhdfs的LISTSTATUS、LIST FILESTATUS等需要列出文件、文件夹状态的命令，因为这些信息都是由namenode保存的*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.webhdfs.enabled\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;true\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; 编辑完成后保存文件并退出vi编辑器\n在集群中，对HDFS集群访问的入口是NameNode所在的服务器。但是在两个NameNode节点的HA集群中，无法配置单一服务器入口，所以需要通过dfs.nameservices指定一个逻辑上的服务名，这个服务名是自定义的。当外界访问HDFS集群时，入口就变为这个服务名称，Hadoop会自动实现将访问请求转发到实际的处于Active状态的NameNode节点上。\n当配置了HDFS HA集群时，会有两个NameNode，为了避免两个NameNode都为Active状态，当发生failover时，Standby的节点要执行一系列方法把原来那个Active节点中不健康的NameNode服务给杀掉（这个过程就称为fence）。而dfs.ha.fencing.methods配置就是配置了执行杀死原来Active NameNode服务的方法，为了保险起见，因此指定无论如何都把StandBy节点的状态提升为Active，所以最后要配置一个shell(/bin/true)，保证不论前面的方法执行的情况如何，最后fence过程返回的结果都为True。fence操作需要通过SSH进行节点间的访问，因此需要配置dfs.ha.fencing.ssh.private-key-files为所需要用到的私钥文件路径信息。\n使用vi命令打开core-site.xml配置文件进行编辑： vi /usr/cx/hadoop-2.7.1/etc/hadoop/core-site.xml 打开后的文件内容如下所示：\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;?xml-stylesheet type=\u0026#34;text/xsl\u0026#34; href=\u0026#34;configuration.xsl\u0026#34;?\u0026gt; \u0026lt;!-- Licensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. See accompanying LICENSE file. --\u0026gt; \u0026lt;!-- Put site-specific property overrides in this file. --\u0026gt; \u0026lt;configuration\u0026gt; (注：需要在此处进行相关内容配置) \u0026lt;/configuration\u0026gt; 在文件中和之间增加下列内容：\n/*设置默认的HDFS访问路径，需要与hdfs-site.xml中的HDFS服务名相一致*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;fs.defaultFS\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;hdfs://HDFScluster\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*临时文件夹路径设置*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;hadoop.tmp.dir\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;/usr/tmp\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*配置ZooKeeper服务集群，用于活跃NameNode节点的选举*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;ha.zookeeper.quorum\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;realtime-1:2181,realtime-2:2181,realtime-3:2181\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*设置数据压缩算法*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;io.compression.codecs\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;org.apache.hadoop.io.compress.DefaultCodec,org.apache.hadoop.io.compress.GzipCodec,org.apache.hadoop.io.compress.BZip2Codec,com.hadoop.compression.lzo.LzoCodec,com.hadoop.compression.lzo.LzopCodec,org.apache.hadoop.io.compress.SnappyCodec\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;io.compression.codec.lzo.class\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;com.hadoop.compression.lzo.LzoCodec\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*设置使用hduser用户可以代理所有主机用户进行任务提交*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;hadoop.proxyuser.hduser.host\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;*\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*设置使用hduser用户可以代理所有组用户进行任务提交*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;hadoop.proxyuser.hduser.groups\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;*\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; 编辑完成后保存文件并退出vi编辑器\n对HDFS集群访问的入口是NameNode所在的服务器，但是在两个NameNode节点的HA集群中，无法配置单一服务器入口，所以需要在hdfs-site.xml中通过dfs.nameservices指定一个逻辑上的服务名，因此此处的fs.defaultFS配置的入口地址需要与hdfs-site.xml中dfs.nameservices所配置的一致。\n使用vi命令打开yarn-site.xml文件进行配置： vi /usr/cx/hadoop-2.7.1/etc/hadoop/yarn-site.xml 打开后的文件内容如下所示：\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; \u0026lt;!-- Licensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. See accompanying LICENSE file. --\u0026gt; \u0026lt;configuration\u0026gt; (注：需要在此处进行相关内容配置) \u0026lt;!-- Site specific YARN configuration properties --\u0026gt; \u0026lt;/configuration\u0026gt; 在文件中和之间增加下列内容：\n/*设置NodeManager上运行的附属服务，需配置成mapreduce_shuffle才可运行MapReduce程序*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.nodemanager.aux-services\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;mapreduce_shuffle\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.nodemanager.aux-services.mapreduce_shuffle.class\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;org.apache.hadoop.mapred.ShuffleHandler\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*设置任务日志存储目录*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.nodemanager.log-dirs\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;file:///var/log/hadoop-yarn \u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*设置Hadoop依赖包地址*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.application.classpath\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt; $HADOOP_HOME/share/hadoop/common/*,$HADOOP_HOME/share/hadoop/common/lib/*, $HADOOP_HOME/share/hadoop/hdfs/*,$HADOOP_HOME/share/hadoop/hdfs/lib/*, $HADOOP_HOME/share/hadoop/mapreduce/*,$HADOOP_HOME/share/hadoop/mapreduce/lib/*, $HADOOP_HOME/share/hadoop/yarn/*,$HADOOP_HOME/share/hadoop/yarn/lib/* \u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*开启resourcemanager 的高可用性功能*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.resourcemanager.ha.enabled\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;true\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*标识集群中的resourcemanager，如果设置该选项，需要确保所有的resourcemanager节点在配置中都有自己的逻辑id*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.resourcemanager.cluster-id\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;YARNcluster\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*设置resourcemanager节点的逻辑id*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.resourcemanager.ha.rm-ids\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;rm1,rm2\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*为每个逻辑id绑定实际的主机名称*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.resourcemanager.hostname.rm1\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;realtime-1\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.resourcemanager.hostname.rm2\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;realtime-2\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*指定ZooKeeper服务地址*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.resourcemanager.zk-address\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;realtime-1:2181,realtime-2:2181,realtime-3:2181\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*指定resourcemanager的WEB访问地址*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.resourcemanager.webapp.address.rm1\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;realtime-1:8089\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.resourcemanager.webapp.address.rm2\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;realtime-2:8089\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*设定虚拟内存与实际内存的比例，比例值越高，则可用虚拟内存就越多*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.nodemanager.vmem-pmem-ratio\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;3\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*设定单个容器可以申领到的最小内存资源*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.scheduler.minimum-allocation-mb\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;32\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*设置当任务运行结束后，日志文件被转移到的HDFS目录*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.nodemanager.remote-app-log-dir\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;hdfs://HDFScluster/var/log/hadoop-yarn/apps\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*设定资源调度策略，目前可用的有FIFO、Capacity Scheduler和Fair Scheduler*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.resourcemanager.scheduler.class\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.CapacityScheduler\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*设定每个任务能够申领到的最大虚拟CPU数目*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.scheduler.maximum-allocation-vcores\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;8\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*设置任务完成指定时间（秒）之后，删除任务的本地化文件和日志目录*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.nodemanager.delete.debug-delay-sec\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;600\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*设置志在HDFS上保存多长时间（秒）*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.nodemanager.log.retain-seconds\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;86400\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; /*设定物理节点有2G内存加入资源池*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.nodemanager.resource.memory-mb\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;2048\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; 编辑完成后保存文件并退出vi编辑器\n在集群中，提交任务的入口是ResourceManager所在的服务器。但是在两个ResourceManager节点的HA集群中，无法配置单一服务器入口，所以需要通过yarn.resourcemanager.cluster-id指定一个逻辑上的服务名，这个服务名是自定义的。当外界向集群提交任务时，入口就变为这个服务名称，YARN会自动实现将访问请求转发到实际的处于Active状态的ResourceManager节点上。由于配置了逻辑服务名，所以需要设置resourcemanager节点的逻辑id，并为每个逻辑id绑定实际的主机名称\n使用下列命令复制mapred-site.xml.template文件并重命名为mapred-site.xml： cp /usr/cx/hadoop-2.7.1/etc/hadoop/mapred-site.xml.template /usr/cx/hadoop-2.7.1/etc/hadoop/mapred-site.xml 使用vi命令打开mapred-site.xml文件进行配置： vi /usr/cx/hadoop-2.7.1/etc/hadoop/mapred-site.xml 打开后的文件内容如下所示：\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; \u0026lt;?xml-stylesheet type=\u0026#34;text/xsl\u0026#34; href=\u0026#34;configuration.xsl\u0026#34;?\u0026gt; \u0026lt;!-- Licensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. See accompanying LICENSE file. --\u0026gt; \u0026lt;!-- Put site-specific property overrides in this file. --\u0026gt; \u0026lt;configuration\u0026gt; (注：需要在此处进行相关内容配置) \u0026lt;/configuration\u0026gt; 在文件中和之间增加下列内容：\n/*Hadoop对MapReduce运行框架一共提供了3种实现，在mapred-site.xml中通过\u0026#34;mapreduce.framework.name\u0026#34;这个属性来设置为\u0026#34;classic\u0026#34;、\u0026#34;yarn\u0026#34;或者\u0026#34;local\u0026#34;*/ \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;mapreduce.framework.name\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;yarn\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; 编辑完成后保存文件并退出vi编辑器\n使用vi命令打开slaves文件进行配置（要与我们前文设置的主机名相互一致，否则将会引起Hadoop相关进程无法正确启动）： vi /usr/cx/hadoop-2.7.1/etc/hadoop/slaves 打开后的文件内容如下所示：\nlocalhost （注：需要对此内容进行更改，配置为Slave节点的实际主机名） 将文件中的内容更改为下列内容：\nrealtime-1 realtime-2 realtime-3 编辑完成后保存文件并退出vi编辑器\n步骤4. 文件分发 通过下面的命令将节点1的Hadoop文件包分发到节点2中： scp -r /usr/cx/hadoop-2.7.1 root@realtime-2:/usr/cx/ 命令运行后的返回结果如下所示：\n（---------------------省略-----------------------） external.png 100% 230 0.2KB/s 00:00 banner.jpg 100% 872 0.9KB/s 00:00 maven-feather.png 100% 3330 3.3KB/s 00:00 build-by-maven-white.png 100% 2260 2.2KB/s 00:00 build-by-maven-black.png 100% 2294 2.2KB/s 00:00 bg.jpg 100% 486 0.5KB/s 00:00 icon_error_sml.gif 100% 1010 1.0KB/s 00:00 logo_apache.jpg 100% 33KB 32.7KB/s 00:00 collapsed.gif 100% 820 0.8KB/s 00:00 apache-maven-project-2.png 100% 33KB 32.7KB/s 00:00 icon_success_sml.gif 100% 990 1.0KB/s 00:00 icon_info_sml.gif 100% 606 0.6KB/s 00:00 h3.jpg 100% 431 0.4KB/s 00:00 maven-logo-2.gif 100% 26KB 25.8KB/s 00:00 h5.jpg 100% 357 0.4KB/s 00:00 newwindow.png 100% 220 0.2KB/s 00:00 icon_warning_sml.gif 100% 576 0.6KB/s 00:00 expanded.gif 100% 52 0.1KB/s 00:00 dependency-analysis.html 100% 21KB 21.3KB/s 00:00 [root@realtime-1 ~]# 通过下面的命令将节点1的Hadoop文件包分发到节点3中： scp -r /usr/cx/hadoop-2.7.1 root@realtime-3:/usr/cx/ 命令运行后的返回结果如下所示：\n（---------------------省略-----------------------） external.png 100% 230 0.2KB/s 00:00 banner.jpg 100% 872 0.9KB/s 00:00 maven-feather.png 100% 3330 3.3KB/s 00:00 build-by-maven-white.png 100% 2260 2.2KB/s 00:00 build-by-maven-black.png 100% 2294 2.2KB/s 00:00 bg.jpg 100% 486 0.5KB/s 00:00 icon_error_sml.gif 100% 1010 1.0KB/s 00:00 logo_apache.jpg 100% 33KB 32.7KB/s 00:00 collapsed.gif 100% 820 0.8KB/s 00:00 apache-maven-project-2.png 100% 33KB 32.7KB/s 00:00 icon_success_sml.gif 100% 990 1.0KB/s 00:00 icon_info_sml.gif 100% 606 0.6KB/s 00:00 h3.jpg 100% 431 0.4KB/s 00:00 maven-logo-2.gif 100% 26KB 25.8KB/s 00:00 h5.jpg 100% 357 0.4KB/s 00:00 newwindow.png 100% 220 0.2KB/s 00:00 icon_warning_sml.gif 100% 576 0.6KB/s 00:00 expanded.gif 100% 52 0.1KB/s 00:00 dependency-analysis.html 100% 21KB 21.3KB/s 00:00 [root@realtime-1 ~]# 步骤5. 配置Hadoop环境变量 通过下列命令使用vi编辑器编辑~/.bashrc文件： vi ~/.bashrc 打开后的文件内容如下所示：\n# .bashrc # User specific aliases and functions alias rm=\u0026#39;rm -i\u0026#39; alias cp=\u0026#39;cp -i\u0026#39; alias mv=\u0026#39;mv -i\u0026#39; # Source global definitions if [ -f /etc/bashrc ]; then . /etc/bashrc fi export JAVA_HOME=/usr/cx/jdk1.8.0_60 export PATH=$JAVA_HOME/bin:$PATH export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/jre/lib/tools.jar export ZK_HOME=/usr/cx/zookeeper-3.4.6 export PATH=$PATH:$ZK_HOME/bin (----------------在此处增加内容-------------------) 在~/.bashrc文件中增加以下内容： export HADOOP_HOME=/usr/cx/hadoop-2.7.1 export PATH=$PATH:$HADOOP_HOME/bin export PATH=$PATH:$HADOOP_HOME/sbin 编辑完成后保存文件并退出vi编辑器\n通过下面的命令将节点1的环境变量文件分发到节点2中： scp -r ~/.bashrc root@realtime-2:~/.bashrc 命令运行后的返回结果如下所示：\n[root@realtime-1 ~]# scp -r ~/.bashrc root@realtime-2:~/.bashrc .bashrc 100% 502 0.5KB/s 00:00 [root@realtime-1 ~]# 通过下面的命令将节点1的环境变量文件分发到节点3中： scp -r ~/.bashrc root@realtime-3:~/.bashrc 命令运行后的返回结果如下所示：\n[root@realtime-1 ~]# scp -r ~/.bashrc root@realtime-3:~/.bashrc .bashrc 100% 502 0.5KB/s 00:00 [root@realtime-1 ~]# 步骤6. 更新环境变量 执行如下命令，更新环境变量： source ~/.bashrc ssh realtime-2 \u0026#34;source ~/.bashrc\u0026#34; ssh realtime-3 \u0026#34;source ~/.bashrc\u0026#34; 步骤7. 验证Hadoop环境变量是否配置成功 通过下列命令验证Hadoop环境变量是否配置成功： hadoop ssh realtime-2 \u0026#34;hadoop\u0026#34; ssh realtime-3 \u0026#34;hadoop\u0026#34; 如果出现如下提示信息，则说明Hadoop安装配置成功： [root@realtime-1 ~]# hadoop Usage: hadoop [--config confdir] [COMMAND | CLASSNAME] CLASSNAME run the class named CLASSNAME or where COMMAND is one of: fs run a generic filesystem user client version print the version jar \u0026lt;jar\u0026gt; run a jar file note: please use \u0026#34;yarn jar\u0026#34; to launch YARN applications, not this command. checknative [-a|-h] check native hadoop and compression libraries availability distcp \u0026lt;srcurl\u0026gt; \u0026lt;desturl\u0026gt; copy file or directories recursively archive -archiveName NAME -p \u0026lt;parent path\u0026gt; \u0026lt;src\u0026gt;* \u0026lt;dest\u0026gt; create a hadoop archive classpath prints the class path needed to get the credential interact with credential providers Hadoop jar and the required libraries daemonlog get/set the log level for each daemon trace view and modify Hadoop tracing settings Most commands print help when invoked w/o parameters. [root@realtime-1 ~]# 如果没有正确输出相关信息，请检查~/.bashrc文件中的Hadoop环境变量是否配置正确，同时请确定是否使用source ~/.bashrc命令更新环境变量配置\n步骤8. 格式化HDFS 通过下列命令格式化HDFS文件系统（如果格式化失败，会有相关的错误日志输出，根据输出内容进行更改即可）：\nhadoop namenode -format 命令运行后的部分显示内容如下所示：\n(-------------------省略------------------------) 18/11/30 11:07:15 INFO metrics.TopMetrics: NNTop conf: dfs.namenode.top.windows.minutes = 1,5,25 18/11/30 11:07:15 INFO namenode.FSNamesystem: Retry cache on namenode is enabled 18/11/30 11:07:15 INFO namenode.FSNamesystem: Retry cache will use 0.03 of total heap and retry cache entry expiry time is 600000 millis 18/11/30 11:07:15 INFO util.GSet: Computing capacity for map NameNodeRetryCache 18/11/30 11:07:15 INFO util.GSet: VM type = 64-bit 18/11/30 11:07:15 INFO util.GSet: 0.029999999329447746% max memory 966.7 MB = 297.0 KB 18/11/30 11:07:15 INFO util.GSet: capacity = 2^15 = 32768 entries 18/11/30 11:07:16 INFO namenode.FSImage: Allocated new BlockPoolId: BP-348760827-10.1.1.4-1543547236332 18/11/30 11:07:16 INFO common.Storage: Storage directory /hdfs/namenode has been successfully formatted. 18/11/30 11:07:16 INFO namenode.NNStorageRetentionManager: Going to retain 1 images with txid \u0026gt;= 0 18/11/30 11:07:16 INFO util.ExitUtil: Exiting with status 0 18/11/30 11:07:16 INFO namenode.NameNode: SHUTDOWN_MSG: /************************************************************ SHUTDOWN_MSG: Shutting down NameNode at realtime-1/10.1.1.4 ************************************************************/ [root@realtime-1 ~]# 步骤9. 格式化zkfc元数据 通过下面的命令格式化DFSZKFailoverController(ZKFC)元数据（在一个节点中进行处理即可）：\nhdfs zkfc -formatZK 命令运行后的返回结果如下所示：\n（---------------省略------------------） tString=realtime-1:2181,realtime-2:2181,realtime-3:2181 sessionTimeout=5000 watcher=org.apache.hadoop.ha.ActiveStandbyElector$WatcherWithClientRef@10e31a9a 18/11/30 11:37:46 INFO zookeeper.ClientCnxn: Opening socket connection to server realtime-2/10.1.1.3:2181. Will not attempt to authenticate using SASL (unknown error) 18/11/30 11:37:47 INFO zookeeper.ClientCnxn: Socket connection established to realtime-2/10.1.1.3:2181, initiating session 18/11/30 11:37:47 INFO zookeeper.ClientCnxn: Session establishment complete on server realtime-2/10.1.1.3:2181, sessionid = 0x2675e9a37a90000, negotiated timeout = 5000 18/11/30 11:37:47 INFO ha.ActiveStandbyElector: Successfully created /hadoop-ha/HDFScluster in ZK. 18/11/30 11:37:47 INFO ha.ActiveStandbyElector: Session connected. 18/11/30 11:37:47 INFO zookeeper.ZooKeeper: Session: 0x2675e9a37a90000 closed 18/11/30 11:37:47 INFO zookeeper.ClientCnxn: EventThread shut down [root@realtime-1 ~]# 9 Hadoop集群启动运行 我们在节点1进行下列操作，在节点1中通过ssh远程登录到节点2和节点3中，实现命令的分发与运行\n步骤1. 启动HDFS相关服务 通过下面的命令可以启动HDFS相关服务： start-dfs.sh 命令运行后的返回结果如下所示：\n[root@realtime-1 ~]# start-dfs.sh 18/11/30 11:55:51 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable Starting namenodes on [realtime-2 realtime-1] realtime-2: starting namenode, logging to /usr/cx/hadoop-2.7.1/logs/hadoop-root-namenode-realtime-2.out realtime-1: starting namenode, logging to /usr/cx/hadoop-2.7.1/logs/hadoop-root-namenode-realtime-1.out realtime-1: starting datanode, logging to /usr/cx/hadoop-2.7.1/logs/hadoop-root-datanode-realtime-1.out realtime-2: starting datanode, logging to /usr/cx/hadoop-2.7.1/logs/hadoop-root-datanode-realtime-2.out realtime-3: starting datanode, logging to /usr/cx/hadoop-2.7.1/logs/hadoop-root-datanode-realtime-3.out Starting journal nodes [realtime-1 realtime-2 realtime-3] realtime-1: starting journalnode, logging to /usr/cx/hadoop-2.7.1/logs/hadoop-root-journalnode-realtime-1.out realtime-2: starting journalnode, logging to /usr/cx/hadoop-2.7.1/logs/hadoop-root-journalnode-realtime-2.out realtime-3: starting journalnode, logging to /usr/cx/hadoop-2.7.1/logs/hadoop-root-journalnode-realtime-3.out 18/11/30 11:56:11 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable Starting ZK Failover Controllers on NN hosts [realtime-2 realtime-1] realtime-2: starting zkfc, logging to /usr/cx/hadoop-2.7.1/logs/hadoop-root-zkfc-realtime-2.out realtime-1: starting zkfc, logging to /usr/cx/hadoop-2.7.1/logs/hadoop-root-zkfc-realtime-1.out [root@realtime-1 ~]# 通过下面的命令查看节点1中对应的相关服务： jps ssh realtime-2 \u0026#34;jps\u0026#34; ssh realtime-3 \u0026#34;jps\u0026#34; 命令运行后的返回结果如下所示：\n[root@realtime-1 ~]# jps 10033 ResourceManager 9427 DataNode 9315 NameNode 2597 QuorumPeerMain 10457 Jps 9625 JournalNode 9818 DFSZKFailoverController 10140 NodeManager 1743 VmServer.jar [root@realtime-1 ~]# 通过下面的命令在节点2中启动ResourceManager进程：\nssh realtime-2 \u0026#34;yarn-daemon.sh start resourcemanager\u0026#34; 命令运行后的返回结果如下所示：\n[root@realtime-1 ~]# ssh realtime-2 \u0026#34;yarn-daemon.sh start resourcemanager\u0026#34; starting resourcemanager, logging to /usr/cx/hadoop-2.7.1/logs/yarn-root-resourcemanager-realtime-2.out [root@realtime-1 ~]# 通过下面的命令查看节点2中对应的相关服务：\nssh realtime-2 \u0026#34;jps\u0026#34; 命令运行后的返回结果如下所示：\n[root@realtime-1 ~]# ssh realtime-2 \u0026#34;jps\u0026#34; 5792 DataNode 6164 NameNode 1703 VmServer.jar 6779 ResourceManager 6428 NodeManager 5981 DFSZKFailoverController 6846 Jps 2686 QuorumPeerMain 5887 JournalNode [root@realtime-1 ~]# 由返回结果可以看出，此时在节点2中已经成功启动了ResourceManager进程\n10 Hadoop 高可用性测试 笔者在写作过程中是在节点1中进行下面的操作，同学们可以在任意节点中进行下面的操作，所实现的效果是一致的\n步骤1. NodeManager状态查看 由于设置了2个NameNode，因此必然会有一个处于Active状态，一个处于StandBy状态，至于具体哪个节点处于Active状态，需要根据实际情况确定，并不是千篇一律的。\n当Hadoop成功启动后，我们打开浏览器，输入网址http://realtime-1:50070便可以访问HDFS的Web管理页面（此时可以看到realtime-1节点是处于active状态的）： 输入网址http://realtime-2:50070依然可以访问HDFS的Web管理页面（此时可以看到realtime-2节点是处于standby状态的）： 步骤2. ResourceManager状态查看 由于设置了2个ResourceManager，因此必然会有一个处于Active状态，一个处于StandBy状态，至于具体哪个节点处于Active状态，需要根据实际情况确定，并不是千篇一律的。\n在终端模拟器中，通过下面的命令可以查看逻辑ID为rm1（实际映射的节点为realtime-1）的节点对应的ResourceManager状态： yarn rmadmin -getServiceState rm1 命令运行后的返回结果如下所示（可见当前节点是active状态）：\n[root@realtime-1 ~]# yarn rmadmin -getServiceState rm1 18/11/30 16:35:11 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable active [root@realtime-1 ~]# 在终端模拟器中，通过下面的命令可以查看逻辑ID为rm2（实际映射的节点为realtime-2）的节点对应的ResourceManager状态： yarn rmadmin -getServiceState rm2 命令运行后的返回结果如下所示（可见当前节点是standby状态）：\n[root@realtime-1 ~]# yarn rmadmin -getServiceState rm2 18/11/30 16:35:44 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable standby [root@realtime-1 ~]# 步骤3. HDFS高可用测试 通过下面的命令在HDFS中创建测试文件夹/test： hadoop fs -mkdir /test 通过下面的命令查看HDFS中创建的测试文件夹/test： hadoop fs -ls / 命令运行后的返回结果如下所示：\n[root@realtime-1 ~]# hadoop fs -ls / 18/11/30 16:40:12 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable Found 1 items drwxr-xr-x - root supergroup 0 2018-11-30 16:39 /test [root@realtime-1 ~]# 由返回结果可以看出，此时依然可以成功查询HDFS文件信息\n打开浏览器，输入网址http://realtime-2:50070访问HDFS的Web管理页面，此时可以看到realtime-2节点已经成功接替成为NameNode并处于active状态（同学们需要根据实际情况来确定）：\n步骤4. YARN高可用测试 通过下面的命令，使用Hadoop自带的案例测试MapReduce应用程序的运行： hadoop jar /usr/cx/hadoop-2.7.1/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.1.jar wordcount /test /output 命令运行后的返回结果如下所示：\n[root@realtime-1 ~]# hadoop jar /usr/cx/hadoop-2.7.1/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.1.jar wordcount /test /output 18/11/30 16:47:11 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable 18/11/30 16:47:15 INFO input.FileInputFormat: Total input paths to process : 0 18/11/30 16:47:15 INFO mapreduce.JobSubmitter: number of splits:0 18/11/30 16:47:15 INFO mapreduce.JobSubmitter: Submitting tokens for job: job_1543557487449_0001 18/11/30 16:47:16 INFO impl.YarnClientImpl: Submitted application application_1543557487449_0001 18/11/30 16:47:16 INFO mapreduce.Job: The url to track the job: http://realtime-1:8089/proxy/application_1543557487449_0001/ 18/11/30 16:47:16 INFO mapreduce.Job: Running job: job_1543557487449_0001 18/11/30 16:47:26 INFO mapreduce.Job: Job job_1543557487449_0001 running in uber mode : false 18/11/30 16:47:26 INFO mapreduce.Job: map 0% reduce 0% 18/11/30 16:47:37 INFO mapreduce.Job: map 0% reduce 100% 18/11/30 16:47:38 INFO mapreduce.Job: Job job_1543557487449_0001 completed successfully 18/11/30 16:47:39 INFO mapreduce.Job: Counters: 38 File System Counters FILE: Number of bytes read=0 FILE: Number of bytes written=119357 FILE: Number of read operations=0 FILE: Number of large read operations=0 FILE: Number of write operations=0 HDFS: Number of bytes read=0 HDFS: Number of bytes written=0 HDFS: Number of read operations=3 HDFS: Number of large read operations=0 HDFS: Number of write operations=2 Job Counters Launched reduce tasks=1 Total time spent by all maps in occupied slots (ms)=0 Total time spent by all reduces in occupied slots (ms)=227232 Total time spent by all reduce tasks (ms)=7101 Total vcore-seconds taken by all reduce tasks=7101 Total megabyte-seconds taken by all reduce tasks=7271424 Map-Reduce Framework Combine input records=0 Combine output records=0 Reduce input groups=0 Reduce shuffle bytes=0 Reduce input records=0 Reduce output records=0 Spilled Records=0 Shuffled Maps =0 Failed Shuffles=0 Merged Map outputs=0 GC time elapsed (ms)=67 CPU time spent (ms)=290 Physical memory (bytes) snapshot=94629888 Virtual memory (bytes) snapshot=2064699392 Total committed heap usage (bytes)=30474240 Shuffle Errors BAD_ID=0 CONNECTION=0 IO_ERROR=0 WRONG_LENGTH=0 WRONG_MAP=0 WRONG_REDUCE=0 File Output Format Counters Bytes Written=0 [root@realtime-1 ~]# 通过下面的命令停止Active状态节点对应的ResourceManager进程（笔者写作过程中对应的为realtime-1节点，同学们需要根据实际情况来确定） ssh realtime-1 \u0026#34;yarn-daemon.sh stop resourcemanager\u0026#34; 命令运行后的返回结果如下所示：\n[root@realtime-1 ~]# ssh realtime-1 \u0026#34;yarn-daemon.sh stop resourcemanager\u0026#34; stopping resourcemanager [root@realtime-1 ~]# 通过下面的命令查看对应节点的进程信息： ssh realtime-1 \u0026#34;jps\u0026#34; 命令运行后的返回结果如下所示：\n[root@realtime-1 ~]# ssh realtime-1 \u0026#34;jps\u0026#34; 9427 DataNode 2597 QuorumPeerMain 9625 JournalNode 9818 DFSZKFailoverController 10140 NodeManager 11885 Jps 1743 VmServer.jar [root@realtime-1 ~]# 由返回结果可以看出，ResourceManager进程已经被停止\n通过下面的命令，再次使用Hadoop自带的案例测试MapReduce应用程序的运行： hadoop jar /usr/cx/hadoop-2.7.1/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.1.jar wordcount /test /output1 命令运行后的返回结果如下所示：\n[root@realtime-1 ~]# hadoop jar /usr/cx/hadoop-2.7.1/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.1.jar wordcount /test /output1 18/11/30 16:50:29 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable 18/11/30 16:50:31 INFO client.ConfiguredRMFailoverProxyProvider: Failing over to rm2 18/11/30 16:50:32 INFO input.FileInputFormat: Total input paths to process : 0 18/11/30 16:50:32 INFO mapreduce.JobSubmitter: number of splits:0 18/11/30 16:50:32 INFO mapreduce.JobSubmitter: Submitting tokens for job: job_1543567750404_0001 18/11/30 16:50:33 INFO impl.YarnClientImpl: Submitted application application_1543567750404_0001 18/11/30 16:50:33 INFO mapreduce.Job: The url to track the job: http://realtime-2:8089/proxy/application_1543567750404_0001/ 18/11/30 16:50:33 INFO mapreduce.Job: Running job: job_1543567750404_0001 18/11/30 16:50:45 INFO mapreduce.Job: Job job_1543567750404_0001 running in uber mode : false 18/11/30 16:50:45 INFO mapreduce.Job: map 0% reduce 0% 18/11/30 16:50:53 INFO mapreduce.Job: map 0% reduce 100% 18/11/30 16:50:54 INFO mapreduce.Job: Job job_1543567750404_0001 completed successfully 18/11/30 16:50:54 INFO mapreduce.Job: Counters: 38 File System Counters FILE: Number of bytes read=0 FILE: Number of bytes written=119358 FILE: Number of read operations=0 FILE: Number of large read operations=0 FILE: Number of write operations=0 HDFS: Number of bytes read=0 HDFS: Number of bytes written=0 HDFS: Number of read operations=3 HDFS: Number of large read operations=0 HDFS: Number of write operations=2 Job Counters Launched reduce tasks=1 Total time spent by all maps in occupied slots (ms)=0 Total time spent by all reduces in occupied slots (ms)=147936 Total time spent by all reduce tasks (ms)=4623 Total vcore-seconds taken by all reduce tasks=4623 Total megabyte-seconds taken by all reduce tasks=4733952 Map-Reduce Framework Combine input records=0 Combine output records=0 Reduce input groups=0 Reduce shuffle bytes=0 Reduce input records=0 Reduce output records=0 Spilled Records=0 Shuffled Maps =0 Failed Shuffles=0 Merged Map outputs=0 GC time elapsed (ms)=81 CPU time spent (ms)=280 Physical memory (bytes) snapshot=94146560 Virtual memory (bytes) snapshot=2064695296 Total committed heap usage (bytes)=30474240 Shuffle Errors BAD_ID=0 CONNECTION=0 IO_ERROR=0 WRONG_LENGTH=0 WRONG_MAP=0 WRONG_REDUCE=0 File Output Format Counters Bytes Written=0 [root@realtime-1 ~]# 由返回结果可以看出，此时YARN依然可以可靠的实现任务的调度\n在终端模拟器中，通过下面的命令可以查看逻辑ID为rm2（实际映射的节点为realtime-2）的节点对应的ResourceManager状态（同学们需要根据实际情况来确定）： yarn rmadmin -getServiceState rm2 命令运行后的返回结果如下所示：\n[root@realtime-1 ~]# yarn rmadmin -getServiceState rm2 18/11/30 16:51:39 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable active [root@realtime-1 ~]# 由返回结果可以看出，当前节点已经自动成功接替变成了active状态\n","permalink":"https://waite.wang/posts/bigdata/hadoop-group-install-and-config/","summary":"\u003ch1 id=\"hadoop基础\"\u003eHadoop基础\u003c/h1\u003e\n\u003ch3 id=\"1-实验目的\"\u003e1 、实验目的\u003c/h3\u003e\n\u003cp\u003e通过本节实验的学习，同学们可以掌握Hadoop集群环境部署与配置。本实验完成后，要求学生掌握以下内容：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e掌握集群所有节点之间SSH免密登录配置方式；\u003c/p\u003e","title":"hadoop集群的安装与配置"},{"content":" https://v2.cn.vuejs.org/\n简单使用 https://v2.cn.vuejs.org/v2/guide/installation.html\n直接用 script 引入\n直接下载并用 标签引入，Vue 会被注册为一个全局变量。(在开发环境下不要使用压缩版本，不然你就失去了所有常见错误相关的警告!)\nCDN 对于制作原型或学习，你可以这样使用最新版本：\n\u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 对于生产环境，我们推荐链接到一个明确的版本号和构建文件，以避免新版本造成的不可预期的破坏：\n\u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2.7.14\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 如果你使用原生 ES Modules，这里也有一个兼容 ES Module 的构建文件：\n\u0026lt;script type=\u0026#34;module\u0026#34;\u0026gt; import Vue from \u0026#39;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.esm.browser.js\u0026#39; \u0026lt;/script\u0026gt; 你可以在 cdn.jsdelivr.net/npm/vue 浏览 NPM 包的源代码。 Vue 也可以在 unpkg 和 cdnjs 上获取 (cdnjs 的版本更新可能略滞后)。\n请确认了解不同构建版本并在你发布的站点中使用生产环境版本，把 vue.js 换成 vue.min.js。这是一个更小的构建，可以带来比开发环境下更快的速度体验。\n在用 Vue 构建大型应用时推荐使用 NPM 安装[1]。NPM 能很好地和诸如 webpack 或 Browserify 模块打包器配合使用。同时 Vue 也提供配套工具来开发单文件组件。 # 最新稳定版 $ npm install vue@^2 响应式与插值 响应式数据与插值表达式 let value = \u0026#39;hello world\u0026#39;; document.getElementById(\u0026#39;box\u0026#39;).innerHTML = value; // 更改数据, 还要在进行一次 DOM 操作 value = \u0026#39;hello vue\u0026#39;; document.getElementById(\u0026#39;box\u0026#39;).innerHTML = value; 在内部对数据做操作, 会自动更新到页面视图上, 省去了手动操作 DOM 的步骤\n\u0026lt;div id=\u0026#34;box\u0026#34;\u0026gt; \u0026lt;!-- 1.2 插值表达式 --\u0026gt; \u0026lt;p\u0026gt;{{ title }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ content }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ title + content }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ title ? content : \u0026#39;hello\u0026#39; }}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const vm = new Vue({ // 1. 响应式数据与插值表达式 // 在内部对数据做操作, 会自动更新到页面视图上, 省去了手动操作 DOM 的步骤 el: \u0026#39;#box\u0026#39;, // el 选项用于指定一个页面中已存在的 DOM 元素来挂载 Vue 实例 data() { return { title: \u0026#39;hello world\u0026#39;, content: \u0026#39;hello vue\u0026#39; } } }) // 1.3 通过 vm 实例来访问数据 vm.title = \u0026#39;hello vue\u0026#39; \u0026lt;/script\u0026gt; 方法以及计算属性 Methods 属性 \u0026lt;div id=\u0026#34;box\u0026#34;\u0026gt; \u0026lt;p\u0026gt;{{ output() }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ output() }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ output() }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ outputContent }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ outputContent }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ outputContent }}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const vm = new Vue({ el: \u0026#39;#box\u0026#39;, // methods 选项用于定义方法, 该方法可以在插值表达式中使用 methods: { output() { console.log(\u0026#39;output\u0026#39;); } }, // 1.3 计算属性, 具有缓存性 computed: { outputContent() { console.log(\u0026#39;outputContent\u0026#39;); } } }) \u0026lt;/script\u0026gt; 以上代码 console 结果\noutput output output outputContent 计算属性 计算属性, Methods 具有缓存性质, 当我们进行第一次计算的时候, 它会将计算结果在内部做一个缓存, 当我们再次调用的时候, 它会直接返回缓存的结果, 不会再次执行函数(插值不能加括号)\n\u0026lt;div id=\u0026#34;box\u0026#34;\u0026gt; \u0026lt;p\u0026gt;{{ outputContent }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ output() }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ outputContent }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ outputContent }}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const vm = new Vue({ el: \u0026#39;#box\u0026#39;, // methods 选项用于定义方法, 该方法可以在插值表达式中使用 data() { return { message: \u0026#39;Hello World\u0026#39; } }, methods: { output() { this.message = \u0026#39;Hello Vue\u0026#39;; } }, computed: { outputContent() { console.log(`computed: ${this.message}`); } } }) \u0026lt;/script\u0026gt; // console 结果 Hello World Hello Vue 侦听器 监听响应式数据的变化, 自动 Vue 内部实现, 可以参与内部函数变化\nwatch: { message: function (newVal, oldVal) { console.log(newVal, oldVal) } } 指令 内容指令 \u0026lt;!-- 内容指令 --\u0026gt; \u0026lt;p v-text=\u0026#34;message\u0026#34;\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p v-html=\u0026#34;htmlContent\u0026#34;\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt; data() { return { message: \u0026#39;Hello World\u0026#39;, htmlContent: \u0026#39;\u0026lt;span style=\u0026#34;color: red\u0026#34;\u0026gt;Hello World\u0026lt;/span\u0026gt;\u0026#39;, } } \u0026lt;/script\u0026gt; // Hello World // Hello World(红色) 渲染指令 区别：v-if 会在判定条件为假时，将元素从 DOM 中移除，v-show 会将元素的 display 属性设置为 none, 一般使用 v-show\n\u0026lt;!-- 渲染指令 --\u0026gt; \u0026lt;!-- v-if 判定条件为真时，渲染元素 --\u0026gt; \u0026lt;p v-if=\u0026#34;bool\u0026#34;\u0026gt;message 存在\u0026lt;/p\u0026gt; \u0026lt;p v-show=\u0026#34;bool\u0026#34;\u0026gt;message 存在\u0026lt;/p\u0026gt; \u0026lt;p v-for=\u0026#34;(item, key, index) in obj\u0026#34;\u0026gt;{{ item }} {{ key }} {{ index }}\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt; data() { return { message: \u0026#39;Hello World\u0026#39;, htmlContent: \u0026#39;\u0026lt;span style=\u0026#34;color: red\u0026#34;\u0026gt;Hello World\u0026lt;/span\u0026gt;\u0026#39;, obj: { name: \u0026#39;张三\u0026#39;, age: 18 }, bool: true } } \u0026lt;/script\u0026gt; // message 存在 // message 存在 // 张三 name 0 // 18 age 1 属性指令 具体可以看 https://v2.cn.vuejs.org/v2/guide/class-and-style.html, 可以修改标签属性\n\u0026lt;!-- 属性指令 --\u0026gt; \u0026lt;p v-bind:title=\u0026#34;title\u0026#34;\u0026gt;message\u0026lt;/p\u0026gt; \u0026lt;!-- 简写 --\u0026gt; \u0026lt;p :title=\u0026#34;title\u0026#34;\u0026gt;message\u0026lt;/p\u0026gt; \u0026lt;!-- https://v2.cn.vuejs.org/v2/guide/class-and-style.html --\u0026gt; 事件指令 \u0026lt;!-- 事件指令 --\u0026gt; \u0026lt;button v-on:click=\u0026#34;alterMsg\u0026#34;\u0026gt;修改 message\u0026lt;/button\u0026gt; \u0026lt;!-- 简写 --\u0026gt; \u0026lt;button @click=\u0026#34;alterMsg\u0026#34;\u0026gt;修改 message\u0026lt;/button\u0026gt; 表单指令 v-model 可以实现双向数据绑定, 即数据的变化会影响视图，视图的变化也会影响数据\n\u0026lt;!-- v-model 可以实现双向数据绑定 --\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;message\u0026#34;\u0026gt; \u0026lt;p\u0026gt;{{ message }}\u0026lt;/p\u0026gt; 修饰符 在事件处理程序中调用 event.preventDefault() 或 event.stopPropagation() 是非常常见的需求。尽管我们可以在方法中轻松实现这点，但更好的方式是：方法只有纯粹的数据逻辑，而不是去处理 DOM 事件细节。\n具体可以看 https://v2.cn.vuejs.org/v2/guide/events.html#%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6\n以下为示例\n\u0026lt;!-- 修饰符 --\u0026gt; \u0026lt;!-- 实现原始内容的替换 --\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;message\u0026#34;\u0026gt; \u0026lt;p v-text=\u0026#34;message\u0026#34; style=\u0026#34;white-space: pre; \u0026#34;\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;!-- 在视图中，HTML中的连续空格会被默认合并为一个空格，并不会完全保留。 所以在代码中的 \u0026lt;p\u0026gt; {{message}}\u0026lt;/p\u0026gt; 中，连续的空格会被合并为一个空格，并且在渲染时不会显示多个空格。 可以使用CSS中的 white-space 属性来控制文本的处理方式 --\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; v-model.trim=\u0026#34;message\u0026#34;\u0026gt; \u0026lt;script\u0026gt; data() { return { message: \u0026#39;Hello World\u0026#39; } } \u0026lt;/script\u0026gt; 一些基本修饰符\n.lazy 在默认情况下，v-model 在每次 input 事件触发后将输入框的值与数据进行同步 (除了上述输入法组合文字时)。你可以添加 lazy 修饰符，从而转为在 change 事件之后进行同步：\n\u0026lt;!-- 在“change”时而非“input”时更新 --\u0026gt; \u0026lt;input v-model.lazy=\u0026#34;msg\u0026#34;\u0026gt; .number 如果想自动将用户的输入值转为数值类型，可以给 v-model 添加 number 修饰符：\n\u0026lt;input v-model.number=\u0026#34;age\u0026#34; type=\u0026#34;number\u0026#34;\u0026gt; 这通常很有用，因为即使在 type=\u0026ldquo;number\u0026rdquo; 时，HTML 输入元素的值也总会返回字符串。如果这个值无法被 parseFloat() 解析，则会返回原始的值。\n.trim 如果要自动过滤用户输入的首尾空白字符，可以给 v-model 添加 trim 修饰符：\n\u0026lt;input v-model.trim=\u0026#34;msg\u0026#34;\u0026gt; ","permalink":"https://waite.wang/posts/web/vue2-core-learn/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://v2.cn.vuejs.org/\"\u003ehttps://v2.cn.vuejs.org/\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"简单使用\"\u003e简单使用\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://v2.cn.vuejs.org/v2/guide/installation.html\"\u003ehttps://v2.cn.vuejs.org/v2/guide/installation.html\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003ca href=\"https://v2.cn.vuejs.org/v2/guide/installation.html#%E7%9B%B4%E6%8E%A5%E7%94%A8-lt-script-gt-%E5%BC%95%E5%85%A5\"\u003e\u003cstrong\u003e直接用 script 引入\u003c/strong\u003e\u003c/a\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e直接下载并用 \u003c!-- raw HTML omitted --\u003e 标签引入，\u003ccode\u003eVue\u003c/code\u003e 会被注册为一个全局变量。(在开发环境下不要使用压缩版本，不然你就失去了所有常见错误相关的警告!)\u003c/p\u003e","title":"Vue2 核心语法"}]